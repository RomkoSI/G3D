/**
 \page changelog Change Log

<P>
   Major version numbers introduce API changes that are not backwards
   compatible.  Minor versions are backwards compatible to the
   previous major release, except for critical bug fixes.  Deprecated
   functionality will be supported until (at least) the next major
   release.

<hr>
    <p>
    Changes in 10.01:
     <ul>
       <li> Replaced GApp::FilmSettings::enabled with FilmSettings::effectsEnabled() and FilmSettings::setEffectsEnabled() [Mike] </li>
       <li> Shader calls using Args::setRect now use implicit indices. [Mike] </li>
       <li> Shader calls using Args::setRect now use a triangle strip if unable to use single large triangle. [Mike] </li>
       <li> Fixed Projection::reconstructFromDepthProjInfo for non-symmetric matrices [Mike] </li>
       <li> Added an optional Texture::Specification::name [Mike] </li>
       <li> Add collapseEmptyTags argument to XML::unparse and XML::save [Mike] </li>
       <li> Renamed RefractionQuality to RefractionHint [Mike] </li>
       <li> Added FilmSettings::extendGBufferSpecification [Mike] </li>
       <li> Added DepthOfFieldSettings::extendGBufferSpecification [Mike] </li>
       <li> Added MotionBlurSettings::extendGBufferSpecification [Mike] </li>
       <li> Added AmbientOcclusionSettings::extendGBufferSpecification [Mike] </li>
       <li> Added GApp::extendGBufferSpecification [Mike] </li>
       <li> G3D::Vector4uint16 [Mike] </li>
       <li> Added G3D::BindlessTextureHandle to support bindless textures. [Mike] </li>
       <li> Added GuiPane::addDropDownList variants that accept std::function<void(void)> for their callback. [Mike] </li>
	   <li> Added Framebuffer::blitTo [Mike] </li>
       <li> Added Texture::singleChannelDifference [Mike] </li>
       <li> Added Texture::Visualization::setShaderArgs [Mike] </li>
       <li> Added Texture::Visualization::colorShiftMatrix [Mike] </li>
       <li> Added ImageFormat::floatFormat [Mike] </li>
       <li> Added OSWindow::Settings::alwaysOnTop [Mike] </li>
       <li> Fixed Scroll Pane Rendering [Sam
       <li> Changed FileDilaog to use Native File Dialogs (NFD) [Sam] </li>
       <li> Added std::function (and thus capturing lambda) support to GuiButtons [Mike] </li>
       <li> Added G3D::SmallTable [Mike] </li>
       <li> GuiTheme::WindowStyle::FULL_DISAPPEARING_STYLE and GuiTheme::WindowStyle::PARTIAL_DISAPPEARING_STYLE added [Sam]</li>
       <li> VideoOutput/VideoInput APIs stripped down, and functionality restored [Sam] </li>
       <li> FFmpeg updated to newest version (v2.5.4) [Sam] </li>
       <li> G3DSpecification::deployMode allows forcing a developer machine into end-user mode for testing</li>
       <li> GApp's Files Used section now uses canonical absolute paths and sorts by filename</li>
       <li> Added CPU procedural geometry sample program</li>
       <li> Fix: ArticulatedModel::Geometry::cleanGeometry now correctly propagates vertex normals back to the source vertex array even when not simultaneously merging colocated vertices.</li>
       <li> Moved Beta Squadron scene to data-files</li>
       <li> Changed G3D::Projection to have a 50 degree field of view and infinite projection plane by default</li>
       <li> Added G3D::Surface::lastChangeTime and G3D::ShadowMap::lastUpdateTime</li>
       <li> G3D::ShadowMap%s now only update when the light or a shadow caster has changed since the last update</li>
       <li> Added G3D::Renderer and G3D::DefaultRenderer implementation</li>
       <li> Added GApp::m_renderer field</li>
       <li> Switched Starter sample project to use DeferredRenderer</li>
       <li> G3D::AlphaHint</li>
       <li> Replaced Surface::canRenderIntoGBuffer with Surface::canBeFullyRepresentedInGBuffer</li>
       <li> Removed Surface::renderTranslucent (Surfaces should now check G3D::RenderDevice::depthWrite to detect opaque passes)</li>
       <li> Removed UniversalSurface::extract (use G3D::dispatchOnType)</li>
       <li> Removed Surface::render overload that handles shadow maps (use G3D::Renderer)</li>
       <li> Texture::white(), opaqueBlack(), etc. now return const references</li>
       <li> Unified most &lt;white&gt; textures</li>
       <li> Assigned color Textures names based on their color</li>
       <li> Removed all instances of radianceScale throughout the system</li>
       <li> Removed Surface::depthWriteHint; there are now strict semantics for which surfaces may write to the depth buffer</li>
       <li> Fix: Added min/max/mean texture support for sRGB formats, which fixed some alpha blending and sorting bugs</li>
       <li> Modified viewer to speed re-loading of models</li>
       <li> Built glew as a standalone static library (used to be part of GLG3D)</li>
       <li> Added G3D::DepthFirstTreeBuilder template class, supporting methods DepthFirstTreeBuilder::goToParent() and DepthFirstTreeBuilder::enterChild(Node& node)</li>
       <li> Added G3D::buildPrefixTree(Array<String>& list, DepthFirstTreeBuilder<String>& tree) to build prefix hierarchy trees according to G3D::greatestCommonPrefix</li>
       <li> Added G3D::greatestCommonPrefix(consst String a, const String b), returns greatest common :, ;, /, , or \ separated prefix</li>
       <li> Added implementation of weighted, blended order-independent transparency to G3D::DefaultRenderer</li>
       <li> Added "call " prefix to pre-Build Event scripts to ensure that Visual Studio runs all lines</li>
       <li> Refactored GuiMenu constructor to eliminate duplicate code</li>
       <li> Added optional destination pixel offset to G3D::Film::exposeAndRender</li>
       <li> Fix for determinism in Surfel::scatter [Axel Lewenhaupt]</li>
       <li> Fix for PrecomputedRandom::reset override [Axel Lewenhaupt]</li>
       <li> Textures created from OpenGL handles can now avoid deallocating the underlying GL resource on deallocation</li>
       <li> Added projectToPixelMatrix to the values automatically set on a shader by Camera </li>
       <li> Separated data-files out into separate asset packs in the data10 directory</li>
       <li> Removed G3D::Surface::hasPartialCoverage to simplify the API</li>
       <li> Added Vector2uint32 and Point2uint32 </li>
       <li> Removed GApp::renderDebugInfo and replaced it with the DebugTextWidget </li>
       <li> Added Image::saveGIF(const String& filename, const Array<shared_ptr<Image>>& sequence, const double& fps) for GIF image output </li>
       <li> Added GuiButton::isdown(), GuiButton::setDown(), GuiButton::setUp() </li>
       <li> ArticulatedModel now allocates all indices in the same large index buffer </li>
       <li> Added Oculus SDK to G3D </li>
       <li> Added GLG3DVR.lib library for VR </li>
       <li> Removed fixed-function ShadowMap::setMode </li>
       <li> ShadowMap now minimizes the update when objects move</li>
       <li> ShadowMap now notices when a Surface disappears</li>
       <li> Added \link float16 float16\endlink </li>
       <li> Simplified ArticulatedModel::Pose conversion from Any for instancing </li>
       <li> Added new G3D Transparency Test scene </li>
       <li> Added new G3D Holodeck scene </li>
       <li> Framebuffer now guarantees that attachment points match shader output layout qualifiers </li>
       <li> Renamed "computeF" to "schlickFresnel" in shaders and C++ </li>
       <li> Added ExpressiveLightScatteringProperties::receivesShadows </li>
       <li> Removed GameTime (use G3D::SimTime) </li>
       <li> Added G3D::roundStochastically() </li>
       <li> Changed SimTime to float (from double) </li>
       <li> Added Camera, Texture*, and UniversalMaterial* structs in GLSL </li>
	   <li> Added stochastic shadow mapping support via Light::stochastic and the HIGH_QUALITY_SHADOW_MAP_FILTERING shader macro</li>
	   <li> Added default ArticulatedModel::Specification::refractionQuality hint </li>
	   <li> G3D::Args::setNumIndices can now override the length of the attribute arrays or index arrays</li>
	   <li> Added G3D::Array randomize for parallel arrays </li>
	   <li> Renamed G3D::Proxy to G3D::lazy_ptr </li>
	   <li> Added OpenVR API to the distribution </li>
	   <li> G3D::FilePath::mangle </li>
	   <li> Threadsafed EXR image loading </li>
	   <li> Added support for loading 1-bit PNG </li>
	   <li> G3D::Framebuffer::invertY </li>
	   <li> G3D::Framebuffer::isHardwareFramebuffer </li>
	   <li> Allowed G3D::Framebuffer to model the hardware framebuffer </li>
	   <li> Added optional invertY parameter to G3D::Draw::rect2D </li>
	   <li> GApp::Settings::FilmSettings -> GApp::Settings::HDRFramebufferSettings </li>
	   <li> Moved guard band from GApp::Settings to G3D::GApp::HDRFramebufferSettings </li>
	   <li> Removed (unused) offset and downsample arguments from Film::exposeAndRender </li>
	   <li> Switched to standard engine smoothness for encoding glossy lobes </li>
	   <li> Re-tuned OBJ material import for glossy terms </li>
	   <li> Added GLCaps::smallHDRFormat </li>
	   <li> G3D::Texture::cosHemiRandom(), G3D::Texture::sphereRandom(), G3D::Texture::uniformRandom()</li>
	   <li> Fixed SNORM ImageFormats when invoking Texture::fromPixelTransferBuffer</li>
	   <li> isWhiteSpace &rarr isWhitespace</li>
      </ul>
    </p>

   Highlights of 10.00:
   <ul>
     <li> Significantly improved AmbientOcclusion </li>
     <li> Significantly improved DepthOfField </li>
     <li> Significantly improved MotionBlur </li>
     <li> Fast G3D::String</li>
     <li> Fast Shader compilation</li>
     <li> GLSL library routines</li>
     <li> Minimum specification is now OpenGL 3.30 core, support through OpenGL 4.x</li>
     <li> Removed all fixed-function code</li>
     <li> Auto-journaling through F4/F6</li>
   </ul>

   <p>
   Changes in 10.00:
   <ul>
    <li> Draw::histogram [Sam] </li>
    <li> G3D::guiLogSliders now deals properly with ranges that span 0 [Dan]</li>
    <li> Replaced g3d_ModelViewProjectionMatrix with g3d_ObjectToScreenMatrix [Sam]</li>
    <li> Removed support for g3d_sz2D uniforms [Sam] </li>
    <li> G3D::guiLogSliders can now be set to clamp the bounds to infinity[Dan]</li>
    <li> Added ArticulatedModelSpecificationEditorDialog [Sam] </li>
    <li> Added PowerOfTwoAdapter and SquareAdapter [Sam] </li>
    <li> Python 3.4 support for shell scripts on Windows [Sam] </li>
    <li> Added Matrix3x4 [Sam] </li>
    <li> Removed G3D::RenderBuffer. Use G3D::Texture instead. [Mike] </li>
    <li> O(n) improved to O(log n) run time for MeshShape::getRandomSurfacePoint [Sam]</li>
    <li> Removed GApp::m_depthBuffer. Use m_framebuffer-&gt;texture(Framebuffer::DEPTH)</li>
    <li> G3D::Shader now defines a G3D_SHADER_STAGE macro in shaders </li>
    <li> G3D::Random is now more uniform [Sam] </li>
    <li> G3D::GBuffer::Field::SS_EXPRESSIVE_MOTION </li>
    <li> G3D::GBuffer::Field::SS_POSITION_CHANGE now is actually position change--no non-physical elements </li>
    <li> Fix: G3D::UniversalSurface now checks for points behind the camera when writing SS_POSITION_CHANGE </li>
    <li> G3D::G3DAllocator </li>
    <li> TriTree::Poly::computeArea() computes area accurately [Sam] </li>
    <li> All G3D string routines now take and return G3D::String</li> 
    <li> G3D::String</li> 
    <li> G3D::NotAdapter </li>
    <li> G3D::GuiPane::removeAllChildren </li>
    <li> Articulated Models dragged into a GApp and added to Scene are now guaranteed to have unique, valid names and to be properly saved by the scene. [Sam] </li>
    <li> G3D::GBuffer::setShaderArgsWrite </li>
    <li> G3D::GBuffer::setShaderArgsRead </li>
    <li> G3D::GApp::m_depthPeelFramebuffer </li>
    <li> G3D::alphabeticalIgnoringCaseG3DLastLessThan</li>
    <li> G3D::Framebuffer::resize </li>
    <li> Moved tone mapping before bloom in G3D::Film </li>
    <li> Removed automipmapping from G3D::Texture. [Mike] </li>
    <li> G3D::Texture now supports 2D texture arrays [Mike] </li>
    <li> G3D::Noise API changed </li>
    <li> G3D::DoNotInitialize </li>
    <li> G3D::MirrorQuality and G3D::Refraction quality changed from continuums to specific sets of values. [Mike] </li>
    <li> Extended G3D::Noise::sampleFloat to (quickly) produce multiple octaves as a convenience. </li>
    <li> G3D::Texture now uses non-power-of-two OpenGL textures everywhere </li>
    <li> G3D::Shader and G3D::Args now support cubemap image shader uniforms [Mike] </li>
    <li> G3D::Shader and G3D::Args now support integer and unsigned integer image shader uniforms [Mike] </li>
    <li> G3D::Shader preprocessing now ignores pragmas within comments </li>
    <li> G3D::Shader preprocessing now caches multiply included files </li>
    <li> G3D::Camera::maxCoCRadiusPixels </li>
    <li> G3D::Camera::circleOfConfusionRadius renamed to G3D::Camera::circleOfConfusionRadiusPixels</li>
    <li> G3D::DepthOfFieldSettings::circleOfConfusionRadius renamed to G3D::DepthOfFieldSettings::circleOfConfusionRadiusPixels</li>
    <li> Fix: Corrected a serious error in GaussianBlur where the center tap had the wrong weight </li>
    <li> Fix: removed directional bias and improved smoothness for low blur factors in DepthOfField </li>
    <li> Fix: Texture preprocessing gammaAdjust and modulate to not affect alpha </li>
    <li> G3D::Token and G3D::TextInput now distinguish integer and hexadecimal constants </li>
    <li> G3D::Any now preserves hexadecimal constants when deserializing </li>
    <li> G3D::GApp screenshots (F4) now prompt for a filename on save </li>
    <li> Added several materials to the data-files directory </li>
    <li> Added support for dragging and dropping .ArticulatedModel.Any, .MD3Model.Any, .MD2Model.Any, and .Heightfield.Any files directly onto a G3D::GApp</li>
    <li> Set G3D::RenderDevice::setSwapBuffersAutomatically(false) in the default G3D::GApp</li> 
    <li> Made G3D::GApp::onGraphics3D into a full-featured forward shading renderer</li> 
    <li> Enhanced motion and camera tracking in the Entity sample </li>
    <li> Added rock models </li>
    <li> Added several materials </li>
    <li> G3D::FilmSettings::antialiasingHighQuality (defaults to true)</li>
    <li> G3D::Entity::setShouldBeSaved </li>
    <li> Changed default Light::farPlaneZLimit to -finf() </li>
    <li> G3D::FrameName </li>
    <li> G3D::Queue::copyInto </li>
    <li> template<class S> void G3D::Array::append(const Array<S>& array) </li>
    <li> Made GApp::loadScene trigger onPose/onGraphics to force shader loading </li>
    <li> Added G3D::ImageFormat::R8_SNORM, ImageFormat::R16_SNORM, ImageFormat::RG8_SNORM, ImageFormat::R16_SNORM </li>
    <li> G3D::Color4::fromASRGB</li>
    <li> G3D::UniformTable</li>
    <li> G3D::InterpolateMode::NEAREST_MIPMAP_LINEAR, G3D::InterpolateMode::LINEAR_MIPMAP_NEAREST, G3D::InterpolateMode::NEARESt_MIPMAP_NEAREST</li>
    <li> G3D::VisibleEntity Any constructor now allows setting the initial pose for an ArticulatedModel</li>
    <li> G3D::AnyTableReader::getFilenameIfPresent</li>
    <li> G3D::squareMagnitude</li>
    <li> Added many CC-BY and CC0 music files</li>
    <li> G3D::Color3::neonGradient </li>
    <li> Removed ArticulatedModel::MeshMergeCriterion. Replace the old OPAQUE value with meshMergeOpaqueClusterRadius = ALL, meshMergeTransmissiveClusterRadius = NONE. Replace the old NEVER with
    meshMergeOpaqueClusterRadius = NONE, meshMergeTransmissiveClusterRadius = NONE. Replace the old ALL with meshMergeOpaqueClusterRadius = ALL, meshMergeTransmissiveClusterRadius = ALL.</li>
    <li> Light::findBrightestLightIndex, Light::findBrightestLight</li>
    <li> FullScreenWidget </li>
    <li> ArticulatedModel::Specification::OBJOptions::stripRefraction </li>
    <li> G3D::OrderedTable </li>
    <li> G3D::Sound, G3D::AudioChannel, G3D::AudioDevice </li>
    <li> Array::find, Array::findIndex, etc. now allow the type begin sought to differ from the array element type.</li>
    <li> Fixed AABox::intersect to correctly compute empty intersections (vs. zero volume) in the empty case [David Milaenen]</li>
    <li> Added support for instanced rendering of ArticulatedModels via ArticulatedModel::Pose::numInstances</li>
    <li> G3D::SlowMesh </li>
    <li> Added Triangle::otherSide </li>
    <li> Added two-sided testing for G3D::CollisionDetection::collisionTimeForMovingSphereFixedTriangle </li>
    <li> Added g3d_NumInstances to Shader built-ins</li>
    <li> Removed deprecated methods from G3D::Args</li>
    <li> Added support for glVertexAttribDivisor to G3D::Args::setAttributeArray</li>
    <li> Scene::registerEntitySubclass </li>
    <li> Added .count() method to classes created with G3D_DECLARE_ENUM_CLASS</li>
    <li> G3D::GuiPane::addEnumClassRadioButtons</li>
    <li> G3D::FileSystem::rename </li>
    <li> G3D::lerpAngle </li>
    <li> G3D::Triangle::barycentric</li>
    <li> G3D::AABox::minkowskiSum</li>
    <li> G3D::ControlPointEditor</li>
    <li> Removed RenderDevice::setLineWidth </li>
    <li> Added ignoreInt, ignoreFloat, ignoreDouble, ignoreString for use with default output arguments </li>
    <li> Added Draw::point, Draw::points with various overloads </li>
    <li> Added AnyTableReader::get(name, value, factory) and getIfPresent equivalent </li>
    <li> Extended the build system to support MSBuild and multiple versions of Visual Studio 12+ [Brett Lajzer, Chad Layton, Kevin Todisco, Morgan McGuire] </li>
    <li> Added G3D::Grid </li>
    <li> Added a Sampler to UniversalMaterial </li>
    <li> Added G3D::Pathfinder </li>
    <li> Added G3D::BumpMap::computeBumpMap </li>
    <li> Added support for 16- and 32-bit per channel ImageFormats for G3D::Image </li>
   </ul>
   
   <p>
   Changes in 9.01:
   <ul>
    <li> Added CMakeLists.txt files to optionally support building with CMake </li>
    <li> Fix: Corrected a glfwSwapInterval call in GLFWWindow that requires a current context </li>
    <li> Fix: Changed how shared_ptr and weak_ptr are included in G3D::platform.h to enable linking against libc++ </li>
    <li> Fix: Added ifdef to prevent redefinition error with int64 and long constructors on 64-bit linux in G3D:Any </li>
    <li> Fix: GLFWWindow now obeys stereo setting request </li>
   </ul>
   </p>

   <p>
   Changes in 9.00:
   <ul>
    <li> Added depth peel functionality to Surface::renderDepthOnly and its subclasses </li>
    <li> Object velocities are kept when time does not advance, allowing for freeze-frame motion blur [Sam] </li>
    <li> Updated GuiTextureBox Interface [Sam] </li>
    <li> RenderDevice::current &rarr; RenderDevice::current </li>
    <li> Removed RenderDevice::applyRect and replaced it with RenderDevice::apply [Sam] [James] </li>
    <li> Shader::ShaderProgram::addVertexAttributesFromSource & addUniformsFromSource support full modern GLSL parsing rules [Sam] </li>
    <li> Added Interpolation Mode and Extrapolation Mode Radio Buttons to PhysicsFramSplineEditor Window [Sam] </li>
    <li> Added DrawTitle [Sam] </li>
    <li> RenderDevice::intersectClip2D </li>
    <li> LAUNCH_SHADER API [James]</li>
    <li> G3D::LightingEnvironment now save when saving a G3D::Scene [Mike] </li>
    <li> G3D::ProfileWindow now reports results to 3 decimal places [Mike] </li>
    <li> OSWindow::setIcon now works on OS X [Mike] </li>
    <li> Added MD2Model::intersect [Mike] </li>
    <li> Removed MIN_BYTES template parameter from G3D::Array [Mike] </li>
    <li> Added accurateBounds to MD3Model::posePart [Dan] </li>
    <li> Added MD3Model::intersect [Dan] </li>
    <li> Added HeightFieldModel::Intersect [Dan] </li>
    <li> Added Framebuffer::texture methods [Dan] </li>
    <li> Viewer now works for md3 models [Dan] </li>
    <li> Clicking in a GuiTextBox now moves the cursor [Sam] </li>
    <li> COLLADA now loads materials from assimp properly. [Dan] </li>
    <li> UniversalMaterials can now be loaded from textures instead of just from files. [Dan] </li>
    <li> all member variables of model::HitInfo are now const so as to require the users to use the set method instead of setting the fields directly. [Dan] </li>
    <li> PhysicsFrameSplines control points can now be selected and edited with the mouse. [Dan] </li>
    <li> In the starter, pressing 'g' now moves the camera to the surface at the center of the screen [Sam]</li>
    <li> Frustum::boundingBox </li>
    <li> Added simpleGame sample [Mike] </li>
    <li> Added a Seymour.ArticulatedModel.Any [Mike] </li>
    <li> Added SceneEditorWindow::preventEntitySelect and SceneEditorWindow::setPreventEntitySelect [Mike] </li>
    <li> Changed the cursor to be shown by default when full screen [Sam] </li>
    <li> Added ArticulatedModel HeightfieldModel to MaterialTest [Sam] </li>
    <li> Added ArticulatedModel::Specification HashTrait and operator==</li>
    <li> Moved Viewer and PixelShader from using Lighting to LocalLightingEnvironmnet, and removed now-deprecated Lighting [Sam] </li>
    <li> Implemented a global texture cache </li>
    <li> Fixed .am.any drop to support dropping of multiple models and placing dragged entities onto surfaces. Also made FILE_DROP events return nontrivial x and y coordinates. [Sam] </li>
    <li> Fixed mouse clicks for ThirdPersonManipulator and Entity Selection to recognize guard band [Sam] </li>
    <li> Support for both linear and cubic splines </li>
    <li> Casting a ray into the scene now returns information about the entity it hit. [Dan] </li>
    <li> Added virtual name method to model and added class hitInfo to model (for future use) [Dan] </li>
    <li> Fixed video recording bug so now recording can properly not show the GUI [Sam] </li>
    <li> Added debugDrawLabel [Sam] </li>
    <li> Added OS X ASSIMP support, enabled .dae loading in OS X. [Mike] </li>
    <li> Added _NO_DEBUG_HEAP=1 to all scratch projects [Mike] </li>
    <li> G3D::HaltonSequence [Mike] </li>
    <li> G3D::Shader respects single-line comments in preprocessor pragmas for shaders [Mike] </li>
    <li> G3D::Shader now supports #expect pragmas [Mike] </li>
    <li> G3D::OSWindow::Settings::debugContext [Mike] </li>
    <li> G3D::Shader now supports #foreach pragmas [Mike] </li>
    <li> G3D::BufferTexture::name() [Mike] </li>
    <li> Unframed windows now supported. [Mike] </li>
    <li> Added free list for G3D::GLPixelTransferBuffer opengl buffer objects, and GLPixelTransferBuffer::deleteAllBuffers() which is called on shutdown. [Mike] </li>
    <li> G3D::BufferTexture [Mike] </li>
    <li> GLCaps::maxTextureBufferSize() [Mike] </li>
    <li> GLCaps::PixelTransferBuffer::pixelCount() [Mike] </li>
    <li> Added minGlutGLSL sample [Mike] </li>
    <li> Added support for compute shaders in G3D::Shader [Mike] </li>
    <li> F9 now starts/stops time [Mike] </li>
    <li> Color3::operator/() [Mike] </li>
    <li> G3D::MarkerEntity </li>
    <li> G3D_DECLARE_ENUM_CLASS </li>
    <li> Added classname() static method to G3D_DECLARE_ENUM_CLASS_METHODS </li>
    <li> Added Overloaded forms of DebugDraw to avoid boilerplate typing. [Sam] </li>
    <li> When loading a UniversalMaterial from a ParseMTL, the case of map_d (alpha) and map_Kd (lambertian) as separate files is now supported; also fixes a bug with Shininess and Glossiness read from separate files. [Sam]</li>
    <li> Added support for JSON special numbers to G3D::TextInput </li>
    <li> G3D::ThreadsafeQueue </li>
    <li> Added TextInput constructor from raw char array</li>
    <li> Upgraded mongoose.lib to version 3.8 beta, added patches for websocket support (from git)</li>
    <li> Added libqrencode to the G3D distribution (it is not part of G3D itself)</li>
    <li> G3D::GuiMenu uses a scroll pane when its contents get too big for the window [Mike] </li>
    <li> GuiTheme::ScrollPaneStyle [Mike] </li>
    <li> Added a global texture cache [Mike] </li>
    <li> WeakCache::getValues [Mike] </li>
    <li> ArticulatedModel::geometryArray() [Mike] </li>
    <li> PhysicsFrameSpline::scaleControlPoints() [Mike] </li>
    <li> ArticulatedModel completely rewritten, now supports skeletal animation [Mike] </li>
    <li> Added support for integer and double G3D::AttributeArray in G3D::Shader [Mike] </li>
    <li> Added Vector4int32 [Mike] </li>
    <li> Changed Spline::cyclic to Spline::extrapolationMode [Mike] </li>
    <li> SceneEditorWindow::setShowLightSources [Mike] </li>
    <li> NetMessageIterator::headerBinaryInput [Mike] </li>
    <li> AmbientOcclusionSettings now available for tweaking in SceneEditorWindow [Mike] </li>
    <li> Array::setAll() [Mike] </li>
    <li> Integrated ASSIMP (the Open Asset Import Library) into G3D, now used for loading ".dae" files in ArticulatedModel in Windows </li>
    <li> Removed G3D::CarbonWindow </li>
    <li> Lighting and Surface::Environment were merged into LightingEnvironment</li>
    <li> G3D::Any now fully supports parsing of Python and JSON data types - Any accepts Python-like tables using ":" and accepts "None" (case sensitive) for Nil [Sam]</li>
    <li> Changed Any::NONE to Any::NIL (and Any::isNone() to Any::isNil()) [Sam] </li>
    <li> Added ArticulatedModel::saveOBJ [Sam] </li>
    <li> Added G3D::GuiScrollPane [Dan] </li>
    <li> Added G3D::GuiScrollBar [Dan] </li>
    <li> G3D::Array::removeNulls </li>
    <li> Any parser treats proper unquoted strings as strings, instead of as symbols [Sam] </li>
    <li> G3D::setNetworkConnectionInterval and G3D::networkConnectionInterval [Mike] </li>
    <li> New network API. See G3D::NetConnection, G3D::NetServer, G3D::NetSendConnection, G3D::NetAddress</li>
    <li> G3D::Draw::rect2D uses the programmable pipeline (can now produce results outside of [0, 1])</li>
    <li> G3D::Shader::unlit </li>
    <li> G3D::Table::getValues </li>
    <li> G3D::BufferUnmapper </li>
    <li> Added a texture browser to the developer panel [Mike] </li>
    <li> Any parser accepts any type of bracket, brace, or paren for any type of data (table or array), and supports the ambiguous case with EMPTY_CONTAINER Type [Sam]</li>
    <li> G3D::smoothstep and G3D::smootherstep</li>
    <li> G3D::ArticulatedModel reverseWinding preprocess instruction </li>
    <li> G3D::Vector2::maxAbs, G3D::Vector2::minAbs, G3D::Vector2::abs </li>
    <li> G3D::GLFWWindow now used on Windows. [Mike] </li>
    <li> G3D::replace [Sam] </li>
    <li> G3D::Light::randomEmissionDirection() now works for square spot lights. [Dan] </li>
    <li> In debug mode on Windows, G3D now creates a debug GL context. [Mike] </li>
    <li> Texture::copy() [Mike] </li>
    <li> RadiosityNormalMap support to G3D::UniversalSurface [Mike] </li>
    <li> BinaryInput::readFixedLengthString </li>
    <li> Added STL support for ArticulatedModel </li>
    <li> G3D::Args now supports Immediate-Mode rendering through Args::setAttributePointer, Args::setIndexPointer, and Args::sendImmediateModePrimitives [Mike] </li>
    <li> G3D::Draw::light, G3D::Draw::camera, G3D::Draw::visualizeCameraGeometry, G3D::Draw::visualizeLightGeometry [Mike] </li>
    <li> G3D::Args::preamble, G3D::Args::appendToPreamble [Mike] </li>
    <li> G3D::Line2D [Mike] </li>
    <li> Changed all Visual Studio projects to use $(ProjectDir) for relative directories </li>
    <li> G3D::FastPointHashGrid </li>
    <li> G3D::FastPODTable </li>
    <li> G3D::OSWindow::getFullScreenResolutions </li>
    <li> G3D::Any::save now preserves include expressions </li>
    <li> G3D::MotionBlur </li>
    <li> Made OSWindow::getJoystickState const</li>
    <li> Switched to std::shared_ptr from ReferenceCountedPointer </li>
    <li> Converted UniversalSurface gbuffer rendering to use Shader </li>
    <li> G3D::Surface::renderDepthOnly new renderTransmissiveSurface parameter [Mike] </li>
    <li> Cone::solidAngleFromHalfAngle and Cone::halfAngleFromSolidAngle (both float and double versions) [Mike] </li>
    <li> G3D::Surface::renderDepthOnly now has a flag for rendering transmissives that defaults to true. In the early Z passes for starter and ArticulatedViewer, this is set to false. </li>
    <li> G3D::isNaN now correctly checks the full range of bit patterns NaN is allowed to be in IEEE. </li>
    <li> G3D::PhysicsFrameSplineEditor::renderManipulator [Mike] </li>
    <li> G3D::AmbientOcclusion::Settings::sampleNum, G3D::AmbientOcclusion::setSampleNum(), G3D::AmbientOcclusion::setSampleNum() [Mike] </li>
    <li> G3D::Scene</li>
    <li> G3D::Projection </li>
    <li> G3D::Frustum </li>
    <li> G3D::DepthOfField </li>
    <li> CoordinateFrame::toWorldSpace now works with planes at infinity </li>
	<li> G3D::Box no longer stores explicit corners, and now stores edgeVectors in place of axes and extents. [Mike] </li>
    <li> Optimized G3D::Surface rendering and G3D::Entity pose </li>
    <li> Added number of G3D::Surfaces and onPose time to G3D::GApp HUD </li>
    <li> G3D::PathDirection </li>
    <li> G3D::TextInput::readUntilDelimiterAsString() </li>
    <li> G3D::SkyboxSurface </li>
    <li> Switched all of G3D to use G3D::Shader, removed OldShader and SuperShader [Mike] </li>
    <li> Added allStagesShader sample to showcase new Shader. [Mike] </li>
    <li> Added the G3D::PrimitiveType::PATCHES to constants.h. [Mike] </li>
    <li> Updated glew.h, glew.c, glxew.h and wglew.h to their latest version (1.7). [Mike] </li>
    <li> Added #for prgama support to G3D::Shader. [Mike] </li>
    <li> G3D::Shader, intended to eventually replace G3D::OldShader. [Mike] </li>
    <li> G3D::Args, a separate class used extensively by Shader. [Mike] </li>
    <li> G3D::RenderDevice::apply and G3D::RenderDevice::applyRect, both of which take a Shader and Args. [Mike] </li>
    <li> Added the allStagesShader project to showcase Shader using all 5 stages of the OpenGL 4 programmable shader pipeline. [Mike] </li>
    <li> Added icosahedron.obj, an icosahedron with all vertices on the unit sphere., used in allStagesShader. [Mike] </li>
    <li> Added optional vignetting to G3D::Film</li>
    <li> Extended G3D::Camera with two depth-of-field models </li>
    <li> G3D::AmbientOcclusion screen-space ambient obscurance [Morgan + Mike] </li>
    <li> G3D::ImageFormat::BGRA8 [Mike] </li>
    <li> Added convertRGBA8toBGRA8 functionality to PixelTransferBuffer::convertBuffer() [Mike] </li>
    <li> Modified Win32Window::setIcon to properly convert the icon to BRGA. (Our G3D icon now displays properly). [Mike] </li>
    <li> Added enum ImageFormat::NumberFormat which is {FLOATING_POINT_FORMAT, INTEGER_FORMAT, NORMALIZED_FIXED_POINT_FORMAT, OTHER}.
         To eventually replace the floatingPoint boolean. Modified the constructor to match, and set its value for all image formats specified in the .cpp. [Mike] </li>
    <li> ImageFormat::isIntegerFormat [Mike] </li>
    <li> ImageFormat::channelMask, which returns a Color4 that masks off unused components in the format, given in RGBA.
        For example, the mask for R32F is (1,0,0,0), for A32F is (0,0,0,1), for RGB32F is (1,1,1,0).
        (Note that luminance is interpreted as using only the R channel). Used by GLCaps::supportsTextureDrawBuffer(). [Mike]</li>
    <li> GLCaps::supportsTextureDrawBuffer(const ImageFormat* fmt). Extended RenderDevice::init to write out the
         result of this function for each format alongside the supportsTexture and supportsRenderBuffer functions. [Mike] <\li>
    <li> Modified MD3Model::findFrameNum() to make the animations smoother until we get to implementing blending between animations [Mike]</li>
    <li> Added an optional mipLevel parameter to getTexImage, which defaults to 0. [Mike]</li>
    <li> Implemented G3D::Texture::generateMipMaps() (It was defined in the header but not implemented before). [Mike]</li>
    <li> Modified G3D::Tri::Intersector to store a backside boolean if we hit the backside of the Tri. getResult will flip normals/tangents if this is true. [Mike]</li>
    <li> Added a new twoSided parameter to the Tri constructor, if set to true, Tri::Intersector will do double-sided intersections. (used sign bit of area, no change to Tri size) [Mike]</li>
    <li> Removed G3D::Tri::otherSide() (it does not work with the new CPUVertexArrayFormat).  [Mike]</li>
    <li> Removed the CPUVertexArray* from Tri. Updated all methods that access information about Tri to take a const Ref to a CPUVertexArray, and added G3D::TriTree::getCPUVertexArray() (Tri is now 24 bytes in a 64 bit build) [Mike]</li>
    <li> Removed v0, e1, e2, from G3D::Tri. Added the methods e1 and e2. Changed Tri::m_doubleArea to Tri::m_area for intuition's sake (Tri is now 32 bytes in a 64 bit build)[Mike]</li>
	<li> Completely redesigned G3D::Tri. It now stores only v0, e1, e2, three indices into a G3D::CPUVertexArray, a pointer to G3D::CPUVertexArray, a lazy_ptr<UniversalMaterial>,
	and doubleArea (72 bytes in a 64 bit build). [Mike]</li>
    <li> Now Passing  a pointer to the G3D::TriTree throughout all intersectRay functions, and uses it to set G3D::Tri::Intersector's primitive index [Mike]</li>
	<li> Added G3D::Surface::getTris(), a static method which takes an array of surfaces and returns a G3D::CPUVertexArray and an Array<Tri> from the surfaces, by separating the
	surfaces by subclass and calling getTrisHomogenous() on them. [Mike]</li>
	<li> Added G3D::Surface::getTrisHomogenous(), a virtual function that, when implemented in subclasses, will take an array of surfaces and append to the G3D::CPUVertexArray
	and the Array<Tri> appropriately. [Mike]</li>
	<li> Added G3D::UniversalSurface::getTrisHomogenous(), which is a UniversalSurface-specific implementation of G3D::Surface::getTrisHomogenous() [Mike]</li>
	<li> Added G3D::CPUVertexArray::Vertex::transformBy() that takes  a G3D::CoordinateFrame and transforms its position, tangent, and normals by the CFrame (object to world). [Mike]</li>
	<li> Added  G3D::CPUVertexArray::transformAndAppend() which takes a G3D::CPUVertexArray and a G3D::CoordinateFrame and appends the parameter array, transforming
         tangents, normals and positions from object to world space. [Mike]</li>
	<li> Removed G3D::Tri::getTris(). Use G3D::Surface::getTris() instead. (updated everything internal to G3D to reflect this change) [Mike]</li>
	<li> Renamed G3D::Tri::vertex() to G3D::Tri::position(), and added a new G3D::Tri::vertex() that returns the G3D::CPUVertexArray::Vertex for the specified vertex. [Mike]</li>
	<li> Added G3D::Array::copyPOD() and G3D::Array::appendPOD() for fast array copy and append for "Plain Old Data" [Mike]</li>
	<li> Added G3D::Array::copyFrom() to wrap up the idiom of resize(0) append(*array*) [Mike]</li>
	<li> Disabled operator=() for G3D::CPUVertexArray [Mike]</li>
	<li> Added a copy constructor for G3D::CPUVertexArray, and added G3D::CPUVertexArray::copyFrom() [Mike]</li>
    <li> Added a primitive index variable to intersector, and use it to set G3D::SurfaceElement::SourcePrimitive index [Mike]</li>
	<li> Modified G3D::SurfaceElement to contain a SourcePrimitive struct containing u, v, and, if set explicitly, the primitive's index [Mike]</li>
	<li> G3D::Tri::Intersector::operator() now correctly uses the twoSided boolean. We had to rewrite the code and
		 we took a 3% performance hit for ease of maintenance. [Mike]</li>
    <li> Changed the NO_FFMPEG macro to G3D_NO_FFMPEG and changed it to be defined in platform.h instead of in VideoOutput.h  [Mike]</li>
	<li> G3D::Tri and G3D::Tri::Intersector no longer virtual, this decreases Tri size by 8 bytes in 64-bit builds [Mike]</li>
	<li> Removed n the facenormal from G3D::Tri and replaced with doubleArea (e1.cross(e2).length()) [Mike]</li>
    <li> G3D::RenderDevice::applyRect</li>
	<li> G3D::lazy_ptr</li>
	<li> VertexRange renamed to AttributeArray </li>
    <li> G3D::GuiTextureBox now saves out cubemaps at 4x the width and 2x the height of one of its faces, in the panoramic view [Mike]</li>
	<li> Renamed VertexAndPixelShader to ShaderProgram, matching OpenGL terminology (this was deprecated anyway) </li>
    <li> canBeIndexType renamed to glCanBeIndexType</li>
	<li> glIsNormalizedFixedPoint</li>    <li> G3D::Vector2unorm16 </li>
    <li> Added Show Cube Edges option to G3D::GuiTextureBoxInspector [Mike]</li>
    <li> Reduced RenderDevice::MAX_TRACKED_TEXTURE_IMAGE_UNITS, RenderDevice::MAX_TRACKED_TEXTURE_UNITS, and RenderDevice::MAX_LIGHTS to 2 as we remove fixed-function to speed up programmable shading.</li>
    <li> Added focus controls to G3D::CameraControlWindow </li>
    <li> G3D::ArticulatedModel::CleanGeometrySettings::allowVertexMerging</li>
    <li> G3D::Matrix4::upper2x2</li>
    <li> G3D::Texture::isCubeMap</li>
    <li> G3D::GuiTextureBoxInspector displays the x,y,z vector used to access the texel the mouse hovers over, instead of u,v coordinates.  The texel value display is broken for cubemaps, however. [Mike] </li>
    <li> G3D::GuiTextureBox supports rendering cubemaps as a panoramic texture (of double a single face's width), using u,v coordinates as scaled spherical coordinates. [Mike] </li>
    <li> G3D::Texture now checks for if it is a cubemap on construction and sets visualization.isCubemap appropriately. [Mike]</li>
    <li> G3D::Texture::Visualization: Added isCubemap boolean. Modified the constructors, ==, needsShader() and toAny to reflect this change. [Mike]</li>
    <li> G3D::Rect2D::operator*(const Vector2& s) [Mike] </li>
	<li> G3D::Texture::update(), G3D::Texture::getTexImage(), and G3DTexture::getImage() all have a new parameter that specifies the face of the cubemap to use. [Mike]</li>
    <li> G3D::VideoRecordDialog::setScreenShotFormat</li>
    <li> New "updateShadowMaps" argument to Surface::sortAndRender </li>
    <li> G3D::WeakCache::clear </li>
    <li> G3D::Matrix4float64 </li>
	<li> G3D::unorm16, G3D::snorm8, G3D::snorm16 [Zina] </li>
    <li> Added two more default parameters to G3D::UniversalBSDF::create(), glossy = Color4::zero(), transmissive = Color4::zero() [Mike] </li>
	<li> G3D::UniversalMaterial::createDiffuse(shared_ptr<Texture> texture) [Mike] </li>
    <li> G3D::GBuffer now allows scale and bias on every field (except depth) </li>
     <li> Removed shift + left button = right on OS X (ctrl+left still works) in FirstPersonManipulator </li>
     <li> G3D::FirstPersonManipulator now uses Z and C for vertical up and down translation (configurable)</li>
     <li> GuiContainer is now notified through G3D::GuiContainer::onChildControlEvent() when one of its children fires a GUI event.</li>
     <li> GuiWindow now delivers events up the GUI hierarchy until they are consumed</li>
     <li> G3D::ArticulatedModel::intersect</li>
     <li> G3D::Color3 and G3D::Color4 now initialize to zero</li>
     <li> G3D::Color2uint8</li>
	 <li> G3D::UniversalMaterial defaults to assuming input should be in sRGB space for lambertian, emissive, transmissive, and glossy maps (shininess and bump are assumed linear)</li>
     <li> Added 64-bit targets and patched many warnings and errors for sizeof(size_t) == 64 (however, G3D is not fully 64-bit compatible yet)</li>
     <li> G3D::unorm8</li>
	 <li> Changed default BumpMap::Specification::Settings::iterations to 1 (parallax mapping) from normal mapping</li>
	 <li> G3D::Surface::castsShadows</li>
     <li> G3D::maxNotNPOS</li>
     <li> G3D::Quat::moveTowards </li>
     <li> G3D::Vector3::moveTowards </li>
     <li> G3D::CFrame::moveTowards </li>
	 <li> GuiTheme::NO_BACKGROUND_UNLESS_FOCUSED_TEXT_BOX_STYLE</li>
	 <li> G3D::GuiControl::findControlUnderMouse</li>
     <li> G3D::Array::trimToSize</li>
     <li> G3D::OldShader now assumes GLSL 1.20 for files without a version specification</li>
     <li> G3D::CFrame when passed to GLSL and the built-in G3D uniforms in shaders now use mat4x3 instead of mat4</li>
     <li> G3D::ParseOBJ, ParseMTL, ParsePLY</li>
     <li> G3D::TextInput::readInteger</li>
     <li> G3D::CPUVertexArray; UniversalSurface::CPUGeom now uses CPUVertexArray*</li>
     <li> G3D::TextInput::pushSettings, popSettings</li>
     <li> G3D::Icon, G3D::IconSet can now be used to put arbitrary images on GuiControl%s</li>
     <li> G3D::Array::swap</li>
     <li> G3D::ImageFormat::R16F</li>
     <li> G3D::GApp::setLowerFrameRateInBackground</li>
     <li> Updated to libzip 0.10</li>
     <li> G3D::AttributeArray::operator==</li>
     <li> GApp::m_useFilm may now be changed after construction to disable Film per-frame</li>
     <li> G3D::Matrix3::fromUnitAxisAngle</li>
     <li> G3D::HashTrait<std::type_info* const> specialization</li>
     <li> G3D::categorizeByDerivedType</li>
     <li> G3D::Vector4int16</li>
     <li> Made alpha-testing optional in G3D::TriTree</li>
     <li> Extended G3D::Camera to have lens parameters</li>
     <li> Lighting::Specification::Any toAny()</li>
     <li> G3D::PhysicsFrameSplineEditor</li>
     <li> G3D::Vector2int32</li>
     <li> G3D::Texture::Visualization, G3D::Texture::visualization</li>
     <li> Added ImageFormat::RGBA8I() format</li>
     <li> G3D::RayGridIterator</li>
     <li> Added FXAA post-process antialiasing to G3D::Film</li>
     <li> Array::deleteAll -> Array::invokeDeleteOnAllElements</li>
     <li> Improved error reporting from Any and ParseError</li>
     <li> PhysicsFrame::operator==, Quat::operator==, PhysicsFrameSpline::operator==</li>
     <li> G3D::Entity::toAny, G3D::PhysicsFrameSpline::toAny, G3D::PhysicsFrame::toAny, G3D::Quat::toAny</li>
     <li> Updated G3D::CarbonWindow to follow latest Apple OS X 10.5 OpenGL recommendations; eliminated AGLDrawable</li>
     <li> G3D::Camera::exposureTime</li>
	 <li> G3D::Surface::getBoxBounds and getSphereBounds now ignore infinite child bounding boxes (makes for tighter shadow frustum bounds in scenes with unbounded 3D widgets)</li>
     <li> G3D::ArrowShape</li>
     <li> All-new streamlined interface for G3D::GBuffer, now no longer in "beta"</li>
     <li> G3D::GBuffer now supports face normals</li>
     <li> G3D::Any::operator=(Array<T>)</li>
     <li> G3D::debugDraw now allows specification of the display time</li>
     <li> G3D::GImage::copySubImage &#8594; G3D::GImage::copyRect</li>
     <li> G3D::GImage::pasteSubImage &#8594; G3D::GImage::copyRect (overload)</li>
     <li> G3D::VideoOutput::append(VideoInput)</li>
     <li> G3D::GApp::removeDebugShape, G3D::GApp::removeAllDebugShapes</li>
     <li> G3D::GApp::addWidget now sets the focus on the new widget by default</li>
     <li> G3D::GApp::show</li>
	 <li> Added G3D::ImageFormat::R32F </li>
     <li> G3D::ShadowMap::updateDepth now allows small negative values</li>
     <li> G3D::MD2Model::Specification::negateNormals</li>
     <li> G3D::SurfaceElement</li>
     <li> G3D::Any::serialize, G3D::Any::deserialize</li>
     <li> G3D::GFont::draw2DWordWrap</li>
     <li> G3D::GEventType::KEY_REPEAT</li>
     <li> G3D::RenderDevice::setReadFramebuffer, setDrawFramebuffer</li>
     <li> G3D::PointHashGrid::Iterator::hasMore</li>
     <li> G3D::Light::castsShadows</li>
     <li> G3D::Light::power</li>
     <li> G3D::FileSystem::markFileUsed, G3D::FileSystem::usedFiles</li>
     <li> G3D::Point2 typedef</li>
     <li> G3D::Noise</li>
     <li> G3D::TriTree::intersectRay can now be invoked to early exit on any hit for shadow rays</li>
     <li> Replaced all instances of .hasMore() with .isValid(), deprecated hasMore, and added isValid to all iterators.</li>
     <li> Flipped the Camera::project Y-axis to match RenderDevice's Y-axis</li>
     <li> Extended G3D::UniversalSurface to work with inverted cameras for planar mirror rendering</li>
     <li> BIN8, BIN11, BIN16, BIN32</li>
     <li> GApp will now create a G3D::RenderBuffer if the preferred depth format cannot be satisfied by a texture, e.g., because it contains stencil bits</li>
     <li> G3D::GuiPane::setNewChildSize(), GuiPane::beginRow()...GuiPane::endRow()</li>
     <li> G3D::PointHashGrid::getIntersectingMembers()</li>
     <li> G3D::Surface::sendGeometry</li>
     <li> Substantially sharpened GFont text rendering</li>
     <li> G3D::UniversalMaterial::Specification(Color3)</li>
     <li> G3D::Matrix3::diagonal, G3D::Matrix4::diagonal</li>
     <li> G3D::Vector2::directionOrZero</li>
     <li> G3D::Crypto::md5 is now static</li>
     <li> G3D::Rect2D::serialize and deserialize</li>
     <li> Upgraded to libpng 1.4.4</li>
     <li> Added compatibility profile clipping support to SuperShader [Hai Zhou]</li>
     <li> Made documentation page titles not begin with "G3D..." for ease of use in tabbed browsing</li>
     <li> Tuned Vector4, Vector3, uint64, uint128 hash codes for performance instead of quality</li>
     <li> iCompile can now use ICE_EXTRA_SOURCE environment variable to find G3D sources if you move
          them after compilation</li>
     <li> Build system output directory no longer includes platform name (affects icompile as well)</li>
     <li> Added new icompile working directory ([Global] workdir), defaults to data-files for new projects</li>
     <li> GImage::encodePNG16, GImage::decodePNG16; Image1::load and Image1::save now support PNG16</li>
     <li> Improved OFF file parsing compatibility</li>
     <li> Significantly increased the performance of BinaryOutput::compress</li>
     <li> G3D::GuiWindow subclasses can now initialize without OpenGL, for compute servers</li>
     <li> G3D::Discovery now can operate without a GUI.</li>
     <li> G3D::System::findDataFile now takes an optional caseSensitive argument</li>
     <li> G3D::FileSystem::exists now takes an optional caseSensitive argument</li>
     <li> G3D::GFont::makeFontFile now requires .tga input</li>
     <li> G3D::GImage::RGBAtoBGRA</li>
     <li> G3D::Surface::getObjectSpaceGeometry</li>
     <li> G3D::BinaryOutput::writeString32 no longer writes a NULL.  This behavior is backwards compatible to G3D 8.xx</li>
     <li> Added support for obsolete GL_EXT_framebuffer_object so that Film and ShadowMap will work on MacBooks with Intel GPUs</li>
     <li> Sample programs, viewer, and test now statically link FFMPEG on Win32 to avoid DLL/PATH problems when distributing the binaries.</li>
     <li> In the G3D source tree, renamed doc-files/ to manual/ and doc-files/data-files to doc-files/ to match icompile conventions</li>
     <li> Upgraded to icompile 0.5.16</li>
	 <li> Added TangentSpace Normal to GBuffer. It uses  Encoding(2.0f, -1.0f), like the other normals in GBuffer [Mike]</li>
	 <li> Added Tri::setData() [Mike]</li>
	 <li> Added Tri::getIndex [Mike]</li>
	 <li> Fix: Updated TextInput and TextOutput to C11 standard </li>
     <li> Fix: Updated VC10 project files to support paths with spaces in the names [Edward Powell]</li>
	 <li> Fix: G3D::ImageFormat now correctly prints RGB9E5F as "RGB9E5F", instead of "RGB9E10F". [Mike] <\li>
	 <li> Fix: Removed TriTree::m_size, which wan't storing the right value. [Mike]</li>
	 <li> Fix: RenderDevice::setInverseY now calls RenderDevice::forceSetCullFace after making the changes [Mike]</li>
     <li> Fix: CFrame::toXYZYPRDegreesString and fromXYZYPRDegreesString are now correctly inverses (modulo 360 degrees) and have higher precision than in 8.xx</li>
     <li> Fix: GApp no longer passes consumed events to UserInput unless they are button up or key up</li>
     <li> Fix: BinaryInput and FilePath now convert Windows slashes to Unix ones on Unix</li>
     <li> Fix: GLCaps::glslVersion now returns the correct value</li>
     <li> Fix: G3D::Widget now uses G3D::Surface2D::depth for event delivery as well as rendering</li>
     <li> Fix: G3D::ThirdPersonManipulator renders "in front" of objects by artificially flagging itself as transparent</li>
     <li> Fix: G3D::Table::debugGetLoad now returns the correct load factor</li>
     <li> Fix: G3D::GApp ensures that UserInput always receives events, even if they are consumed by Widgets</li>
     <li> Fix: ShadowMap now enforces minimum bounds for empty scenes and a maximum bound for infinite scenes </li>
     <li> Fix: G3D::CarbonWindow now returns proper mouse click events</li>
     <li> Fix: G3D::UniversalBSDF::evaluate documentation now correctly explains that it does not contain projected area</li>
     <li> Fix: G3D::PointHashGrid no longer requires a HashTrait overload</li>
     <li> Fix: UniversalBSDF::evaluate now computes the same result as SuperShader for glossy terms</li>
     <li> Fix: Diffuse colors for 3DS files loaded by ArticulatedModel</li>
     <li> Fix: Correct loading of texture maps for 3DS files with incorrect case in them on OS X, support for 3DS reflection</li>
     <li> Fix: VideoRecordDialog correctly inverts the Y axis on half-size video recording</li>
     <li> Fix: G3D::Tri::area is now correct (was too large by a factor of 2x before)</li>
     <li> Fix: CarbonWindow icons now load correctly</li>
     <li> Fix: BinaryOutput to memory now never creates a file on disk</li>
     <li> Fix: GuiWindow now consumes mouse motion events while being dragged.</li>
     <li> Fix: G3D::TriTree now finds ray intersections even when the ray lies entirely within a splitting plane</li>
     <li> Fix: G3D::Intersect::rayAABox had some bad logic for a few cases due to falling through a SWITCH-CASE.  These are now fixed.</li>
     <li> Fix: CarbonWindow now returns correct key codes when Ctrl+letter are held down</li>
     <li> Fix: G3D_BEGIN_PACKED_CLASS now uses correct syntax on Unix (the macro is not backwards compatible to 8.xx, however)</li>
     <li> Fix: Color4::fromARGB now works correctly inside Any deserialization</li>
     <li> Fix: increased the precision of Vector3::isZero, Vector2::isZero</li>
     <li> Fix: Windows shares are now properly detected as file system roots</li>
	 <li> Fix: Fixed memory leak in GImage::decodePNG when a PNG was loaded over an existing GImage</li>
	 <li> Fix: Texture min now computed correctly (was always NaN for RGB8 and multiplied by 255 for RGBA8 before)</li>
     <li> Fix: Win32Window now distinguishes KEY_DOWN and KEY_REPEAT events</li>
	 <li> Fix: GEventType::MOUSE_MOTION events are now only delivered once to each GuiControl, and are in the correct coordinate system</li>
	 <li> Fix: FileSystem::exists now is insensitive to the direction of slashes inside zipfiles</li>
	 <li> Fix: FileSystem::_drives() now accurately gets the string representation of present drives. </li>
	 <li> Fix: Depth write state now works correctly in push2D mode</li>
     <li> Fix: BinaryOutput::writeString(str, len) for the truncating case </li>
     <li> Fix: TextOutput::writeString will now never word-wrap inside the string </li>
     <li> Fix: On Windows, GThread now sets the thread name so that it is visible in the debugger </li>
    </ul>

     <b>Backwards Incompatible Changes</b>:
     <ul>
	 <li> Removed GImage and replaced with Image and PixelTransferBuffer classes </li>
	 <li> Moved clipboard functions to OSWindow </li>
     <li> GEntity was renamed to Entity </li>
     <li> Completely reworked Camera and Light</li>
     <li> Renamed data/SuperShader to data/shader </li>
     <li> Removed zipRead and zipClose (use G3D::readWholeFile or G3D::BinaryInput) </li>
     <li> All-new interface for ArticulatedModel and completely rewritten interface for performance and convenience </li>
     <li> All-new streamlined interface for G3D::Surface
     <li> G3D::Ray::bump -> G3D::Ray::bumpedRay
     <li> G3D::GApp subclasses must now invoke the super version of any method that they override to ensure that Widgets work correctly.
     <li> Removed beginMarkShadows, endMarkShadows, markShadows, drawFeatureEdges
     <li> Removed Surface::edges, Surface::faces, Surface::numBoundaryEdges, Surface::numWeldedBoundaryEdges, Surface::weldedEdges, Surface::weldedFaces, Surface::weldedVertices, Surface::getObjectSpaceFaceNormals, Surface::getWorldSpaceFaceNormals, Surface::getWorldSpaceGeometry, Surface::hasTexCoords, Surface::objectSpaceFaceNormals, Surface::objectSpaceGeometry, Surface::objectSpacePackedTangents
     <li> G3D::AABox default constructor returns the empty box, which is now distinct from the box at the origin
     <li> Removed G3D::SkyParameters and G3D::Sky </li>
     <li> Removed G3D::AnyVal (use G3D::Any now)
     <li> G3D::SurfaceElement::Impulse::coefficient &#8594; G3D::SurfaceElement::Impulse::magnitude
     <li> Removed AUX RenderDevice::ReadBuffer options (deprecated from OpenGL)
     <li> G3D::GuiTextureBox::Settings &#8594; G3D::Texture::Visualization
     <li> Removed incident power arguments from UniversalBSDF::evaluate
     <li> G3D::Film::exposure &#8594; G3D::Film::sensitivity
     <li> Light::attenuation now defaults to (0.0001,0,1); SuperShader ignores attenuation on directional lights
     <li> SuperShader scales the quadratic attenuation term by 4pi to produce a physically-meaningful radiance value for point lights
     <li> G3D::Draw::skyBox now uses programmable pipeline and requires a cube map
     <li> Replaced Lighting::ambientTop and ambientBottom and SuperShader pixel shader with pure environment map-based ambient.
     <li> G3D::ArticulatedModel::createHeightfield arguments now more closely follow MeshAlg::generateGrid
     <li> Changed G3D::ArticulatedModel::Preprocess::materialOverride to a UniversalMaterial::Specification; likewise for the materialSubstitution table.
     <li> Removed OFF file loading from G3D::IFSModel
	 <li> G3D::UniversalMaterial::Settings &#8594; G3D::UniversalMaterial::Specification
     <li> Separated G3D::GuiControl::captionWidth and G3D::GuiControl::captionHeight from G3D::GuiControl::captionSize
     <li> Replaced G3D::Light::spotCutoff (in degrees) with G3D::Light::spotHalfAngle (radians)
     <li> Removed G3D::Light::specular and diffuse; changed point light attenuation to default to quadratic
     <li> Removed Camera::imagePlaneDepth (use Camera::nearPlaneZ)
	 <li> Removed G3D::BackgroundWidget
     <li> Removed ToneMap (use Film)
	 <li> G3D::Camera::viewportWidth &#8594; G3D::Camera::nearPlaneViewportWidth
	 <li> G3D::Camera::viewportHeight &#8594; G3D::Camera::nearPlaneViewportHeight
     <li> Removed G3D::Vector2::unitize, G3D::Vector2::unitize and G3D::Vector3::generateOrthonormalBasis
   </ul>

   Changes in 8.01:
   <ul>
     <li> G3D::Camera::imagePlanePixelsPerMeter
     <li> G3D::GApp::Settings::argArray
     <li> G3D::Surface::renderDepthOnly (i.e., for shadow maps) is now 3x faster than 8.00
     <li> G3D::PointHashGrid::Iterator::hasMore
     <li> G3D::GBuffer::specification(), G3D::GBuffer::setCamera()
     <li> Fix: G3D::Random is no longer ambiguous on OS X; used macros to hide Carbon's Random() function
     <li> Fix: G3D::PointHashGrid::Iterator on an empty grid is correctly initialized to empty.
     <li> Fix: G3D::Profiler checks for the presence of the timer query extension before using it
     <li> Fix: G3D::Profiler disables profiling if glGetQueryObjectiv takes too long to return
     <li> Fix: Perfectly black G3D::SuperSurfaces now render black rather than picking up the previous material
     <li> Fix: TextInput::readUntilNewlineAsString now does not skip lines if invoked at the end of a line
     <li> Fix: Default bounds for GuiNumberBox<int> are now correct [Matthaeus Chajdas]
     <li> Fix: Corrected shutdown memory leak in G3D::System::flushPool [Eric Cassel]
     <li> Fix: GuiTextureBox now correctly displays colors when some channels are negative.
 </ul>

   <p>
   <hr>
   <b>8.00</b>

   <br>Primary development team: Morgan McGuire, Corey Taylor, Shawn Yarbrough, Trevor O'Brien

   Changes in 8.00:
   <ul>
     <li> Various performance fixes, especially for GPU-bound apps and multi-GPU systems.
          Most rendering is now 1.2x to 2.0x faster on high-end GPUs than it was in 7.01
     <li> G3D::Tri, G3D::TriTree for ray tracing (12x faster than KDTree + Triangle)
     <li> G3D::FileSystem
     <li> Added OBJ support to ArticulatedModel
     <li> G3D::Any replaces G3D::AnyVal
     <li> System::findDataFile no longer scans all disk drives; instead it checks the G3D9DATA environment variable
     <li> G3D::Texture::createColor
     <li> G3D::AttributeArray::createInterleaved can now take up to 5 vertex arrays
     <li> G3D::ArticulatedModel::PoseSpline
     <li> G3D::ArticulatedModel can now load Quake3 BSP maps.  This is less efficient than G3D::BSPMap but more convenient for some algorithms.
     <li> G3D::UniversalMaterial::customShaderPrefix
     <li> G3D::TextInput::parseNumber
     <li> G3D::GuiTabPane, GuiPane::addTabPane
     <li> G3D::GFont::nativeSize
     <li> G3D::FilePath
     <li> G3D::Token now includes byte offset from the start of the file
     <li> Updated documentation style sheets to be more friendly to mobile devices
     <li> Added support for run-length encoded truecolor TGA files
     <li> G3D::OSWindow::primaryDisplaySize, G3D::OSWindow::virtualDisplaySize, G3D::OSWindow::primaryDisplayWindowSize, G3D::OSWindow::numDisplays
     <li> G3D::RenderDevice::shader
     <li> G3D::GApp::drawMessage
     <li> Changed G3D::Vector3 and G3D::Vector4::hashCode to use the FNV 128-bit hash, which reduces collisions for common scenes
     <li> G3D::Matrix4::operator+(const Matrix4&)
     <li> Upgraded to libpng 1.4.1
     <li> Upgraded to glew 1.5.3
     <li> G3D::PhysicsFrameSpline
     <li> Renamed "demos" directory to "samples"
     <li> G3D::BinaryInput::readStringNewline
     <li> G3D::fileExists now caches results by default; see new optional argument and G3D::clearFileSystemCache
     <li> G3D::Surface::AlphaMode
     <li> G3D::XML
     <li> Added civetweb server library to the distribution
     <li> G3D::OldShader now appends the shader source to the error message
     <li> G3D::fileExists now allows wildcards
     <li> Tuned bloom appearance under G3D::Film
     <li> G3D::SuperShader::configureSingleLightShaderArgs
     <li> G3D::VideoRecordDialog now exposes quality setting in both GUI and code
     <li> G3D::Texture enums now have to/from string methods for parsing
     <li> G3D::ArticulatedModel::createHeightfield
     <li> G3D::GuiWindow with NO_WINDOW_STYLE now stays in the background when focused.
     <li> Added sample code overview to documentation
     <li> Initialized Win32Window using the OpenGL compatibility profile
     <li> Added ImageFormat::RGB9E10F() and ImageFormat::R11G11B10F() formats
     <li> G3D::GImage::LtoRGB, G3D::GImage::LtoRGBA
     <li> G3D::Icon, G3D::IconSet -- GuiText can now be created from an icon
     <li> G3D::glClipToBox, glDisableAllClipping
     <li> G3D::Profiler
     <li> G3D::OldShader now supports triangle geometry shaders
     <li> G3D::Texture::resize
     <li> G3D::TextInput::Settings::singleQuoteCharacter
     <li> G3D::ParseError
     <li> Tweaked FirstPersonManipulator rotation to avoid over-clamping on diagonals
     <li> G3D::parseCommaSeparated
     <li> G3D::shared_ptr can now be instantiated for a forward-declared type
     <li> samples/starter app uses Film
     <li> G3D::ParseError
     <li> G3D::Array provides constructors that accept up to 6 initial elements
     <li> G3D::Texture::readTexel
     <li> G3D::Texture::clear
     <li> G3D::Matrix2::identity
     <li> G3D::Camera default field of view is now 90-degrees horizontal (to match CounterStrike:Source)
     <li> Added 1024^2 default skybox sky/noonclouds/noonclouds_*.jpg
     <li> G3D::GLCaps::firstSupportedTexture
     <li> G3D::GFont::draw3DBillboard
     <li> Camera::getProjectPixelMatrix
     <li> G3D::ShadowMap now supports NPOT textures
     <li> G3D::ShadowMap now supports separate front- and back-face polygon offsets
     <li> Added G3D_64BIT and G3D_32BIT macros
     <li> G3D::Ray::invDirection
     <li> G3D::CameraControlWindow can now copy camera position to clipboard in CFrame constructor format
     <li> G3D::VideoRecordDialog now puts date before program name
     <li> G3D::Matrix4::getPerspectiveProjectionParameters
     <li> G3D::Surface::renderTransmissives; G3D::Surface::sortAndRender now performs refraction
     <li> G3D::RefractionQuality, G3D::MirrorQuality, G3D::PrimitiveType
     <li> G3D::ThirdPersonManipulator now draws hidden lines
     <li> G3D::GBuffer
     <li> G3D::Framebuffer::set now allows specification of the target MIP-map level
     <li> G3D::RenderDevice::setMinLineWidth
     <li> G3D::Draw::skyBox
     <li> G3D::SmallArray
     <li> G3D::Texture::whiteIfNull
     <li> G3D::Color3::isFinite
     <li> Added 10 new high resolution environment maps to the data repository
     <li> Fixed all level-4 warnings in headers --- developer code can now compile with the highest warning level
     <li> G3D::Table::getCreate, getCreateEntry
     <li> G3D::MemoryManager, G3D::CRTMemoryManager
     <li> G3D::Texture::min, mean, max
     <li> G3D::ThirdPersonManipulator now uses G3D::GEvents instead of onUserInput, so that it can consume clicks.
     <li> G3D::Win32Window now explicitly requests 0 OpenGL aux buffers for the main window, although some drivers will allocate them anyway
     <li> Removed all glGet* calls from the release build as these can stall GPUs
     <li> Added GLEW 1.5.1 library for loading OpenGL extensions (replaces previous custom G3D code)
     <li> G3D::Surface::renderDepthOnly for early-Z and shadow mapping
     <li> G3D::PrecomputedRandom
     <li> Increased GLCaps::G3D_MAX_TEXTURE_UNITS to 16
     <li> UniversalSurface now depth sorts and culls models for shadow map rendering
     <li> G3D::ShadowMap::computeMatrices
     <li> ShadowMap now renders from backfaces, reducing the need for a polygon offset.
     <li> G3D::Light now supports additional parameters to control how it interacts with G3D::ShadowMap
     <li> G3D::Texture::Settings::shadowMap now sets areas outside the shadow map to 0 (shadowed), which is ideal behavior for spotlights.
     <li> G3D::DirectionHistogram
     <li> G3D::Texture::Settings can now serialize/deserialize to AnyVal
     <li> G3D::Vector3::reflectAbout
     <li> G3D::Spinlock; faster than GMutex for one thread-per-processor
     <li> G3D::Vector random methods now use G3D::Random
     <li> G3D::Color?::one() and Color?::zero() for all-one or all-zero constants
     <li> G3D::GuiLabel now autosizes around its contents
     <li> G3D::OldShader preprocessor now supports \#include
     <li> G3D::RenderDevice::BLEND_ONE_MINUS_DST_COLOR
     <li> G3D::OldShader now supports G3D::Matrix2
     <li> G3D::OldShader now strips "ERROR:" from shader error messages for compactness
     <li> G3D::GuiDropDownList::stringValue, G3D::GuiDropDownList::captionValue
     <li> G3D::UniversalMaterial and G3D::SuperShader now only allow alpha mask on the diffuse (Lambertian) component
     <li> G3D::GImage::computeNormalMap now allows the white height to be a constant multiple of the larger dimension
     <li> G3D::Welder
     <li> G3D::Rect2D::inf
     <li> G3D::TextInput now generates tokens for newlines (\\r, \\n, or \\r\\n) when enabled
     <li> Documented platform-abstraction macros
     <li> PRAGMA()
     <li> G3D_BEGIN_PACKED_CLASS(), G3D_END_PACKED_CLASS()
     <li> G3D::Win32Window now generates G3D::GEventType::MOUSE_BUTTON_CLICK events
     <li> G3D::CoherentAllocator
     <li> G3D::Sphere::merge
     <li> G3D::GuiTextureBox
     <li> G3D::TextInput::Settings::simpleFloatSpecialst
     <li> G3D::RenderDevice::project() no longer calls glToScreen; necessary for multi-GPU AFR
     <li> G3D::GuiControl::fromOSWindowCoords
     <li> G3D::GuiControl::increaseBounds
     <li> G3D::GuiControl::toGWindowCoords -> G3D::GuiControl::toOSWindowCoords
     <li> Removed most static global variables to control order of intialization
     <li> Made empty G3D::Table default to zero allocation
     <li> Multithreaded G3D::ArticulatedModel loading
     <li> G3D::System::numCores
     <li> glMakeCurrent
     <li> Added buffering (with appropriate flushes) to G3D::logPrintf decrease the startup cost of writing the log
     <li> G3D::System::findDataFile now caches the locations of found files
     <li> G3D::Widget now inherits from G3D::Surface2D
     <li> GApp::m_renderPeriod
     <li> G3D::Random - controllable, threadsafe, and better distribution than rand()
     <li> Added function key guide on the top of render stats for G3D::GApp
     <li> G3D::CollisionDetection::fixedSolidBoxIntersectsFixedTriangle
     <li> G3D::Set::getRemove, G3D::Table::getRemove
     <li> G3D::Set now allows HashFunc and EqualsFunc to be specified
     <li> G3D::Box2D
     <li> G3D::Texture::getCubeMapInfo
     <li> G3D::CollisionDetection::collisionTimeForMovingSphereFixedSphere now handles the case where the spheres initially interpenetrate
     <li> Changed G3D::ArticulatedModel to use a VAR index array (up to 80% reduction in GPU load for large models)
     <li> Changed G3D::ArticulatedModel to use interleaved VAR (up to 4x fps speedup for vertex-bound models)
     <li> Interleaved arrays in G3D::VAR
     <li> Extended G3D::VARArea to support index arrays
     <li> Tweaked G3D::StopWatch smoothing constants to reduce number flickering
     <li> isIntFormat() macro
     <li> TextInput::readSignificant
     <li> G3D::Matrix3::squaredFrobeniusNorm, G3D::Matrix3::frobeniusNorm, G3D::Matrix3::l1Norm, G3D::Matrix3::lInfNorm, G3D::Matrix3::diffOneNorm
     <li> G3D::Matrix3::polarDecomposition
     <li> Removed g3d_NumLights, g3d_NumTextures, g3d_ObjectLight0, g3d_WorldLight0 from G3D::OldShader preprocessor
     <li> Switched .tga textures to .png in the data/image directory
     <li> Fix: GKey::toString for F10-F15 [Shawn]
     <li> Fix: Matrix2::inverse() [Dan Lipsa]
     <li> Fix: Vector3int16::operator+= [Dan Lipsa]
     <li> Fix: ImageFormat::RGBA16F now uses the correct "code" (it was RGB16F in previous builds)
     <li> Fix: collisionTimeForMovingPointFixedTriangle normals were negated
     <li> Fix: G3D::System::cpuid() now correct on all gcc systems.  Previously the vendor string (e.g., GenuineIntel, AuthenticAMD) was sometimes corrupt. [Shawn]
     <li> Fix: RenderDevice now allows depth write without depth test
     <li> Fix: workaround for OpenGL shadow rendering crash from NULL buffer for some cards
     <li> Fix: UniversalMaterial::configure only sets bumpMapBias and scale when PARALLAXSTEPS > 0
     <li> Fix: Matrix2::inverse [Dan Lispa]
     <li> Fix: G3D::iswspace now considers '\\r' as whitespace
     <li> Fix: G3D::System::appName now removes the 'd' that icompile appends
     <li> Fix: G3D::System::getCurrentProgramFilename now works on OS X
     <li> Fix: G3D::UserInput no longer crashes on MacBook "FN" key press
     <li> Fix: Made G3D::MeshAlg::computeAdjacency threadsafe
     <li> Fix (2570367): buildg3d detects the buggy OS X 10.4 make 3.80 and refuses to run on that machine without gmake installed
     <li> Fix: Grayscale PNG with odd heights now load correctly
     <li> Fix: G3D::GImage::computeNormalMap whiteHeightInPixels now scales correctly (was inverted before)
     <li> Fix: G3D::Camera::frustum far plane now positioned correctly
     <li> Fix: G3D::UniversalMaterial now properly alpha-masks non-diffuse channels
     <li> Fix: G3D::Image4 was ignoring the wrapmode specified at the constructor
     <li> Fix: improper use of 'static' in G3D::Map2D made it not threadsafe
     <li> Fix: G3D::Lighting did not initialize the ambient fields
     <li> Fix: G3D::RenderDevice::setTexCoordArray now accepts an uninitialized G3D::AttributeArray as an argument to disable the texcoord array.
     <li> Fix: G3D::RenderDevice now determines number of texture coords/units correctly on all platforms
     <li> Fix: G3D::RenderDevice::setTexture now correctly sets the texture matrix for all texture units.
     <li> Fix: G3D::UniversalSurface now obeys incoming depth write
     <li> Fix: G3D::ShadowMap bias was being stored statically in updateDepth, causing later calls to ignore that argument
     <li> Fix: G3D::Camera::frustum clipping planes were off for the top and bottom planes.
     <li> Fix: G3D::fileExists("") now returns false
     <li> Fix: G3D::ArticulatedModel, G3D::Surface, and G3D::SuperShader now support both left- and right-handed tangent spaces
     <li> Fix: GImage now saves 1-channel TGA files as RGB (used to crash)
     <li> Fix: Custom Gui controls can now be GuiContainers as well
     <li> Fix: If it is not consumed by the control with the key focus, the control under the mouse receives MOUSE_MOTION events
     <li> Fix: log2 was computing the log in the wrong base
     <li> Fix: G3D::VideoRecordDialog now correctly captures the GUI (when specified) on OS X
     <li> Fix: G3D::CarbonWindow drop events are now relative to the window corner
     <li> Fix: OS X G3D::AtomicInt32::compareAndSet was not obtaining the old value in an atomic fashion in 7.01, leading to occasional livelock on SpinLock.
     <li> Fix: Changed order of event delivery for GuiWindow to match rendering order
     <li> Fix: G3D::ArticulatedModel 3DS loader can now load models with more than 2^15 faces (int16-&#8594;uint16)
     <li> Fix: PGM and PBM files are now properly recognized by G3D::GImage
     <li> Fix: G3D::System::sleep now is more conservative about the system's timeslice and busy waits under 1 ms.
     <li> Fix: G3D::GApp now learns how much G3D::GApp::onWait overcompensates for and takes that into timing consideration
     <li> Fix: G3D::SDLWindow::setDimensions and frame resizing update the window correctly
     <li> Fix: G3D::TextInput now allows trailing 'f' on floating-point numbers
     <li> Fix: Cube map faces that are too large for the GPU are automatically rescaled on load by Texture
     <li> Fix: G3D::Draw::lighting now renders shadow casting lights as well
     <li> Fix: G3D::RenderDevice now handles textures up to 16 correctly while leaving texture units, coords and matrics at 8
     <li> Fix: Alpha cutout for transmissive surfaces
     <li> Fix: Color3uint8::operator!=
     <li> Fix: Texture::Preprocess::modulate now affects alpha channel
     <li> Fix: debugAssertGLOk and GLCapps::supports now call glGetError until the entire error stack is cleared
     <li> Fix: Switched OldShader to read uniforms missed by OpenGL from the output of the preprocessor in case uniforms were introduced by \#include.
     <li> Fix: CarbonWindow (OS X) now obeys the OSWindow::Settings::resizable and visible flags
   </ul>

   <i>8.00 changes incompatible with G3D 7.xx and earlier:</i>

   <ul>
     <li> Linux/FreeBSD build now depends on libzip and is not built internally.
          OSX/Windows version of zip.lib was replaced with libzip.
          The original implementation was based on minizip.
     <li> G3D::GuiTheme changed to use .gtm theme files.  Specification updated to version 1.0
     <li> G3D::OSWindow::Settings::fsaaSamples -> G3D::OSWindow::Settings::msaaSamples
     <li> G3D::Texture::Preprocess::brighten -> G3D::Texture::Preprocess::modulate
     <li> Surface::renderTransmissives -> G3D::Surface::renderTransmissives
     <li> G3D::UserInput has joysticks disabled internally to avoid confusion for new users
     <li> Surface::hasTransparency -> Surface::hasTransmission + Surface::hasPartialCoverage, to support varying partial coverage modes
     <li> UniversalBSDF::packSpecularExponent now uses a nonlinear scale between 0 and 1025
     <li> G3D::MD2Model::create scale is now 1/2 the quake scale, so that a typical character is 2 meters tall
     <li> Removed G3D::Texture::invertY (See G3D::RenderDevice::invertY)
     <li> G3D::Matrix4::perspectiveProjection flips the y-axis by default (see upDirection argument to get the old behavior)
     <li> Removed G3D::ToneMap (use G3D::Film instead)
     <li> G3D::Vector3, G3D::Vector3 and G3D::Vector4 operator float* are gone
     <li> G3D::Array(int size) constructor is gone
     <li> Redesigned G3D::MD2Model API to match MD3Model API
     <li> G3D::Surface::objectSpaceTangents -> G3D::Surface::objectSpacePackedTangents
     <li> G3D::Ray::origin and G3D::Ray::direction are now methods instead of members
     <li> G3D::VARArea -> G3D::VertexBuffer, G3D::VAR -> G3D::AttributeArray
     <li> G3D::Texture::getCameraRotation -> G3D::Texture::getCubeMapRotation
     <li> G3D::PosedModel -> G3D::Surface, G3D::PosedModel2D -> G3D::Surface2D
     <li> G3D::RenderDevice::Primitive -> G3D::PrimitiveType (e.g., RenderDevice::TRIANLGES -> PrimitiveType::TRIANGLES)
     <li> G3D::AssertionHook no longer accepts the ignoreAlways parameter
     <li> G3D::GImage::width, height, channels are now accessor methods instead of public fields
     <li> RenderDevice::Buffer -> RenderDevice::DrawBuffer
     <li> RenderDevice::screenShotPic and Texture::copyFromScreen now always read from the current RenderDevice::readBuffer
     <li> OSWindow::Settings::sharedContext must now be set to true in order to support sharing of data between multiple OpenGL contexts.  Since sharing can
          seriously degrade performance on multi-GPU machines and few developers need this feature, it defaults to false.
     <li> Complete rewrite of SuperShader, ArticulatedModel, and UniversalMaterial. New G3D::UniversalBSDF uses Fresnel term, more efficient memory layout, Blinn half-vector,
         is energy conserving, and supports GPU rasterization, ray tracing, photon mapping
     <li> Removed ShadowMap::updateDepth that takes directional light projection matrix parameters; use new ShadowMap::computeMatrices to apply those values now.
     <li> G3D::GuiPane::addDropDownList now takes the list and index arguments in reverse order and they are optional
     <li> G3D::OSWindow::notifyResize() and G3D::RenderDevice::notifyResize() removed in favor of OS-specific implementation handling size events directly.
     <li> Changed G3D::RenderDevice::enableClip2D to G3D::RenderDevice::setClip2D.  Use G3D::RenderDevice::setClip2D with G3D::Rect2D::inf to disable.
     <li> G3D::TextInput now treats \\r, \\n and \\r\\n as newlines with or without newline tokens.  Each increment line number once and reset character number
     <li> G3D::TextInput now generates tokens for both line and block comments when enabled. This changes the G3D::TextInput::Settings flags.
     <li> Changed G3D::OSWindow::pollOSEvent to G3D::OSWindow::getOSEvents allowing G3D::OSWindow implementations to return multiple events
     <li> G3D::RenderDevice::getObjectToWorldMatrix -> G3D::RenderDevice::objectToWorldMatrix
     <li> G3D::RenderDevice::getCameraToWorldMatrix -> G3D::RenderDevice::cameraToWorldMatrix
     <li> Removed 6.xx Discovery API, replaced with 7.01 Discovery API
     <li> G3D::GApp::onLogic -> G3D::GApp::onAI, G3D::Widget::onLogic -> G3D::Widget::onAI
     <li> Removed unused G3D::BSPMap::getTriangles texCoordIndex argument
     <li> G3D::GThread::threadMain is now protected; see the new argument to G3D::GThread::start()
     <li> G3D::ArticulatedModel::Part::TriList::material is now a pointer
     <li> G3D::Surface bounding boxes are now G3D::AABox instead of G3D::Box
     <li> Moved G3D::ArticulatedModel::setProfile to G3D::UniversalSurface::setProfile
     <li> G3D::ArticulatedModel::Part::TriList is now a reference counted object; Part::triListArray -> Part::triList
     <li> G3D::MeshAlg::computeBounds now takes an AABox instead of a Box
     <li> G3D::GuiDropDownList now stores its list internally, rather than taking a pointer to a list
     <li> The applyInvertY argument on G3D::Texture::toImageX now defaults to true because this is less confusing
     <li> G3D::GApp::onWait only takes one argument now
     <li> Removed G3D::VertexProgram and G3D::PixelProgram (use G3D::OldShader instead)
   </ul>

<hr>

   <P>
   Changes in 7.01:
   <ul>
     <li> Video file reading and writing via FFmpeg added
     <li> Added computeBounds method to ArticulatedModel::Part that calls computeBounds on each TriList. Changed updateAll to automatically call computeBounds [Kyle]
     <li> Added constructor to Matrix4 to construct a matrix from an upper-left 3x3 submatrix and an upper-right 3x1 submatrix [Kyle]
     <li> <b>Incompatible change</b>: RegistryUtil functions now require an explicit value parameter instead of extracting the value from the key string.
     <li> <b>Incompatible change</b>:GApp now calls the onLogic handler before the simulation handlers but after the user input and network handlers
     <li> <b>Incompatible change</b>: Changed GHashCode and other functors to traits.  See \link guidenewuser \endlink.  Added typedefs and adapters to make this mostly backwards compatible.
     <li> Added parallax occlusion mapping to G3D::SuperShader (specify UniversalMaterial::parallaxSteps > 1)
     <li> Added normal mapping to G3D::SuperShader (specify UniversalMaterial::parallaxSteps == 0)
     <li> G3D::Texture resizes textures that exceed the device maximum size
     <li> G3D::Array now allows control over MIN_ELEMENTS and MIN_BYTES using template parameters
     <li> Clarified G3D::Any file format in documentation
     <li> G3D::Texture::Preprocess::gammaAdjust
     <li> G3D::ShadowMap::lightProjection(), G3D::ShadowMap::lightFrame()
     <li> Added Barycentric coordinates to CollisionDetection::isPointInTriangle
     <li> G3D::RenderDevice::beginOpenGL, G3D::RenderDevice::endOpenGL
     <li> PointAABSPTree::clearData
     <li> AABSPTree -> KDTree
     <li> GApp now allows the MidgetManager to process events in onEvent before the GApp::onEvent executes
     <li> Added spotlight support to SuperShader
     <li> Switched SuperShader to use ph
     <li> Adjusted standard deviation used in G3D::GaussianBlur to provide smoother filtering
     <li> Put HashTrait and EqualsTrait in their own headers separate from Table.h
     <li> ArticulatedModel::facet
     <li> Renamed GWindow to G3D::OSWindow
     <li> shared_ptr now asserts that the pointer is not NULL on method invocation
     <li> G3D::ShadowMap now computes appropriate matrices for spot lights
     <li> Added ImageFormat::convert [Danny and Kyle]
     <li> 3- and 4- argument min and max
     <li> G3D::GaussianBlur now correctly sets the output viewport
     <li> G3D::Framebuffer::clear
     <li> IFSModel and ArticulatedModel now load Princeton Shape Benchmark OFF files.
     <li> G3D::Any CoordinateFrame now serialized using angles
     <li> CameraControlWindow now prints angles in degrees
     <li> ImageXXX classes now have a format() method
     <li> OSWindow::create
     <li> MeshAlg::toIndexedTriList now supports TRIANGLE_FAN input.
     <li> Tuned Table and hash functions for performance [Kyle & Morgan]
     <li> GEvent::toString
     <li> G3D::TextInput now treats characters with ASCII code greater than 127 as symbols
     <li> G3D::ThreadSet
     <li> G3D::Texture::white
     <li> G3D::Matrix4::upper3x3
     <li> G3D::Matrix4::homoMul
     <li> ArticulateModel::fromFile now takes a Matrix4 instead of a CoordinateFrame to allow arbitrary linear transformations.
     <li> ArticulatedModel::createCornellBox
     <li> UniversalMaterial::createDiffuse
     <li> ImageFormat::convert
     <li> G3D::filenameBase
     <li> Removed SDL_SysWMEvent, which was never supported by GEvent anyway
     <li> Removed TextureFormat::SAME_AS_SCREEN to break dependence on OpenGL
     <li> TextureFormat has been renamed to G3D::ImageFormat and moved into G3D.lib
     <li> Added variable time control points to G3D::Spline
     <li> Gui controls now have configureable GuiControl::setCaptionSize
     <li> Gui controls now default to no indent if the caption is "" (use " " for indent with no caption)
     <li> G3D::GuiContainer
     <li> G3D::GThread::started
     <li> buildg3d installation arguments changed--see
     <li> G3D::Vector3int32
     <li> GuiButton now accepts an optional callback function/method
     <li> FileDialog now accepts an extra "note" argument
     <li> FileDialog::getFilename non-static to support subclassing
     <li> System::currentDateString
     <li> Expanded G3D::ArticulatedModel documentation
     <li> Build system now executes on multiple processors (about 1.8x speedup for dual-core)
     <li> Build system now caches dependencies (about 5x speedup for small incremental builds)
     <li> Patched LOAD_EXTENSION to work around gcc pointer-to-function cast issues
     <li> Tool buttons added to a G3D::GuiPane automatically align to the previous one.
     <li> Added invisible GuiPane style
     <li> G3D::uint128 [Kyle]
     <li> Increased BSPMap rendering by 10% by reducing state changes
     <li> Added prompt argument to FileDialog::getFilename
     <li> G3D::Surface::getBoxBounds on an array
     <li> G3D::Surface::getSphereBounds on an array
     <li> Changed RenderDevice::screenshot to save .png instead of .jpg files
     <li> G3D::SuperShader now supports a customMap and customConstant for experimenting with shaders.
     <li> G3D::SuperShader now does not ever light the "back" of a bump-mapped poly, even if the bumps should create a light-facing surface
     <li> G3D::UniversalMaterial promoted to its own class (was G3D::SuperShader::UniversalMaterial)
     <li> G3D::Matrix2
     <li> G3D::ShaderObject::ArgList::size
     <li> G3D::pathConcat
     <li> G3D::WidgetManager::moveWidgetToBack
     <li> SuperShader / NonShadowed.pix now uses arrays of lights instead of separate variables
     <li> Reduced cost of release-mode OldShader argument validation
     <li> G3D::Surface::sortAndRender now performs view-frustum culling of objects
     <li> G3D::Draw::lighting for visualizing light sources
     <li> G3D::SuperShader::Pass::purgeCache
     <li> G3D::GuiSlider::setRange
     <li> G3D::GuiPane::addPane no longer takes a
     <li> G3D::ShaderObject::ArgList::remove
     <li> Optimized G3D::Matrix::pseudoInverse; now about 2x faster
     <li> G3D::Light::effectSphere
     <li> G3D::GuiWindow::moveTo
     <li> G3D::GuiWindow::setEnabled, enabled
     <li> G3D::GuiButton now sizes to its caption
     <li> G3D::GuiSlider now fires events on change and drag
     <li> G3D::OldShader arguments (in G3D::ShaderObject::ArgList) may now be "optional"
     <li> G3D::Light::point now has quadratic attenuation by default.
     <li> G3D::ImageFormat::name
     <li> g3dmath.h now includes inttypes.h on gcc and simulates it on visual studio
     <li> G3D::RenderDevice::cullFace
     <li> G3D::LineSegment2D::intersection
     <li> G3D::BinaryInput::setEndian
     <li> G3D::GEvent::MOUSE_BUTTON_CLICK
     <li> Generalized ShadowMap to work with spotlights as well as directional lights
     <li> G3D::GLCaps::supportsTexture, G3D::GLCaps::supportsRenderBuffer
     <li> Opaque G3D::ArticulatedModels now support more than 2 non-shadow casting light sources
     <li> Added proof symbol parsing to TextInput [Corey Taylor]
     <li> Added G3D::AABox::corner() to match G3D::Box::corner() [Corey Taylor]
     <li> OS X: G3D::CarbonWindow [Casey]
     <li> OS X: iCompile now generates OS X application bundles and dmg files
     <li> OS X build no longer depends on X11
     <li> G3D::FileDialog
     <li> G3D::Table now allows overriding the default equality operator for keys
     <li> <b>Incompatible change</b>: GApp::onBeforeSimulation now allows mutation of the timesteps
     <li> <b>Incompatible change</b>: Merged GApp::simTime and idealSimTime (the sim time is now idealized)
     <li> cmake now generates project files for Xcode, MinGW, and all Visual Studio versions [Corey Taylor]
     <li> OS X: icompile and buildg3d now generate universal binaries on Intel machines
     <li> G3D::Surface::objectSpacePackedTangents
     <li> G3D::IFSModel::fromData
     <li> G3D::MeshAlg::generateGrid
     <li> G3D::BinaryOutput::ok()
     <li> G3D::generateFilenameBase
     <li> G3D::IFSModel::fromFile now defaults to not welding for improved performance
     <li> G3D::IFSModel members are now protected to allow subclassing
     <li> Removed G3D::uint in favor of G3D::uint32 [Corey Taylor]
     <li> Added G3D::GMaterial(shared_ptr<Texture>) constructor
     <li> Made G3D::GMaterial fields floats
     <li> G3D::GuiControl::setCaption, G3D::GuiWindow::setCaption
     <li> G3D::GuiControl can now be subclassed for custom user-defined controls
     <li> G3D::GuiTheme::renderCanvas
     <li> G3D::GuiTheme::pauseRendering, G3D::GuiTheme::resumeRendering
     <li> G3D::Surface::sortAndRender
     <li> G3D::Framebuffer can now attach cube map faces
     <li> System::describeSystem now prints current working directory and application name
     <li> Added /usr/local/-G3D dir- to system data file path [Kai Schroeder]
     <li> Various patches for detecting new CPUs in System.cpp [Corey Taylor]
     <li> g3d_Index macro now available in G3D::OldShader GLSL code
     <li> G3D::BackgroundWidget
     <li> G3D::TriangleShape
     <li> Fix: <B>incompatible change</b> OSWindow::Settings::asynchronous is now spelled correclty, with two "n"s
     <li> Fix: Fixes for point-in-triangle and moving-sphere-fixed-tri; previous code projected onto the wrong axes, so barycentric coords were wrong for nearly vertical triangles.
     <li> Fix: Changed some doubles to floats in G3D::Triangle
     <li> Fix: Changed all of the isXXX(char) methods to take unsigned char arguments so that they can parse extended symbols
     <li> Fix: AABSPTree::deserializeStructure was missing a return statement [Derex]
     <li> Fix: Draw::plane was drawing the plane reflected through the origin [Macklin Chaffee]
     <li> Fix: Added template parameters to friends in AABSPTree and PointAABSPTree [expiring_frog]
     <li> Fix: System::findDataFile uses data directory set by GApp
     <li> Fix: AtomicInt32 decrement returns int32 instead of uint32
     <li> Fix: OS X function keys now work correctly under CarbonWindow
     <li> Fix: OS X modifier keys now work correctly under CarbonWindow
     <li> Fix: OS X arrow keys now work correctly under CarbonWindow
     <li> Fix: Rewrote buildg3d to fix many longstanding bugs, including mismatched 'bin' directories and confusion about the 'install' target
     <li> Fix: gfxmeter reports now format correctly regardless of monitor width
     <li> Fix: patch to initialize correctly on the Mesa library, which crashes when requesting DEPTH24_STENCIL8
     <li> Fix: stringSplit now works correctly for adjacent split characters [Akita Noek]
     <li> Fix: Draw::axes labels now obey current viewport
     <li> Fix: GuiWindow now loses focus when hidden
     <li> Fix: GFont::draw2D now computes correct horizontal bounds on text
     <li> Fix: GuiPane no longer renders when invisible
     <li> Fix: Clicking off of all GuiWindows makes none of them have focus
     <li> Fix: Win32Window now allows windows programmatically positioned anywhere on a multiple monitor screen
     <li> Fix: Win32Window now does not fail when dragging a GL context between multiple monitors
     <li> Fix: SuperShader now correctly lights bump-mapped surfaces in tangent space [Kyle Whitson]
     <li> Fix: GuiPane now renders its caption
     <li> Fix: Rect2D::border now grows the correct way (positive = grow)
     <li> Fix: Added % operator to TextInput
     <li> Fix: Added multi-line printing to GConsole
     <li> Fix: G3D::Texture can now create empty cube maps
     <li> Fix: G3D::Table iterator now correctly parameterized on hashfunction and equality function as well as key and value
     <li> Fix: G3D::Table now passes Values by reference when setting them, avoiding one copy
     <li> Fix: various Framebuffer/empty texture initialization bugs on ATI cards
     <li> Fix: uniform arrays for GLSL
     <li> Fix: All aliasing warnings have been fixed no longer needs -fno-strict-aliasing [Corey Taylor]
     <li> Fix: [ 1829704 ] debugAssert in Array::operator[](unsigned int n) wrong
     <li> Fix: GuiWindow::pack now recursively packs all child panes
     <li> Fix: patch to continue build when javac isn't found on both windows and linux [Corey Taylor]
     <li> Fix: [ 1599139 ] Fixes to make buildg3d work on non C:\ windows systems  [Patrick Burke]
     <li> Fix: Added faster overloads of GImage::stripAlpha() and GImage::insertRedAsAlpha() [Corey Taylor]
     <li> Fix: GImage::save() with odd-widths bmp files [Corey Taylor]
     <li> Fix: Draw::capule renders properly (capule was not visible) [Corey Taylor]
     <li> Fix: Patched ShadowMap to work around ATI and OS X driver shadow map bugs.
          <b>Incompatible change:</b>Required changing several interfaces to take ShadowMapRef arguments.
     <li> Fix: Camera::Frustum was facing backwards
     <li> Fix: [ 1774479 ] texture glformats wrong (caused incorrect font rendering on Intel)
     <li> Fix: ArticulatedModel static methods do not force loading of shaders unless an ArticulatedModel has actually been loaded.
     <li> Fix: RenderDevice::setAlphaWrite/setColorWrite implemented correctly
     <li> Fix: Implemented ImageFormat::fromCode
     <li> Fix: [ 1766509 ] Texture doesn't handle 3D textures correctly
     <li> Fix: Separate bool, float, and int back ends for GLSL shaders
   </ul>

<hr>
   <P>
   Changes in 7.00:
   <ul>
     <li> Upgraded to iCompile 0.5.3.  Requires users to delete their old ice.txt and ~/.icompile files
     <li> Key to toggle the user camera is now F2 (was Tab)
     <li> Support for g++ 4.1 [Corey]
     <li> Patches for 64-bit compilation [Corey]
     <li> WinMain is now compiled as C++ code (fixed some "manifest" errors on certain VC8 installations)
     <li> G3D::ShadowMap
     <li> Cleaned up and documented G3D::Camera project/unproject API [Jeff Marsceill]
     <li> Made G3D::MD2Model::Pose easier to use
     <li> G3D::Matrix
     <li> Added G3D::Texture methods for reading back color and depth textures
     <li> G3D::RenderDevice::getFixedFunctionLighting
     <li> G3D::debugPrintf -> G3D::consolePrintf
     <li> G3D::GApp::debugPrintf -> G3D::screenPrintf
     <li> Reduced ArticulatedModel and MD2Model push/popState calls
     <li> G3D::OldShader now defines platform and graphics vendor macros
     <li> User camera control requires right mouse click to move
     <li> G3D::AnyVal::fromFile, G3D::AnyVal::load, G3D::AnyVal::save
     <li> G3D::AnyVal now uses copy-on-mutate for fast Array/Table copies
     <li> G3D::AnyVal no longer separates table entries with ";"
     <li> G3D::AnyVal now provides casts to basic data types
     <li> G3D::AnyVal G3D::Rect2D and G3D::AABox types
     <li> G3D::NetListener, G3D::ReliableConduit, and G3D::LightweightConduit can now be created without an explicit NetworkDevice pointer
     <li> GApp::onGraphics now takes posed model arguments
     <li> G3D::RenderDevice::beginFrame no longer executes a pushState-- state will carry over between frames
     <li> G3D::GUniqueID
     <li> GApp::onPose
     <li> All classes that read from files can now read data inside zipfiles.
     <li> Changed G3D::hashCode(T) to ::GHashCode<T>(T) [Corey]
     <li> Removed "G3D::" from the printed portion of the documentation index to make it easier to read.
     <li> OSWindow::fireEvent for inserting user events into the queue
     <li> G3D::logPrintf
     <li> System::findDataFile
     <li> On OS X, G3D::FirstPersonManipulator now treats ctrl-click as right click
     <li> Increased mouse sensitivity of G3D::FirstPersonManipulator on OS X
     <li> System::getClipboardText, System::setClipboardText
     <li> Widget::window() accessor
     <li> Replaced SDLEvent with G3D::GEvent
     <li> Increased GFont rendering performance, added GFont::send2DQuads for fast rendering of large amounts of text
     <li> G3D::GFont now supports fonts with 256 characters (.fnt file format version 2)
     <li> Upgraded to the OpenGL 2.0 glext/glxext/wglext headers
     <li> G3D::GuiTheme, G3D::GuiText
     <li> G3D::UprightFrame, G3D::UprightSpline
     <li> G3D::Spline
     <li> G3D::RenderDevice::clip2D
     <li> G3D::Win32Window now returns events for up to 5 mouse buttons
     <li> Significantly changed GEvent delivery and Widget mechanisms to incorporate notions of focus--see upgrade.html
     <li> Motion events (joystick/mouse) can no longer be cancelled by Widget::onEvent
     <li> Mouse motion events for all platforms
     <li> G3D::shared_ptr<Surface>::sendGeometry
     <li> G3D::RenderDevice::pushState(shared_ptr<Framebuffer>)
     <li> G3D::Texture::Preprocess::computeNormalMap
     <li> direct.h is now included by fileutils.h on Win32 to ensure that chdir, mkdir, etc. are available
     <li> Changed distribution directories to place include, lib, and bin under a directory named after the platform
          and all other files one directory up.
     <li> G3D::Camera::unproject
     <li> Made G3D::Ray non-virtual for efficiency
     <li> RenderDevice::alphaWrite now defaults to true
     <li> Changed G3D install directory from g3d-7_00 to g3d-7.00
     <li> On a GL 2.0 or greater driver, G3D::GLCaps now assumes the presence of all GL2 extensions even if they are not explicitly listed by the card [Corey Taylor]
     <li> debugPrintf now flushes stderr on Unix systems
     <li> G3D::Lighting::fromSky
     <li> G3D::Texture::newGLTexture2D [Corey Taylor]
     <li> Added 10-bit cinema texture formats [Corey Taylor]
     <li> Added G3D::ArticulatedModel to the core (includes 3DS loading)
     <li> Added G3D::SuperShader to the core
     <li> Merged GApp and GApplet into GApp to make the common case easier to implement
     <li> Removed GApp::debugMode options, removed "debug" prefix from most fields.
     <li> G3D::zipfileExists for testing if a filename path contains a .zip to be opened [Eric]
     <li> G3D::isZipfile tests the header of a file to see if it is a .zip [Eric]
     <li> G3D::zipRead and G3D::zipClose to open and close .zip files [Eric]
     <li> G3D::fileExists supports filename paths that contain .zip [Eric]
     <li> G3D::fileLength supports filename paths that contain .zip [Eric]
     <li> G3D::getFiles and G3D::getDirs support filename paths that contain .zip [Eric]
     <li> Texture::isSupportedImage - static method, returns true if a filename exists and is compatible with Texture [Eric]
     <li> Viewer (tool) - Allows drag and drop viewing of many supported file formats [Eric]
     <li> GFXMeter (tool) - Updated for 7.00 compatibility: GApplet structure removed [Eric]
     <li> OSWindow::Settings has an allowMaximize field.  Win32Window will have an activated 'Maximize' button if true [Eric]
     <li> GApp2::debugCamera -> GApp2::m_debugCamera
     <li> GApp2::debugController -> GApp2::m_debugController
     <li> Made GApp2::debugText private
     <li> Added g3d_WorldLight0 to the G3D shader extensions
     <li> Added OldShader support for GL_FLOAT_MAT3_ARB uniforms
     <li> Tab (command completion) no longer auto-repeats in GConsole
     <li> GConsole now limits the key repeat rate to the framerate
     <li> Removed GApp::Settings::useNetwork because it was no longer needed--Win32 does not trigger firewall checks anymore
     <li> Optimized AABSPTree balance and queries; now about 20% faster than 6.10, but requires 30 bytes more memory per member
     <li> G3D::Array::pop now shrinks the underlying array by default (Array::popRemove does not shrink the array and is faster)
     <li> Fast O(<i>n</i>), non-destructive G3D::Array::partition and G3D::Array::medianPartition
     <li> Increased ReliableConduit read attempts before timeout from 10 to 100
     <li> G3D::GImage::pixel1 now returns G3D::Color1uint8*
     <li> G3D::Color1, G3D::Color1uint8
     <li> G3D::Image1,	G3D::Image1uint8
     <li> G3D::Image3,	G3D::Image3uint8
     <li> G3D::Image4,	G3D::Image4uint8
     <li> BinaryInput::flipEndian32, BinaryInput::flipEndian16
     <li> Texture::createEmpty now intializes invertY = true, which is usually desirable for Framebuffer rendering.
     <li> G3D::Map2D
     <li> G3D::Vector4int8
     <li> G3D::PointShape
     <li> G3D::GImage::RGBAtoRGB
     <li> Added GLEW compatibility [nico]
     <li> Added data-files directory to the locations searched for G3D demo data
     <li> On Win32, assertions now print ot the Output window as well as the dialog box.
     <li> On Win32, $TEMP is now used for the logfile location instead of c:\\tmp
     <li> G3D::GKey replaces old SDL key enumeration
     <li> Decreased memory requirements and increased balance speed of G3D::AABSPTree by adding a level of indirection
          between tree nodes and the data stored in them.
     <li> Added OSWindow::Settings::caption
     <li> <b>Win32 programs must call the macro <b><code>G3D_START_AT_MAIN();</code></b> at top-level if they do not define WinMain themselves.</b>
     <li> Win32 switched from MBCS to UNICODE for the binaries (G3D sources compile under either, but UNICODE is the VC8 default)
     <li> Replaced SDL event types with G3D event types
     <li> Added support for GL_ARB_point_sprite
     <li> Win32 programs must call the macro <b><code>G3D_START_AT_MAIN();</code></b> at top-level if they do not define WinMain themselves.
     <li> Win32 switched from MBCS to UNICODE for the binaries (G3D sources compile under either)
     <li> Changed G3D::GApp::main to return an int
     <li> Added header support for GL_EXT_geometry_shader4 ("Geometry shaders")
     <li> Changed IFSModel::create to IFSModel::fromFile
     <li> G3D::BSPMap for loading Quake3 .bsp files
     <li> G3D::TextInput::Settings::caseSensitive
     <li> G3D::TextInput::readBoolean, G3D::TextInput::Settings::trueSymbols, G3D::TextInput::Settings::falseSymbols, G3D::TextOutput::Settings::trueSymbol, G3D::TextOutput::Settings::falseSymbol, G3D::TextOutput::writeBoolean, G3D::Token::BOOLEAN_TYPE
     <li> G3D::TextInput::Settings::msvcFloatSpecials now defaults to true
     <li> Made the input to G3D::tessellateComplexPolygon a constant array reference
     <li> Removed SDL from Win32 build
     <li> Increased maximum ReliableConduit message size to 60 MB
     <li> Removed error macro
     <li> G3D::GConsole
     <li> Rect2D::lerp
     <li> Added GL_EXT_packed_depth_stencil
     <li> Added G3D::ImageFormat::DEPTH24_STENCIL8 packed stencil mode
     <li> getOpenGLState now includes GL_LIGHT_MODEL_TWO_SIDE value
     <li> Made ThirdPersonManipulator constructor protected (use ThirdPersonManipulator::create now)
     <li> G3D::ToneMap
     <li> Changed Renderbuffer::createEmpty argument order to match Texture::createEmpty
     <li> G3D::IFSModel can now remove degenerate faces on load
     <li> G3D::MD2Model::textureFromFile
     <li> Replaced AABSPTree::beginRayIntersection with simpler AABSPTree::intersectRay interface.
     <li> G3D::MD2Model now uses floating point texture coordinates, which makes it easier to
          write pixel shaders for MD2Models
     <li> G3D::GImage::computeNormalMap now accepts a scale factor indicating how steep the input bump map is
     <li> Added G3D::OldShader support for the GLSL \#version directive
     <li> Optimized G3D::GImage::computeNormalMap to use primarily integer math
     <li> G3D::AABox::contains(AABox)
     <li> Added large file (>2GB) support to BinaryInput [Peter]
     <li> Renamed graphics3d.h to G3D/G3D.h
     <li> Renamed GLG3D.h to GLG3D/GLG3D.h
     <li> Renamed G3DAll.h to G3D/G3DAll.h
     <li> G3D::Quat::unitize now normalizes in place
     <li> Added G3D::Quat::operator*=
     <li> Removed G3D::FirstPersonManipulator's constructor--use the static G3D::FirstPersonManipulator::create method now.
     <li> Changed BSPMap leaf bounds from Box to AABox--50% improvement in frustum culling speed
	 <li> Optimized BSPMap rendering performance
     <li> Removed all deprecated APIs
	 <li> All accessors of the form "getXXX" that take no arguments are now named just "xxx"
     <li> G3D::Sky::create is now named G3D::Sky::fromFile and no longer accepts a G3D::RenderDevice. G3D::Sky::render now requires a RenderDevice.
     <li> G3D::GFont::fromFile no longer accepts a G3D::RenderDevice and G3D::GFont::draw2D now requires a RenderDevice.
     <li> Removed an assertion in BinaryInput requiring that compressed buffers be copied on construction [Nick Bray]
     <li> Removed CoordinateFrame::zLookDirection (use -1)
     <li> Removed Capsule::endPoint (use point)
     <li> Removed CoordinateFrame::getStrafeVector (use rightVector)
     <li> Removed static constants (use equivalent lower-case methods)
     <li> Removed Cylinder::getPoint1 (use point)
     <li> Fix: BSPMap::getStartingPosition now works correctly on all maps [Jeff]
     <li> Fix: Workaround for ATI drivers that do not support zero-area scissor region
     <li> Fix: GL_EXT_texture_3D -> GL_EXT_texture3D
     <li> Fix: ARB_texture_cube_map and EXT_texture_cube_map are now aliases on all cards
     <li> Fix: EXT_texture_edge_clamp and SGIS_texture_edge_clamp are now aliases on all cards
     <li> Fix: G3D::Sky now turns off lighting
     <li> Fix: Win32Window now returns mousebutton and motion events according to the GEvent spec
     <li> Fix: Win32Window now operates correctly in fullscreen mode
     <li> Fix: Fixed TGA decode to load from the middle of a binaryinput
     <li> Fix: Added texture coordinates to posed MD2Models
     <li> Fix: prompt/debugAssert now correctly responds to button presses on OS X
     <li> Fix: GConsole now filename completes after the first word
     <li> Fix: RenderDevice::getDepthBufferValue now checks for the presence of a depth buffer.
     <li> Fix: G3D::AABSPTree now correctly handles members with infinite bounds on ray intersection tests
     <li> Fix: Removed use of tmpfile on Unix
     <li> Fix: Java ReliableConduit now properly waits if the buffer is full when sending
     <li> Fix: [ 1607693 ] Triangles/Second display is now correct (rates were too low in 6.10)
     <li> Fix: NetworkDevice now does not perform a test broadcast during initialization
     <li> Fix: G3D::LightweightConduit::ok is now false if any error occurs during initialization
     <li> Fix: BSPMAP for cards without glMultiDrawElementsEXT
     <li> Fix: [ 1584335 ] ReliableConduit incorrectly assumes it's ok
     <li> Fix: RenderDevide::push2D no longer resets the framebuffer.
     <li> Fix: Framebuffer logic for counting number of attachments was broken
     <li> Fix: [ 1581986 ] Matrix3::fromAxisAngle now normalizes the input vector
     <li> Fix: [1490643] Linux/FreeBSD/OS X binaries are now compiled with -fno-strict-aliasing, which fixes some
          memory corruption problems that occurred with full optimizations.
     <li> Fix: Fixed all warnings on gcc-4.1 and VC8.
     <li> Fix: Matrix and CoordinateFrame serializers inside G3D::AnyVal dropped data
     <li> Fix: [ 1535759 ] valgrind finds initialization/deletion errors in TextOutput, Matrix [Chris Demetriou]
     <li> Fix: Patched MD2Model to automatically reduce animation times to less than 100000; large time were overflowing double->int conversion and causing animations to appear scrambled.
     <li> Fix: [ 1535292 ] global Table hashCode overloads broken [Chris Demetriou]
     <li> Fix: [ 1535736 ] Fixed System.cpp memory allocator to compile on 64-bit machines correctly [Chris Demetriou]
   </ul>

  <hr>
   <P>
   Changes in 6.10:
    <UL>
     <LI> Optimized G3D::CoordinateFrame::pointToObjectSpace to be fully inlined via left-multiplication
     <LI> G3D::Matrix4::orthogonalProjection from a G3D::Rect2D
     <LI> G3D::RenderDevice::swapBuffers
	 <LI> G3D::AnyVal
     <LI> G3D::ThirdPersonManipulator
     <LI> Added support for GL_SGIS_texture_lod in Texture.
     <LI> Fix: [ 1490655 ] MeshAlg::Edge::containVertex goes off the end of the array
     <LI> Fix: [ 1511729 ] NVIDIA rectangle generates errors in mipmap code
     <LI> Fix: [ 1507296 ] RenderDevice must swapBuffer on resize
    </UL>
<hr>
   <P>
   Changes in 6.09:
   <UL>
    <LI> glDepthBoundsEXT
    <LI> G3D::Quat::sameRotation
    <LI> Full loading of the GL_ATI_separate_stencil extension, support within RenderDevice
    <LI> platform.h undefines WIN32_LEAN_AND_MEAN, NOMINMAX after it has defined them
    <LI> G3D::Texture::Settings::maxMipMap
    <LI> Renamed Texture::Parameters to Texture::Settings (backwards compatible typedef added)
    <LI> Optimized IFSModel rendering by increasing internal VAR cache size and reducing the number of state changes.
        Can now render more than 1000 IFSModels at 30 fps on GeForce 7800.
    <LI> G3D::System::mallocStatus
    <LI> Range checking on Vector2int16::operator[]
    <li> GImage::BAYER_G8R8_B8G8_to_R8G8B8_MHC, GImage::BAYER_B8G8_G8R8_to_R8G8B8_MHC
    <LI> IFSModel and MD2Model now allocated their posed models using System::malloc
    <LI> Increased the memory maintained by G3D::System for buffer pools up to a total of 13 MB:
         8 MB tiny (preallocated), 1 MB small (on demand), 4 MB medium (on demand).  This was observed to
         dramatically increase performance (15x) in real programs that were
         performance limited by memory allocation time.
    <LI> NetworkDevice now uses Winsock2.0 on Windows (controlled by the G3D_WINSOCK_MAJOR_VERSION/G3D_WINSOCK_MINOR_VERSION settings in NetAddress.h)
    <LI> G3D::Manipulator
    <LI> G3D::GApplet now runs installed G3D::GModules (except for graphics, which is left to the progrmamer)
    <LI> G3D::GApp::addWidget, G3D::GApplet::addWidget, G3D::GApp::removeWidget, G3D::GApplet::removeWidget
    <LI> G3D::Widget, G3D::WidgetManager
    <LI> G3D::System::getEnv()
    <LI> G3D::Surface2D
    <LI> G3D::DXCaps
    <LI> Increased precision of several Quat operations
	<LI> G3D::Quat::fuzzyEq
	<LI> G3D::Quat::operator-
    <LI> G3D::LineSegment::length, G3D::LineSegment::point
	<LI> Increased fuzzyEpsilon by a factor of 10 to take into account the new float32 focus of the APIs
    <LI> G3D::RegistryUtil
    <LI> G3D::LineSegment2D
    <LI> G3D::ConvexPolygon2D
    <LI> G3D::AxesShape
    <LI> contrib/shaders/showDepth
    <LI> G3D::Crypto with MD5 and CRC32 hashes
    <LI> TextureManager::findTexture, TextureManager::cacheTexture [Erik]
    <LI> Win32Window::_directInput created on-demand [Erik]
    <LI> weak_ptr has more comparison operators [Erik]
    <LI> GImage::resolveFormat utility function [Erik]
    <LI> GLCaps supports MESA
    <LI> G3D::Win32Window and G3D::SDLWindow now release input capture and make the mouse visible on destruction
    <LI> G3D::OSWindow::setInputCaptureCount, G3D::OSWindow::inputCaptureCount, G3D::OSWindow::incInputCaptureCount, G3D::OSWindow::decInputCaptureCount
    <LI> GImage::makeCheckerboard
    <LI> G3D::Vector3::one()
    <LI> G3D::OldShader now supports g3d_size(sampler2D) and g3d_invSize(sampler2D) extensions in GLSL shaders.
    <LI> Renamed GAppSettings to G3D::GApp::Settings (old name is supported but deprecated)
	<LI> Renamed GWindowSettings to G3D::OSWindow::Settings (old name is supported but deprecated)
	<LI> Renamed TextInput::Options to G3D::TextInput::Options (old name is supported but deprecated)
    <LI> G3D::FPManualController::setAutoActive for World of Warcraft style controller
    <LI> G3D::isSlash, G3D::isQuote
    <LI> G3D::GApplet::onEvent can now consume (i.e., prevent G3D::GApp from seeing) the event
    <LI> G3D::CoordinateFrame::fuzzyIsIdentity, G3D::CoordinateFrame::isIdentity, G3D::CoordinateFrame::fuzzyEq
    <LI> Matrix3::isOrthonormal
    <LI> [1421201] Removed excess gl (NVIDIA) headers
    <LI> Win32Window destructor now releases the mouse if it was captured and the current GL context is that window and the window was not created from an existing HDC/HWND
    <LI> Fix: com.graphics3d.g3d.ReliableConduit now correctly selects on the waiting socket
	<LI> Fix: [ 1166057 ]  AABSPTree::beginBoxIntersection
    <LI> Fix: GLCaps::supports(ImageFormat) now returns correct results on all cards
    <LI> Fix: Shadow map rendering of default Surfaces now enables lighting
    <LI> Fix: G3D::UserInput now restores the mouse position after pureDeltaMouse is turned off
    <LI> Fix: G3D::Win32Window now clips precisely to the client area during an input grab.
	<LI> Fix: [ 1383042 ] free static variables on shutdown
	<LI> Fix: [1449115 ] Texture loading for odd-byte rows
    <LI> Fix: G3D::Win32Window now produces correct character and scan codes for key events
    <LI> Fix: G3D::GApplet::onEvent calls GApplet::processEvent by default
    <LI> Fix: [ 1444320 ] TextInput parsed ".1" as "1" instead of "0.1"
    <LI> Fix: G3D::Shape::type is now const
    <LI> Fix: 0 --> 0.0f FrameBuffer.h [Erik]
    <LI> Fix: Fixed Texture read-back dimensions for cube-map
    <LI> Fix: Missing \#include in SkyParameters.h [Erik]
    <LI> Fix: Quad triangle counts are now accurate (were off by factor of 4 in 6.08)
    <LI> Fix: contrib/ArticulatedModel now correctly masks all components using the diffuse alpha in fixed function mode
    <LI> Fix: G3D::CoordinateFrame::getHeading was flipped front-to-back
    <LI> Fix: [ 1404487 ] Missing Alt key up/down events on Win32
    <LI> Fix: [ 1484924 ] collisionTimeForMovingPointFixedBox normals
   </UL>
  <P>
<hr>
   Changes in 6.08:
    <UL>
	  <LI> Moved Win32 linker statements out of platform.h for IncrediBuild compatibility.
      <LI> G3D::Texture and G3D::Sky now accept a rescaling factor
      <LI> Added GFont::fromMemory() [Corey]
      <LI> Added optional argument to Quat::slerp() for slerp/lerp angle threshold. [Corey]
      <LI> Across-the-board performance optimizations.  Most apps should render 10% faster.
           Includes removal of Milestones when using VBO VAR [Nick Bray], GFont::draw2D and
           Draw::rect2D stripped down to raw OpenGL, consistent internal use of float,
           increased RenderDevice state change optimization.
	  <LI> Minimized header interdependencies (GLG3D headers no longer include all of G3D)
      <LI> Added GThread and GMutex classes. [Corey]
      <LI> Added ImageFormat::fromCode(). [Corey]
      <LI> Added Plane::distance() and Plane::closestPoint() helper methods. [Corey]
      <LI> G3D::ImageFormat::code, G3D::ImageFormat::colorSpace
      <LI> <B>incompatible change</B> G3D::MeshAlg::computeTangentSpace basis now computes a right-handed coordinate frame,
           where the binormal direction is the negative of the direction it faced in G3D 6.07.
      <LI> Exposed G3D::RenderDevice::beforePrimitive and G3D::RenderDevice::afterPrimitive to end-user code for
           integrating raw OpenGL calls.
      <LI> G3D::Framebuffer and G3D::Renderbuffer to implement the Framebuffer_object extension [Dan Hilferty]
      <LI> G3D::OldShader::hasArgument
      <LI> G3D::Texture::getImage
      <LI> Changed SECOND, MINUTE, DAY, HOUR, SUNRISE, SUNSET, MIDNIGHT, METER, KILOMETER to enum values instead of \#defines
      <LI> G3D::Texture::Parameters; deprecated most Texture constructors in favor of ones that use this class
      <LI> Moved most image manipulation routines into GImage.
      <LI> G3D::GImage now allocates the underlying buffer in multiples of bytes to allow slight overflor for MMX algorithms
      <LI> G3D::GImage::BAYER_R8G8_G8R8_to_R8G8B8_MHC
      <LI> G3D::GImage::R8G8B8_to_Y8U8V8
      <LI> G3D::GImage::Y8U8V8_to_R8G8B8
      <LI> G3D::GImage now supports PPM binary
      <LI> Various Rect2D helpers [Nick Bray]
      <LI> ConvexPolyhedron improved clipping [Nick Bray]
      <LI> G3D::System::build
      <LI> G3D::System::calloc
      <LI> G3D::GImage::convertToRGBA
      <LI> contrib/AVI can read most AVI files on Windows.
      <LI> contrib/wxGWindow now uses wxWidgets 2.6.2
      <LI> G3D_DEBUG now controls whether debug code is enabled; it defaults to the value of _DEBUG
      <LI> zlib upgraded to 1.2.3 [Corey]
      <LI> zlib now statically linked on Win32 (no longer requires zlib1.dll at runtime) [Corey]
      <LI> G3D::MeshShape
      <LI> Changed std::string hashCode to use CRC32 to reduce collisions
      <LI> G3D::crc32
      <LI> Added occlusion query \#defines [Nick Bray]
	  <LI> G3D::Win32Window now shares textures and vertex buffers across all GL contexts
	  <LI> G3D::Win32Window now enforces single-threading among GL contexts
	  <LI> G3D::GLCaps::slowVBO
	  <LI> G3D::VARArea now uses main memory vertex buffers on cards with slow VBO implementations.
	  <LI> G3D::Matrix3::toString [Peter]
	  <LI> G3D::Matrix4::toString [Peter]
	  <LI> G3D::Color3::fromHSV [Peter]
	  <LI> G3D::Color3::toHSV   [Peter]
	  <LI> G3D::Color3::jetColorMap [Peter]
      <LI> Optimized G3D::iRound (now faster than casting!)
      <LI> G3D::MD2Model::create now accepts a scale factor
      <LI> G3D_DEPRECATED macro
      <LI> G3D_CHECK_PRINTF_ARGS, G3D_CHECK_VPRINTF_ARGS macros to allow
           checking of printf argument strings under gcc at compile time with
           -Wformat.
      <LI> G3D::TextInput::filename
      <LI> G3D::TextInput::Options::msvcFloatSpecials
      <LI> G3D::TextInput::Options::startingLineNumberOffset
      <LI> G3D::TextInput::readSymbolToken [cgd]
      <LI> G3D::TextInput::readStringToken [cgd]
      <LI> Threadsafe G3D::shared_ptr
      <LI> G3D::AtomicInt32
      <LI> G3D::GThread [Corey]
      <LI> G3D::Array::popDiscard
      <LI> Optimized multi-argument Array::append
      <LI> G3D::GFont 2x faster than in G3D 6.07
      <LI> G3D::RenderDevice::pushState 2x faster than in G3D 6.07
      <LI> G3D::RenderDevice::pushState no longer stores GL texgen and fog information
      <LI> G3D::Draw::fastRect2D
      <LI> G3D::System::outOfMemoryCallback
      <LI> G3D::Queue::fastClear [Chris Demetriou]
      <LI> G3D::Rect2D::x0y1 and x1y0
      <LI> G3D::GLCaps bug tests now run in a separate GL context [Erik Cassel]
      <LI> G3D::GApplet tracks real and simulation time.
      <LI> contrib/Q3Map updated to correctly render instanced objects [Alex Rice]
      <LI> G3D::OSWindow subclasses now required to invoke OSWindow::loadExtensions
      <LI> G3D::Quat::log for non-unit quats and for real-only quats.
      <LI> G3D::GApplet::doUserInput
      <LI> G3D::GApp prints time for each component
      <LI> G3D::Stopwatch
      <LI> G3D::OSWindow::renderDevice()
      <LI> G3D::OSWindow::current()
      <LI> G3D::GLCaps::hasBug_redBlueMipmapSwap and workaround for G3D::Texture on Radeon 7500
      <LI> Fix: CollisionDetection::penetrationDepthForFixedSphereFixedPlane() contact point and normal values. [Corey]
      <LI> Fix: Quat::slerp has invalid shortest path [Corey]
      <LI> Fix: G3D::drawFeatureEdges now uses correctly normalized face edges (and offers a crease angle)
	  <LI> Fix: G3D::SDLWindow now releases the mouse on Linux during an assertion.
      <LI> Fix: All keys are reset to up when Win32Window loses focus. [Corey]
      <LI> Fix: gaussRandom is unit gaussian [Corey]
      <LI> Fix: [ 1418276 ] 6.08: Unsupported format for depth texture
      <LI> Fix: Ignoring extra/unused set OldShader arguments. [Corey]
      <LI> Fix: [ 1229205 ] uniform texture array (Could not set indexed array uniforms). [Corey]
      <LI> Fix: <B>incompatible change</B> BinaryInput/BinaryOutput copy constructors and assignments were accessible. [Corey]
      <LI> Fix: RenderDevice::screenshotPic would corrupt GImage's heap. [Corey]
      <LI> Fix: Alt-Tab window switching caused an invalid Alt key state. [Corey]
      <LI> Fix: Incorrect window size event in Win32Window sent to OpenGL. [Corey]
      <LI> Fix: [ 1227915 ] Textures don't bind on ATI under GLSL.
      <LI> Fix: [ 1358477 ] ray-plane intersection bug [Dan Keefe]
      <LI> Fix: [ 1370665 ] hash_map moved to stdext in VC8 (2005)
      <LI> Fix: ToneMap extended to use DIM_2D instead of DIM_2D_RECT
      <LI> Fix: Texture::copyFromScreen now works with DIM_2D textures
	  <LI> Fix: Wrapped debugAssertM in do {} while (0) to ensure correct compilation in single-line statements [ERik Cassel]
      <LI> Fix: G3D::Draw::cylinder now renders the bottom correctly
      <LI> Fix: Array::front now compiles under gcc
      <LI> Fix: G3D::Ray::distance used to measure against the origin [David]
      <LI> Fix: [ 1293151 ] ArticulatedModel clipping on Radeon -- disabled auto-mipmap generation on mobile radeon 9xxx
      <LI> Fix: G3D::TextInput now parses ^=, character 255 correctly [cgd]
      <LI> Fix: G3D::TextInput now reports line numbers correctly with raw newlines [cgd]
      <LI> Fix: .ICO files with transparency loaded incorrectly [Corey]
      <LI> Fix: G3D::Draw::rect2DBorder inner border was 1 pixel too thick.
      <LI> Fix: [ 1326173 ] Win32Window::init should call makeCurrent.[Erik Cassel]
      <LI> Fix: [ 1326423 ] G3D::Queue::_copy broken [Chris Demetriou]
      <LI> Fix: [ 1313293 ] 6.08: TextInput gets symbol extendedType() wrong [Chris Demetriou]
      <LI> Fix: IFSModel::save, for PLY2  forgot newlines [Peter]
      <LI> Fix: Quat(Matrix3) now computes trace correctly (gave negative quats in some cases)
      <LI> Fix: Setting RenderDevice::polygonOffset now always produces a depth shift,
                even for faces perpendicular to the view axis.
      <LI> Fix: GImage now auto-resolves formats for files with 1 character base names
      <LI> Fix: weak_ptr cycle bug
      <LI> Fix: Corrected lag encountered when using some ReliableConduit constructors [Dan Keefe]
    </UL>

  <P>
<hr>
   Changes in 6.07:
   <UL>
    <LI> G3D::OSWindow::makeCurrent
    <LI> Win32 release binaries now built with no debug information (used to have line numbers)
    <LI> AABox::AABox enforces the constraint low <= high
    <LI> Optimized G3D::Array, Table, Queue, and Set for performance.  Now significantly (up to 10x) faster
         than their std::counterparts.
    <LI> G3D::Vector3(Vector2, float) constructor
    <LI> G3D::Vector2::fastDirection
    <LI> G3D::TextInput::Options::cComments
    <LI> G3D::TextInput::Options::escapeSequencesInStrings
    <LI> G3D::TextInput::Options::otherCommentCharacter2
    <LI> G3D::TextInput::WrongString
    <LI> GLCaps::supports_GL_ATI_separate_stencil
    <LI> GLCaps can now test a card/driver and detect specific bugs:
        <ul><li>G3D::GLCaps::hasBug_glMultiTexCoord3fvARB
        <LI> G3D::GLCaps::hasBug_normalMapTexGen
        </ul>
    <LI> G3D::shared_ptr::downcast for non VC6 compilers
    <LI> Improved G3D::shared_ptr documentation to make subclassing features clearer
    <LI> Moved typedef for uint into G3D namespace and into g3d (was in glg3d)
    <LI> G3D::Shape
    <LI> G3D::Cylinder
    <LI> G3D::System::malloc, G3D::System::realloc, G3D::System::free for fast allocation of small objects
    <LI> G3D::Draw::plane
    <LI> G3D::Draw::cylinder
    <LI> G3D::gaussRandom
    <LI> Camera deserialize(BinaryInput) & serialize(BinaryOutput) functions [Peter]
    <LI> G3D::GApp now writes a description of the whole system to the log to aid debugging.
    <LI> [ 1217928 ] OpenGL occlusion query entry points are loaded on initialization
    <LI> New texture interpolation modes: BILINEAR_MIPMAP, NEAREST_MIPMAP, NEAREST_NO_MIPMAP
    <LI> New texture formats:
      <UL>
        <LI> G3D::ImageFormat::L16;
        <LI> G3D::ImageFormat::L16F;
        <LI> G3D::ImageFormat::L32F;
        <LI> G3D::ImageFormat::A16;
        <LI> G3D::ImageFormat::A16F;
        <LI> G3D::ImageFormat::A32F;
        <LI> G3D::ImageFormat::LA4;
        <LI> G3D::ImageFormat::LA16;
        <LI> G3D::ImageFormat::LA16F;
        <LI> G3D::ImageFormat::LA32F;
        <LI> G3D::ImageFormat::RGB16;
        <LI> G3D::ImageFormat::RGB16F;
        <LI> G3D::ImageFormat::RGB32F;
        <LI> G3D::ImageFormat::RGBA16;
        <LI> G3D::ImageFormat::RGBA16F;
        <LI> G3D::ImageFormat::RGBA32F;
      </UL>
     <LI> isValidPointer and isValidHeapPointer no longer check the Win32 debug heap in order to support offset and padded memory blocks.
     <LI> Restructured unit tests
     <LI> G3D::CoordinateFrame::lookRay [David Baszucki]
     <LI> G3D::System::describeSystem, G3D::NetworkDevice::describeSystem, G3D::RenderDevice::describeSystem
     <LI> G3D::Array performance tuning for short arrays and arrays of small objects
     <LI> Added glext.h entries for GL_ARB_draw_buffers, GL_ARB_texture_rectangle,
          GL_ARB_color_buffer_float, GL_ARB_half_float_pixel, GL_ARB_texture_float,
          and GL_ARB_pixel_buffer_object extensions
     <LI> IFSModel::create  added weld option, defaults to true (to keep compatibility). [Peter]
     <LI> G3D::RenderDevice::alphaTestReference, RenderDevice::alphaTest
     <LI> G3D::VAR::set
     <LI> G3D::Log::vprintf
     <LI> G3D::weak_ptr
     <LI> GCC 4.0 build support added [Corey]
     <LI> G3D::CoordinateFrame::lookAt now gives a valid output even when look == up
     <LI> contrib/GChunk
     <LI> GLCaps now loads GL_EXT_framebuffer_object functions
     <LI> Added MSVC 6 support for C99 restrict keyword
     <LI> G3D::Win32Window properly resizes viewport on window resize [Corey]
     <LI> G3D::BinaryFormat, G3D::byteSize, G3D::binaryFormatOf
     <LI> Removed dead ManualCameraControllerHelper code
     <li> Added consistent area and volume methods to geometric primitives, deprecated old methods.
     <LI> Fast G3D::BinaryInput::read / G3D::BinaryOutput::write methods for arrays
     <LI> Enabled cube mapping on Radeon mobility cards and added a workaround to the known problems with texcoords on those cards.
     <LI> Can now create G3D::Win32Window with existing HWND and HDC [Corey]
     <LI> G3D::ShaderObject::ArgList::set(std::string, Array<T>)-- [ 1192401 ] OldShader support arrays
     <LI> Fix: SDLWindow used std::string's instead of C strings in printf and format inside some exception handling code. [Peter]
     <LI> G3D::X11Window (same as SDLWindow in this release)
     <LI> Fix: [ 1277854 ] Win32Window fails on 24-bit modes
     <LI> RFE: [ 1242466 ] Inline Matrix3 methods
     <LI> Fix: [ 1226272 ] end caps of capsules in wrong position
     <LI> Fix: G3D::ImageFormat::LA8 now has 8-bits per channel
     <LI> Fix: [ 1124491 ] Remove GL_SAMPLER_2DRECT_ARB
     <LI> Fix: [ 1257113 ] G3D::Queue problems comining pushFront and pushBack
     <LI> Fix: MeshAlg::Weld now linear time (was O(n^2) due to a bug)
     <LI> Fix: [ 1298873 ] fast & correct CoordinateFrame::lerp
   </UL>

  <P>
<hr>
   Changes in 6.06:
   <UL>
    <LI> G3D::Lighting::emissiveScale
    <LI> G3D::RenderDevice::drawBuffer
    <LI> G3D::RenderDevice::debugNumMinorStateChanges, debugNumMinorOpenGLStateChanges, debugNumMajorStateChanges, debugNumMajorOpenGLStateChanges.
    <LI> In stereo mode, Texture::copyFromScreen automatically chooses the left/right buffer to read based on the current glDrawBuffer
    <LI> contrib/ArticulatedModel/ToneMap
    <LI> Lazy state changes for shaders
    <LI> 50% performance improvement for G3D::BinaryInput, G3D::BinaryOutput when machine endian matches file endian
    <LI> Textures load with default of maxAnisotroy = 2.0
    <LI> maxAnisotropy argument to G3D::Texture constructors.
    <LI> GLCaps now loads GL_ATI_fragment_shader extension
    <LI> contrib/ArticulatedModel now supports rigid body hierarchies
    <LI> Added TEX_SUBTRACT, TEX_ADD_SIGNED, TEX_DOT3, TEX_DOT3_RGBA modes for G3D::RenderDevice::setTextureCombineMode
    <LI> G3D::RenderDevice now cleans up all static G3D::VARArea s when it shuts down
    <LI> FIX: [ 1208157 ] GLSL slow on ATI
    <LI> FIX: Off-by-one on viewport scale for 2D rendering
    <LI> FIX: MeshAlg::computeTangentSpaceBasis now works correctly
    <LI> FIX: 6.05 enabled all fixed function lights by default.  This caused major performance problems on some cards.
    <LI> FIX: Extended cube map workaround to all Radeon Mobility cards
    <LI> FIX: Added check for glBlendEq before calling in RenderDevice
    <LI> FIX: Added a test for GL_EXT_texture_env_add in RenderDevice
    <LI> FIX: [ 1191817 ] unsigned warnings in BinaryInput
   </UL>

<hr>
   <P>
   Changes in 6.05:
   <UL>
     <LI> G3D::BAYER_G8B8_R8G8_to_R8G8B8_MHC
     <LI> G3D::Quarter_R8G8B8_to_BAYER_G8B8_R8G8
     <LI> G3D::BAYER_G8B8_R8G8_to_Quarter_R8G8B8
     <LI> contrib/Matrix
     <LI> contrib/Java
     <LI> Texture::alphaOnlyVersion
     <LI> Draw::sphere speed improved over 25% with single quad strip (improves Draw::capsule) [Corey]
     <LI> Allow 1-channel GImage saving - BMP (expanded to RGB), PNG [Corey]
     <LI> Allow 1-channel GImage loading - PNG [Corey]
     <LI> Added shader and framebuffer extensions to glext.h
     <LI> All files used during current execution are available via G3D::getFiles() [Corey]
     <LI> Implemented OSX version of glGetCurrentContext with CGL. [Corey + Derek]
     <LI> ReferenceCountedObject is-in-heap checks were removed to allow better multiple and virtual inheritance for reference counted objects.  shared_ptr still appropriately checks does an is-in-heap check on assignment. [Corey]
     <LI> Added Dev C++ compatibility
     <LI> glGetAttribLocationARB
     <LI> Changed Light == operator to not use memcpy (was causing issues due to byte padding on some compilers)
     <LI> Made CoordinateFrame destructor non-virtual (eliminates vtable)
     <LI> Added new FAQ documentation
     <LI> Added support to G3D::BinaryInput and G3D::BinaryOutput
          reading and writing huge (larger than available memory) files.
          Files are still restricted to about 2 GB total, and compressed
          files must fit entirely in memory.
     <LI> Tweaked allocation strategy for small G3D::Array
     <LI> G3D::Texture::rect2DBounds, G3D::Texture::vector2Bounds
     <LI> G3D::Vector4 * G3D::Vector4, Vector4 / Vector4
     <LI> G3D::Array::operator=(std::vector)
     <LI> G3D::Sky::getEnvironmentMap now returns the top texture on machines
          that don't support cube maps.
     <LI> glDisableAllTextures()
     <LI> G3D::setFailureHook
     <LI> G3D::OldShader::fromStrings now accepts optional names for the vertex and pixel shader
     <LI> G3D::OldShader no longer requires values for declared but unused uniform variables
     <LI> G3D::RenderDevice now stores texture matrix at 32-bit precision (for faster push/popState)
     <LI> G3D::RenderDevice::setTextureLODBias
     <LI> G3D::OldShader now supports shadow map arguments
     <LI> G3D::OldShader::ArgList checks to see if Texture arguments are null
     <LI> G3D::RenderDevice::setAlphaWrite now defaults to true if the OSWindow has an alpha channel.
     <LI> G3D::RenderDevice::screenshotPic now supports alpha
     <LI> contrib/VideoSerializer
     <LI> G3D::BinaryOutput::writeBits, G3d::BinaryInput::readBits
     <LI> G3D::Sky can now be initialized with a NULL renderDevice, provided a non-null one
          is used with the G3D::Sky::render method.
     <LI> G3D::pi(), G3D::halfPi(), G3D::twoPi() added to replace defines [Corey]
     <LI> contrib/Q3Map
     <LI> Increased G3D::Draw::sphere performance using vertex arrays.
     <LI> G3D::Array::fastClear
     <LI> G3D::AABSPTree::insert(Array<T>)
     <LI> G3D::Texture::sizeOfAllTexturesInMemory
     <LI> G3D::VARArea::sizeOfAllVertexBuffersInMemory
     <LI> G3D::RenderDevice stores cameraToWorldMatrixInverse for faster coordinate system changes.
     <LI> inlined G3D::Matrix3::operator= for performance
     <LI> Created installer for Windows install [Corey]
     <LI> Reorganized the documentation topic index based on abstraction level, added hyperlinks to demo/contrib code
     <LI> G3D::ReliableConduit and G3D::LightweightConduit now send and receive
          objects directly; no need to make a G3D::NetMessage.  G3D::NetMessage
          and associated methods are now deprecated.
     <LI> Win32 GUI G3D::prompt now auto-expands \\n to \\r\\n in prompt string [Corey]
     <LI> G3D::Draw::frustum
     <LI> Increased timeout and attempts for G3D::ReliableConduit to handle huge (1 MB) packets
     <LI> G3D::BinaryOutput::reset (memory writing only; not supported for disk)
     <LI> Reduced overhead for G3D::ReliableConduit and
          G3D::LightWeightConduit send routines
     <LI> Added PPM/PGM/PBM ASCII encode/decode support to G3D::GImage [Corey]
     <LI> New G3D::Surface rendering methods appropriate for shadow casting
           (with efficient default implementations).
     <LI> G3D::Lighting
     <LI> Changed RenderDevice::TEX_INTERPOLATE to mean GL_DECAL and added TEX_BLEND for GL_BLEND
     <LI> G3D::CoordinateFrame::upVector
     <LI> G3D::Light::diffuse
     <LI> G3D::Rect2D::contains is now const
     <LI> Rewrote G3D::BinaryOutput to not use G3D::Array
     <LI> G3D::MD2Model::textureMatrix
     <LI> G3D::MeshAlg::computeBounds(vertex, index, ...)
     <LI> G3D::RenderDevice::colorWriteEnabled(), depthWriteEnabled, alphaWriteEnabled
     <LI> G3D::RenderDevice::setGlossyCoefficient(Color3)
     <LI> G3D::VAR::maxSize
     <LI> G3D::RenderDevice::enableTwoSidedLighting
     <LI> G3D::Surface::hasTransparency
     <LI> G3D::Surface::sort
     <LI> G3D::RenderDevice::renderMode
     <LI> G3D::MeshAlg::computeNormals(geometry, indexArray);
     <LI> contrib/ArticulatedModel (beta 3DS support)
     <LI> G3D::RenderDevice::swapBuffersAutomatically allows caller to suppress page flip.
     <LI> Added coordinate system documentation.
     <LI> RenderDevice::enableClip2D, RenderDevice::disableClip2D (scissor region)
     <LI> contrib/wxGWindow is stable and full featured-- use wxWidgets 2.5.3 with G3D!
     <LI> G3D::fileIsNewer
     <LI> G3D::isDirectory
     <LI> G3D::filenameContainsWildcards
     <LI> G3D::filenamePath
     <LI> G3D::Draw::lineSegment now accepts a scale (allowing arrows and axes to thicken appropriately)
     <LI> G3D::Rect2D::largestCenteredSubRect
     <LI> G3D::Matrix4::serialize, G3D::Matrix4::deserialize
     <LI> glTexImage3DEXT
     <LI> Removed glut.lib and glut.dll from the win32-lib directory.
     <LI> G3D::writeStringToFile, G3D::TextOutput, and G3D::BinaryOutput now flush by default (safe, not fast).
     <LI> Shifted push2D by 0.375 pixels as recommended in the OpenGL guide to bias integer coords towards pixel centers
     <LI> G3D::Draw::rect2DBorder
     <LI> G3D::Rect2D::border
     <LI> G3D::RenderDevice now creates a G3D::Win32Window on Windows instead of a G3D::SDLWindow.  SDLWindow is now
          deprecated on Windows.
     <LI> G3D::VARArea now updates allocation sizes instead of G3D::VAR internally.  Added
          more accessor methods to VARArea to futher remove VAR from VARArea internals. [Corey]
     <LI> VARSystem.cpp moved to VARArea.cpp - filename change only! [Corey]
     <LI> Linux build system updated:
          Builds only static libraries, Does not require libtool/libtoolize anymore,
          Does not check for or require libraries that normally linked with the .so files,
          Automatically builds Test project with iCompile during install. [Corey]
     <LI> G3D::Quat::deserialize, G3D::Quat::serialize
     <LI> G3D::PhysicsFrame::deserialize, G3D::PhysicsFrame::serialize
     <LI> G3D::TextInput::Options::singleQuotedStrings (defaults to true, changing the behavior
	      from previous versions).
	 <LI> G3D::Token::extendedType returns information disambiguating characters and strings
	      and floats and ints.
     <LI> Added data/ah64-body and ah64-rotor
     <LI> samples/Network_Demo now uses a helicopter model instead of a plane
     <LI> G3D::VARArea::openGLVertexBufferObject and G3D::VARArea::openGLBasePointer for breaking
          the VARArea abstraction.
     <LI> GLG3D.h no longer links against SDLMain.lib on Windows if _CONSOLE is defined
          (since console programs have no WinMain).
     <LI> SDL's redefinition of main is cleared when not linking sdlmain.lib [Corey]
     <LI> Moved contrib/Win32Window to G3D::Win32Window
     <LI> G3D::TextInput::readSymbols
     <LI> contrib/Image [Morgan]
     <LI> contrib/wxGWindow [Morgan]
     <LI> Added support for full-screen antialiasing to contrib/Win32Window
     <LI> Added joystick support to contrib/Win32Window [Corey]
     <LI> Win32Window fully-implements OSWindow [Corey]
     <LI> Texture now supports DDS(2D/CubeMap) and PNG files [Corey]
     <LI> Added Win32 pbuffer routines (no G3D wrapper, though-- we're waiting for the new ARB API).
     <LI> G3D::Surface::texCoords
     <LI> G3D::IFSModel now loads IFS 1.1 [Peter]
     <LI> G3D::IFSModel now loads and saves PLY2 files (plain text IFS format) [Peter]
     <LI> Automatically switch to glCompressedTexImage2D in G3D::Texture::fromMemory [Corey]
     <LI> Added G3D::Sky::fromCubeMap for preloaded CubeMap shared_ptr<Texture>'s [Corey]
     <LI> Added G3D::Sky::fromFile and deprecated Sky::create [Corey]
     <LI> Demo and Test projects now build with iCompile, which is included [Corey]
     <LI> Fix: TextOutput::writeString now escapes special characters
     <LI> Fix: AABSPTree::serializeStructure
     <LI> Fix: Properly handle gl_ uniforms on Radeon for OldShader
     <LI> Fix: [ 875467 ] OS X debugBreak (requires default XCode debug menu item 'Break on DebugStr()') [Corey + Derek]
     <LI> Fix: Can make a G3D::Texture::fromGImage with one channel (defaults to L8 format)
     <LI> Fix: [ 1149972 ] 6.05: Make Sky render correctly on low-end cards (no Cube mapping) [Corey]
     <LI> Fix: [ 1032742 ] OS X _DEBUG not defined [Derek]
     <LI> Fix: 16-bit integer reads in BinaryInput that always reversed endianness. (OSX file reading) [Corey + Derek]
     <LI> Fix: Matrix4 operator[] was returning a matrix value cast to a pointer [Corey]
     <LI> Fix: Matrix3 and Matrix4 had missing float* / const float* operators [Corey]
     <LI> Fix: Rect2D::clip broken for types other than Vector2
     <LI> Fix: RenderDevice::configureShadowMap result depends on objectToWorldMatrix
     <LI> Fix: [ 1150650 ] DebugBreak() undefined
     <LI> Fix: [ 1111534 ] Network Demo crashes starting 2nd server on same machine
     <LI> Fix: [ 1102091 ] ReliableConduit::receive times out
     <LI> Fix: Implemented MD2Model::objectSpaceBoundingX methods.
     <LI> Fix: G3D::Triangle::area is now zero for zero-area triangles (was inf)
     <LI> Fix: AABSPTree with extent on MSVC 6 no longer enters infinite loop in std::sort
     <LI> Fix: [ 1105641 ] Does not build with g++ 3.4.x [Corey]
     <LI> Fix: [ 1103619 ] RenderDevice::countPrimitive is wrong (changed to RenderDevice::countTriangles) [Corey]
     <LI> Fix: AABSPTree::BoxIntersectionIterator doesn't compile
     <LI> Fix: [ 1101680 ] copyfile won't overwrite (on Windows now overwrites) [Corey]
     <LI> Fix: [ 1101646 ] Camera::frustum incorrect for non-square viewport
     <LI> Fix: Ultra bright lens flare at sunset [Nicholas Bray]
     <LI> Fix: IP address strings were reversed by NetAddress(std::string)
     <LI> Fix: TextInput now returns end of file token for files without trailing whitespace
     <LI> Fix: [ 1094166 ] 6.05: Release mouse stuck on x-axis [Corey + Morgan]
     <LI> Fix: Recognize buggy ATI Radeon Mobility cube maps and work around
     <LI> Fix: Textures now initialize without setting error bit on cards without GL_ARB_shadow
     <LI> Fix: filenameBaseExt now operates correctly on strings with both \ and / slashes.
     <LI> Fix: [ 1062659 ] BinaryInput::BinaryInput() memory leak
     <LI> Fix: Removed RenderDevice::polygonCount, which was never used.
     <LI> Fix: TextInput::readNumber no longer accepts double preceeding +/- on numbers when Options::signedNumbers is true
     <LI> Fix: [ 1038733 ] OSWindow cannot set icon properly [Corey]
     <LI> Fix: [ 939400 ] Linux mouse set position (Wild camera swinging on startup) [Corey]
     <LI> Fix: [ 1042591 ] Software GL Causes Assertion [Corey]
     <LI> Fix: [ 1036634 ] debugAssert doesn't work on MSVC 7 [Corey]
     <LI> Fix: [ 1049024 ] Fix compile warnings from gcc/Linux build [Corey]
     <LI> Fix: [ 1051272 ] Win32Window doesn't use GWindowSettings properly. [Corey]
     <LI> Fix: Win32Window clips the proper cursor region during input capture. [Corey]
     <LI> Fix: GWindows now center and maximize on the primary monitor for Windows.
     <LI> Fix: [ 1052945 ] TextOutput wordWrap starts on newlines
     <LI> Fix: [ 1050957 ] TextInput readNumber support for capital 'E' numbers.
     <LI> Fix: [ 1049674 ] TextInput failes on X. numbers.
     <LI> Fix: [ 1044028 ] Linux TextOutput Warning
     <LI> Fix: [ 1032750 ] Grayscale JPG errors [Corey]
     <LI> Fix: [ 1036225 ] Encode TGA support strips alpha channel [Corey]
     <LI> Fix: [ 1038631 ] CoordinateFrame::slerp (Quat::slerp has fix) [Corey]
     <LI> Fix: [ 1033686 ] GImage::GImage(filename) dies on certain (BMP) images [Corey]
     <LI> Fix: Texture mapping modes for pre-OpenGL 1.3 cards [Dan & Morgan]
   </UL>

<hr>
   <P>
   Changes in 6.04:
   <UL>
     <LI> G3D Manual! [ Morgan and Sascha ]
     <LI> Initial MSVC7 build script.  MSVC7 is not an officially supported platform
          however the release contains MSVC7 precompiled binaries and the build script
          will automatically build on both 6 and 7.
     <LI> Improved performance of G3D::writeStringToFile
     <LI> G3D::shared_ptr assignment now allows compile time subtyping
     <LI> G3D::shared_ptr != operator
     <LI> G3D::shared_ptr::notNull
     <LI> G3D::Light::directional now normalizes the light vector
     <LI> G3D::setAssertionHook
     <LI> [ 1029256 ] G3D::OldShader / G3D::ShaderObject define g3d_ uniforms inside shaders
     <LI> static G3D::IFSModel::save/load for writing/reading IFS files
     <LI> G3D::TextInput allows ' inside quoted strings
     <LI> G3D::TextInput allows \ as a symbol token
     <LI> G3D::TextInput supports an arbitrary comment character (e.g. '#')
     <LI> Precompiled binaries for VisualC++ 7 (.NET 2002/2003)
     <LI> VisualC++ 7 (.NET 2002/2003) supported by build script
	 <LI> Build now MOVEs binaries instead of COPYing them on Windows (allows
	      two compilers to output to the same location)
     <LI> G3D Guide overview documentation
     <LI> Changelog and Error FAQ moved under Doxygen
     <LI> Build scripts and documentation now under the 'doc' .dsp on Windows
     <LI> Textures now support a DepthReadMode that can be used to perform hardware
	     shadow map comparisions.  <B>RenderDevice::configureShadowMap now requires
		 an appropriately configured texture-- in previous releases it would
		 reconfigure the texture for you.</B>
     <LI> G3D::UserInput::keyReleased, G3D::UserInput::ReleasedKeys
     <LI> G3D::Array::randomElement
     <LI> G3D::Array::insert
     <LI> G3D::RenderDevice::getObjectToWorldMatrix and getCameraToWorldMatrix now return
          const CoordinateFrame&
	 <LI> Optimized G3D::Array::randomize
     <LI> G3D::cyclicCatmullRomSpline
     <LI> G3D::wrap
     <LI> contrib/AudioDevice
     <LI> G3D::System::time();
	 <LI> More precise System::sleep
     <LI> G3D::IFSModel::pose with no arguments
     <LI> G3D::AABSPTree::serializeStructure, deserializeStructure,
     <LI> serialize(Vector3::Axis, BinaryOutput), deserialize(Vector3::Axis, BinaryInput),
     <LI> "glslc" GLSL compiler in the tools directory for getting compile-time errors from shaders
     <LI> GLCaps::init now takes optional debug log
	 <LI> G3D::ShaderObject static constructors take optional 'debug' argument
     <LI> GWindowSettings::visible; Win32Window can now start invisible
     <LI> [ 991147 ] glBlendEquationEXT, RenderDevice::BlendEq, min, max, subtract, reverse subtract alpha blending
     <LI> [ 989785 ] Draw::rect2D
	 <LI> GLCaps::numTextureCoords, GLCaps::numTextureUnits, GLCaps::numTextures
	 <LI> GLCaps::G3D_MAX_TEXTURE_UNITS
     <LI> Rect2D::corner
     <LI> Camera::getFrustum, Camera::frustum, Camera::Frustum, Camera::Frustum::Face
     <LI> Plane constructor that accepts Vector4s (possibly at infinity)
     <LI> AABox::inf, AABox::zero, AABox::maxFinite
     <LI> AABox::intersects(Sphere)
     <LI> Vector3::minFinite, Vector3::maxFinite
	 <LI> Plane::halfSpaceContainsFinite
	 <LI> Plane::halfSpaceContains(Vector4)
     <LI> AABSPTree::getIntersectingMembers(Array<Plane>)
	 <LI> AABSPTree::getIntersectingMembers(Camera::Frustum) for view-frustum culling
	 <LI> AABSPTree::getIntersectingMembers(Sphere)
     <LI> AABox::split
     <LI> Extended AABox::culledBy, Box::culledBy, and Sphere::culledBy with extra
	        information for bounding volume hierarchies
     <LI> G3D::computeNormalMap
     <LI> Matrix3::fuzzyEq(Matrix3)
     <LI> Removed System::sleep(0.02) from GLG3D demo to give more accurate performance measure
     <LI> [ 965824 ] changed link library defaults
     <LI> serialize/deserialize for int, bool, double, float, std::string
     <LI> G3D::TextOutput
     <LI> [ 976924 ] Texture::texelWidth
     <LI> [ 973413 ] ShaderObject::ArgList::set can be called more than once per variable
     <LI> OSWindow::setIcon(std::string filename)
     <LI> Texture::fromMemory that takes a single image (instead of an array of images)
     <LI> [972604] RenderDevice::setTextureMatrix(uint, Matrix4)
     <LI> [972747] Rect2D::center
     <LI> GImage and Texture now load ICO files
	 <LI> GL_SAMPLER_1D_ARB, 2D, 3D, CUBE
	 <LI> Win32Window mouse events
	 <LI> Added normals to AABox collision results
     <LI> Fix: [ 1026534 ]various cast bugs using Ref types.
          Removed G3D::shared_ptr implicit cast to underlying pointer type
          This is technically an <B>incompatible change</B>, however we found no occurance
          in the library or demos using this that was not a bug!
     <LI> Fix: VAR constructor takes VARAreaRef instead of VARArea* <B>Incompatible change</B>
     <LI> Fix: ManualCameraController is prevented from looking precisely along the Y-axis, which would cause
	           a singularity.
	 <LI> Fix: Added '?' as a valid symbol Token
	 <LI> Fix: [ 946235 ] GFont::align right w/ fixed_spacing
	 <LI> Fix: [ 1001033 ] RenderDevice with 0 texture units
	 <LI> Fix: GLCaps:: ARB stencil two side -> EXT stencil two side (stencilled shadows were broken)
	 <LI> Fix: [ 993449 ] vsnprintf crashes MSVC 7
	 <LI> Fix: [ 991320 ] Pointer truncation Warnings
	 <LI> Fix: [ 981440 ] AUTO with Texture::fromMemory
	 <LI> Fix: Plane::halfSpaceContains now works for infinite and semi-infinite points
     <LI> Fix: [ 979032 ] Quat <-> Matrix3 roundtrip inverts
	 <LI> Fix: [ 976743 ] document GLCaps functions
	 <LI> Fix: [ 976746 ] \#include GLCaps in g3dall
	 <LI> Fix: [ 973550 ] sampler2DRect now supported in GLSL shaders (NVIDIA only; ATI drivers are broken)
	 <LI> Fix: [ 973490 ] Win32Window width/height off by non-client amount
     <LI> Fix: [ 961827 ] In debug mode, RenderDevice tries to access
	            GL_MAX_TEXTURE_IMAGE_UNITS_ARB and an assertion fails on cards that
				don't support it.
	 <LI> Fix: Texture binding for ShaderObject
   </UL>
<hr>
   <P>
   Changes in 6.03:
   <UL>
     <LI> Matrix4::approxCoordinateFrame
     <LI> Vector2(const Vector2int16&) [Giulio]
     <LI> RenderDevice::setObjectShader
     <LI> RenderDevice::setShaderObject
     <LI> G3D::RenderDevice supports "..._CURRENT" as an option for most settings
     <LI> inf -> inf(), nan -> nan(), NAN -> NAN()
	        <B>This is an incompatible change-- it was needed to fix a bug with the order
			   of initialization of globals</B>
     <LI> GImage::sizeInMemory
     <LI> Defined std::ostream << NetAddress, std::ostream << Vector3
     <LI> 'build doc' copies the contrib directory to the install directory
     <LI> LightweightConduit::PacketSizeException
     <LI> Quat::unitRandom() [Giulio]
     <LI> Color3::wheelRandom
     <LI> GImage::save and encode now const [Thanks Arni Mar Jonsson]
     <LI> LightweightConduit::send that accepts multiple destinations
	 <LI> ReliableConduit::multisend
     <LI> Moved IFSBuilder from demos to contrib
     <LI> LightweightConduit and ReliableConduit send/receive can now take references as well as pointers
     <LI> RenderDevice::clear() that takes no arguments
     <LI> RenderDevice::setShader
     <LI> G3D::GApp now catches ShaderGroup::ArgumentError exceptions
     <LI> System::operatingSystem() now includes a version number on Linux
     <LI> SDLWindow no longer initializes the audio system; use SDL_InitSubsytem if you need audio.
     <LI> Extended GLenumToString with GL_SHADER_OBJECTS_ARB types.
     <LI> NVIDIA p-buffer: GLX_SAMPLE_BUFFERS_ARB, GLX_SAMPLES_ARB, GLX_FLOAT_COMPONENTS_NV,
	      glXDestroyGLXPbufferSGIX, glXChooseFBConfigSGIX, glXCreateGLXPbufferSGIX,
	      glXCreateContextWithConfigSGIX, glXQueryGLXPbufferSGIX
     <LI> NVIDIA swap lock: glXJoinSwapGroupNV, glXBindSwapBarrierNV, glXQuerySwapGroupNV,
          glXQueryMaxSwapGroupsNV, glXQueryFrameCountNV, glXResetFrameCountNV
	 <LI> OSWindow::requiresMainLoop, OSWindow::runMainLoop (Beta)
     <LI> OSWindow::pollEvent, SDLWindow::pollEvent
     <LI> G3D::GApp accepts an optional OSWindow on construction
     <LI> G3D::ShaderObject, G3D::ObjectShader (Beta)
     <LI> Deprecated GPUProgram, VertexProgram, and PixelProgram (the OpenGL 1.5 shaders
	      follow a different paradigm than the OpenGL 1.3 ones, so the G3D API must change
		  to match it).
     <LI> Support for GL_ARB_vertex_shader, GL_ARB_fragment_shader, and GL_ARB_shader_objects
     <LI> G3D::drawFeatureEdges
     <LI> const Array<Vector3>& G3D::MD2Model::Surface::objectSpaceFaceNormals();
	 <LI> G3D::RenderDevice::sendSequentialIndices
     <LI> Network_Demo
     <LI> contrib/Win32Window
	 <LI> contrib/pingtest
     <LI> contrib/GlutWindow [Morgan and Dan Keefe]
	 <LI> contrib/ObjModel [Corey Taylor]
     <LI> G3D::GLCaps
	 <LI> GAppSettings::logFilename
	 <LI> Deprecated RenderDevice::suportsOpenGLExtension, RenderDevice::supportsImageFormat,
	      other supports shortcuts (use GLCaps instead).
	 <LI> DiscoveryClient::cleanup
	 <LI> Optimized BinaryInput::readUInt32, readUInt16
     <LI> Extended network documentation
     <LI> 'fastlib' build target for G3D library developers
	 <LI> glGetVector2, glGetVector3, glGetVector4
	 <LI> float * Quat (double * Quat already existed)
	 <LI> GApp automatically generates g3d-license.txt at runtime ([RFE#856338] CREDIT.TXT)
	 <LI> G3D::license
	 <LI> Removed several large files (tag, ppt, exe) from the source zipfile, bringing it down to 3 MB
     <LI> Improved CoordinateFrame:pointToObjectSpace() (RFE#715996) [Giulio]
     <LI> [RFE#945935] Make static constants into functions [Giulio]
     <LI> Fix: LightweightConduit::send verifies that the packet size is smaller than the UDP limit
	 <LI> Fix: Multitexture on ATI and Wildcat cards
	 <LI> Fix: Incorrect occlusion in GLG3D_Demo (was caused by global constant problem)
     <LI> Fix: [BUG#949377] Checks for stencil extensions [Giulio]
     <LI> Fix: [BUG#922725] Non-multitexture implementation for getTextureState() [Giulio]
	 <LI> Fix: Restore ambient light color after RenderDevice::popState
	 <LI> Fix: RenderDevice now initializes OpenGL extensions before testing for multitexture [Erik Cassel, Dan Keefe]
	 <LI> Fix: Bottom clipping plane of Camera frustum now correct (was slanted incorrectly, making frustum too big)
     <LI> Fix: GFont::draw2D now returns correct y value (used to be too small)
	 <LI> Fix: NetworkDevice now returns useful hostname on Linux (used to be "localhost")
	 <LI> Fix: The conduit returned from NetworkDevice::createReliableConduit now has ok() == false when connect fails
	 <LI> Fix: Tangent space computation of constant u, v now correct (was missing a factor of 2, leading to slight errors) [Max McGuire]
	 <LI> Fix: [ 925456 ] select broken on Linux (Networking was broken on Linux)
	 <LI> Fix: getDepthBufferValue off by 1 [Andi Fein]
   </UL>

<hr>
   <P>
   Changes in 6.02:
   <UL>
     <LI> Default constructor for Line.
     <LI> Various patches to make G3D work with the CAVE [Dan Keefe]
     <LI> AABox::set
     <LI> Made OSWindow::setPosition non-const
     <LI> VARArea now tests for the presence of all VBO extensions, on the freak chance that
	      a driver has only partial support (due to a bug)
     <LI> Linux build statically links OpenGL 1.2.1 and loads extensions through OpenGL 1.5
   	      to work around Wildcat Linux driver bug (Windows and Mac statically link OpenGL 1.1
		  and load extensions through OpenGL 1.5)
     <LI> Triangle stores precomputed edge lengths
     <LI> Ray-triangle with vertex weights
     <LI> Highly optimized ray-triangle intersection test [Tomas Moller & Ben Trumbore]
     <LI> Create a texture from 6 different cube-map filenames
     <LI> Added contrib directory built as part of the 'doc' target
	 <LI> contrib/CoreyGWindow: OSWindow implementations for various platforms
     <LI> AABSPSet::beginRayIntersection [Pete Hopkins]
     <LI> AABSPTree::beginBoxIntersection
     <LI> CollisionDetection::intersectionTimeForMovingPointFixedAABox, Ray::intersectionTime(AABox)
	 [Pierre Terdiman and Andrew Woo]
     <LI> Triangle::center
     <LI> Renamed KDTreeSet to AABSPTree, old name is \#defined
     <LI> RenderDevice now works on cards without multitexture
     <LI> void glTexCoord(const G3D::Vector4& t); [Dan Keefe]
	 <LI> Overloaded float, double, and int * Matrix3
     <LI> Fix: [ 923944 ] Matrix/Quat ambiguity
     <LI> Fix: fuzzyEq(inf, inf) is true
	 <LI> Fix: Triangle::randomPoint returns values outside the triangle
     <LI> Fix: [ 913763 ] tokenTypeToString(Token::END)
	 <LI> Fix: Compute number of texture coordinates before RenderDevice::setVideoMode [Dan Keefe]
     <LI> Changed the default depth bits to '0' for wider compatibility
	      (Fix: Unable to create OpenGL screen: Couldn't find matching GLX visual)
     <LI> Fix: [912305] Table, Queue, and Set assignment operators do not free old values
     <LI> Fix: Separate specular and Multisample on Tablet PC w/ Trident [Dan Keefe]
     <LI> Fix: Linux debug build now has line numbers
     <LI> Upgraded to SDL 1.2.7
	        Fix: [ 838030 ] SDL 1.2.6 blocks prompt
			Fix: FSAA does not work under SDL
			Fix: Default Win32 refresh rate
     <LI> Draw::vertexVectors
     <LI> New meshes from Brown University: hemisphere.ifs, curvy.ifs, head.ifs,
	       closed-low-poly-teapot.ifs, bump.ifs
     <LI> Light::specular
     <LI> SDLWindow::setWindowDimensions and setWindowPosition now work on Win32
     <LI> GWindowSettings::x, GWindowSettings::y, GWindowSettings::center
     <LI> System::setEnv
     <LI> [ 909999 ] OSWindow Joystick interface
     <LI> double * Quat ([ 909305 ] scalar * {quat, vector, matrix})
	 <LI> Increased the precision of several Vector2 and Vector3 methods
     <LI> MeshAlg::computeNormals now returns 0 instead of NaN for degenerate normals
     <LI> Updated main-no-GApp.cpp for 6.02
     <LI> RenderDevice::screenshotPic can copy from the back buffer
     <LI> Improved VAR documentation.
     <LI> If NO_SDL_MAIN is defined, G3D does not attempt to link against sdlmain.lib
     <LI> UserInput::setPureDeltaMouse
     <LI> UserInput::mouseXY, mouseX, mouseY
	 <LI> UserInput::mouseDXY
	 <LI> Deprecated UserInput keyMapping constructor argument
     <LI> RenderDevice::setDrawBuffer [Dan Keefe]
     <LI> GFont::draw3D [Dan Keefe]
     <LI> GImage::pixel3(x, y) and GImage::pixel4(x, y)
	 <LI> debugAssert, debugBreak, debugAssertM, etc. all release input grab
          when an assertion fails (Win32 and Linux) and restore it when the
          program continues (Win32).  This also fixes the DirectInput laggy
          cursor that occurs after a break.
   </UL>

<hr>
   <P>
   Changes in 6.01:
   <UL>
     <LI> Default constructor for G3D::LineSegment
     <LI> Rect2D::clipPoly (Pete & Morgan)
	 <LI> Draw::poly2D, Draw::poly2DOutline (Pete & Morgan)
	 <LI> Added instructions for rotated text to G3D::GFont::draw2D
	 <LI> Fix: iRandom now compiles correctly under gcc.
     <LI> Fix: [ 852076 ] Compute better/faster vertex normals in MeshAlg
	      MeshAlg::computeNormals now weighs adjacent faces by their area
     <LI> Fix: [ 896028 ] Textures broken on Trident TabletPC (Dan Keefe)
	 <LI> Fix: [ 860800 ] ManualCameraController cursor jumps
     <LI> Fix: G3D::UserInput no longer offsets the mouse position by 1/2 pixel
     <LI> Fix: Alt-Tab no longer toggles the GApp camera before switching windows
     <LI> Fix: [ 901248 ] Font bounds y-value incorrect
	 <LI> Fix: G3D::PhysicsFrame::toCoordinateFrame() was rotated by 90 degrees
     <LI> Fix: [ 895493 ] Radeon 7500 Cube Map
	 <LI> Fix: G3D::MeshAlg::computeWeld produces linker errors on Linux
     <LI> G3D::TextInput::peekLineNumber(), G3D::TextInput::peekCharacterNumber()
     <LI> G3D::GAppSettings::dataDir
     <LI> html/gettingstarted.html
     <LI> G3D::MeshAlg::debugCheckConsistency
     <LI> G3D::MD2Model and G3D::IFSModel now weld their adjacency information
     <LI> Renamed/retyped G3D::Surface::adjacentFaces to G3D::Surface::vertices
	   (most programs can be fixed by changing the type from Array< Array<int> > to
	   Array<MeshAlg::Vertex> and adjacentVertexArray[v] to vertexArray[v].faceIndex)
	 <LI> Shadow volumes now use the welded adjacency information
	 <LI> G3D::Surface now offers both welded and non-welded adjacency information
     <LI> G3D::contains for C-Arrays
     <LI> Generate .tag files in the build
     <LI> G3D::MeshAlg::computeAdjacency does not merge colocated vertices
     <LI> G3D::MeshAlg::computeAdjacency does not remove degenerate faces and edges
     <LI> G3D::MeshAlg::Vertex
     <LI> G3D::Vector3::directionOrZero
     <LI> G3D::GMaterial
     <LI> ManualCameraController renamed to G3D::FPCameraController
     <LI> glGetCurrentContext (beta)
     <LI> G3D::RenderDevice::supportsImageFormat
     <LI> G3D::Vector3::magnitude
     <LI> G3D::Vector3::cross() [returns Matrix3]
     <LI> G3D::Quat changes (API is still in beta)
	 <LI> G3D::Quat::norm now returns the 2-norm, not the function Dave Eberly uses.
     <LI> Matrix3 default constructor
     <LI> Switched UserInput to use SDLWindow internally
	 <LI> Switched RenderDevice to use SDLWindow internally
	 <LI> G3D::Window
	 <LI> G3D::SDLWindow
     <LI> Renamed G3D::RenderDeviceSettings to G3D::WindowSettings (with a typedef for the old name)
     <LI> IFSModel now loads models with up to 10 million polygons (like the buddha).
	 <LI> Internal G3D::KDTreeSet state now private.
   </UL>

<hr>
   <P>
   Changes in 6.00:
   <UL>
     <LI> FIX: warning: passing `double' for argument 1 of `void G3D::Queue<T>::repackAndRealloc(int)'
     <LI> Optimized static Matrix3::transpose (36 cycle) and
	      Matrix3::mul (52 cycle) variations.
     <LI> Changed some lerp arguments from float to double
	 <LI> MeshAlg::computeTangentSpaceBasis
	 <LI> Draw::axes now uses scale to compute axis length
     <LI> New ParallaxBump demo
     <LI> Changed several Vector3 return values from float to double
     <LI> Real-world stars, sun, and moon path (Nick Musurca)
     <LI> Now compiles under MSVC++ 7.0 (David Baszucki)
	 <LI> Now compiles under g++ OS/X (Ben Landon)
     <LI> Changed the default RenderDeviceSettings::alphaBits to 0 in the hope that it
	      will work with more graphics cards.
     <LI> Matrix3::fromX methods became factory methods
     <LI> G3D::sinc
     <LI> Multi-platform lib directories
     <LI> Vector3::average(), Color3::average(), Vector3::sum(), Color3::sum()
     <LI> Ray::reflect, Ray::refract
     <LI> Physically correct sky model
     <LI> FIX: Older graphics cards can now initialize properly
     <LI> Increased fuzzyEpsilon to 0.000001
     <LI> Color3::max, Color3::min, Color4::max, Color4::min
     <LI> Array::sortSubArray
     <LI> Camera::getClipPlanes now takes a G3D::Array
     <LI> G3D::AABox
     <LI> Box::randomInteriorPoint, Box::randomSurfacePoint
     <LI> Vector3::cosRandom, Vector3::hemiRandom, Vector3::reflectAbout, Vector3::reflectionDirection, Vector3::refractionDirection
     <LI> log(Color3)
     <LI> Upgraded to zlib 1.2.1
     <LI> VAR::valid (Peter)
     <LI> System::getLocalTime, System::getTicks
	 <LI> High-performance cycle count and time queries on Linux
     <LI> UserInput::anyKeyPressed
     <LI> G3D::Box now provides axes, center, and extent information
	        (serialization is backwards compatible to 5.xx)
     <LI> TextInput's exceptions now provide file, line, and character numbers
	      as well as preformatted error messages in the style of MSVC++.
     <LI> G3D::Texture::fromGImage
     <LI> G3D::TextInput now parses hex numbers of the form 0x#####
     <LI> G3D::CollisionDetection::penetrationDepthForFixedSphereFixedPlane
	 <LI> G3D::CollisionDetection::penetrationDepthForFixedSphereFixedBox
     <LI> G3D::beginMarkShadows, G3D::endMarkShadows, G3D::markShadows
     <LI> GFont::draw2D now returns the string bounds
     <LI> Sphere::surfaceArea, Sphere::volume, Box::surfaceArea, Box::volume
     <LI> Two-sided stencil operations
     <LI> Removed G3D::Real
     <LI> FIX: [ 855947 ] Fonts are broken on Radeon
     <LI> Switched vertex arrays to use the new ARB_vertex_buffer_object extension.
	      Compared to 5.xx rendering speed: NVIDIA/Win32 is the same (fast),
		  ATI and Linux rendering are about 10x faster.  The API has changed
		  slightly-- most significant, the vertex, normal, color, etc. arrays
		  must all come from the same VARArea now.
     <LI> Disabled the "conditional is constant" level 4 warning on Windows
	      that is triggered by the for-loop scoping fix.
     <LI> G3D::SkyParameters::directionalLight
     <LI> G3D::TextureManager (Peter S. & Morgan)
     <LI> Flipped skybox X-axis to match OpenGL cube map coordinates
     <LI> Texture now uses hardware MIP-map generation
     <LI> Texture::copyFromScreen for cube map faces
     <LI> RenderDevice::configureReflectionMap
     <LI> RenderDevice::configureShadowMap
     <LI> Renamed CFont to GFont
     <LI> Renamed CImage to GImage
	 <LI> G3D::Matrix3::getRow
	 <LI> Added optional argument drawCelestialBodies to Sky::create.
     <LI> RenderDevice::getTextureMatrix
     <LI> Depth Textures
	 <LI> Texture::createEmpty
	 <LI> RenderDevice::setViewport has flipped the y-axis since version 5.00
     <LI> shared_ptr::unique
     <LI> Support for textures beyond the number of texture units (which occurs on NVIDIA cards)
     <LI> G3D::Surface
	 <LI> G3D::IFSModel
     <LI> G3D::CoordinateFrame::normalToObjectSpace, G3D::CoordinateFrame::normalToWorldSpace
     <LI> Simplified arguments on Texture::copyFromScreen
     <LI> Moved Camera in GLG3D to Camera in G3D
     <LI> Moved setProjectionAndCameraMatrix from Camera to RenderDevice
     <LI> Moved G3D::Rect2D to G3D from GLG3D, changed interface
     <LI> G3D::setRenderMode
     <LI> G3D::RenderDevice::setGlossyCoefficient, G3D::RenderDevice::setShininess
     <LI> G3D::Light
	 <LI> Renamed G3D::RenderDevice::configureDirectionalLight, configurePointLight to G3D::RenderDevice::setLight
     <LI> Changed G3D::Rect2D to use doubles
     <LI> G3D::Camera::setPosition()
     <LI> G3D::Camera::lookAt()
	 <LI> G3D::ManualCameraController::setPosition()
     <LI> G3D::System::getTick, G3D::System::getLocalTime
     <LI> Fixed [ 839618 ] peak var only updated on reset()
     <LI> G3D::Array::findIndex (thanks to David Baszucki for the suggestion)
     <LI> Removed RenderDevice::setProjectionMatrix3D and RenderDevice::setProjectionMatrix2D
     <LI> RenderDevice::project
     <LI> RenderDevice::push2D() now uses the current viewport instead of full screen by default
     <LI> RenderDevice::getViewport
     <LI> G3D::SimTime
     <LI> Sky::render no longer needs a camera matrix (it gets it from the render device)
     <LI> SkyRef, Sky::create()
     <LI> Removed Sky::getName
     <LI> Removed RenderDevice::setAmbientLightLevel (duplicated RenderDevice::setAmbientLightColor)
     <LI> G3D::GApp, G3D::GApplet, G3D::GAppSettings
     <LI> RenderDevice::getCardDescription
     <LI> GPUProgram interface for setting program constants [Peter, Morgan & Dan]
     <LI> RenderDevice::getModelViewMatrix
     <LI> RenderDevice::getModelViewProjectionMatrix
     <LI> RenderDevice::getProjectionMatrix
     <LI> Documented some more common compiler errors.
     <LI> Moved RenderDevice::debugDraw methods to the Draw class, changed rendering from
	      cylinders to lines for wireframe (for performance)
     <LI> Ray::direction no longer has unit length
     <LI> Line::point, Line::direction
	 <LI> LineSegment::endPoint
     <LI> IFSBuilder loads Brown University Sketch Model (sm) format
	 <LI> New IFS models: angel, distributor-cap, dragon2, duck, elephant, hippo, hub, mech-part, rotor, sandal, trumpet, venus-torso, woman
     <LI> RenderDevices are now optionally resizable
     <LI> MeshAlg::computeWeld
     <LI> Array::randomize
     <LI> Table now refuses to push the load factor above 19/20 and stops rehashing
	 <LI> Table always keeps an odd number of buckets
     <LI> Sphere::randomInteriorPoint, Sphere::randomSurfacePoint
	 <LI> LineSegment::randomPoint
	 <LI> Hardcoded some common paths into demoFindData
     <LI> Deprecated old RenderDevice::init method.
     <LI> Full screen anti-aliasing (FSAA)
     <LI> G3D::RenderDeviceSettings
     <LI> All 2, 3, and 4 character swizzles for Vector2, Vector3, Vector4 are defined.
     <LI> G3D::rsqrt
     <LI> Most vector methods are also defined as functions now
	 <LI> sign(Vector2), sign(Vector3), sign(Vector4)
	 <LI> G3D::Matrix4
     <LI> Changed G3D_VER from double to integer
     <LI> G3D::lerp
     <LI> Changed G3D::PI, G3D::HALF_PI, and G3D::TWO_PI to \#defines
     <LI> Vector2::clamp, Vector3::clamp, Vector4::clamp
     <LI> Changed order of arguments to all lerp methods to match DirectX/Cg
	 <LI> Changed order of arguments to G3D::clamp and G3D::iClamp to match DirectX/Cg
     <LI> G3D::ManualCameraController::ManualCameraController now requires a G3D::UserInput
	 <LI> G3D::UserInput::appHasFocus
     <LI> G3D::ManualCameraController now stops tracking the mouse when the app loses focus
     <LI> G3D::ManualCameraController::setActive
	 <LI> G3D::ManualCameraController now manages the mouse cursor instead of G3D::RenderDevice
	 <LI> G3D::UserInput::getMouseXY, G3D::UserInput::getXY
     <LI> RenderDevice::debugDrawVertexNormals
     <LI> GPUProgram, VertexProgram, and PixelProgram now recognize the output of the
	      Cg compiler and automatically bind constants.
     <LI> RenderDevice now loads glActiveStencilFaceEXT
     <LI> RenderDevice::numTextureCoords
     <LI> Moved changelog to a separate page
	 <LI> Reformatted overview to be smaller
     <LI> Added model debugging info to the IFSBuilder display
     <LI> Welded some broken vertices in the teapot.ifs file
     <LI> Renamed Font.* to CFont.*
     <LI> CFont::draw2DString renamed to CFont::draw2D (use a \#define to port old code)
     <LI> MeshAlg
     <LI> RenderDevice now enables GL_COLOR_MATERIAL by default
     <LI> msgBox
     <LI> MD2 model gallery in documentation (Kevin)
     <LI> MD2Documentor (Kevin)
     <LI> debugAssertGLOk macro
     <LI> VertexProgram now supports NVIDIA Vertex Program 2.0
     <LI> RenderDevice now loads glGenProgramsNV, glDeleteProgramsNV, glBindProgramNV, glLoadProgramNV, glTrackMatrixNV, glProgramParameter4fvNV, glGetProgramParameterfvNV, glGetProgramParameterdvNV extensions
     <LI> VertexProgram and PixelProgram static factory methods now return reference counted values.
     <LI> Split the reference value from RenderDevice::setStencilTest into setStencilConstant
     <LI> RenderDevice::STENCIL_INVERT, RenderDevice::STENCIL_REPLACE, RenderDevice::STENCIL_ZERO
     <LI> Added brighten argument to Texture::fromFile
     <LI> Increased CImage JPEG save quality
     <LI> RenderDevice::screenshot now returns the name of the file that was written
     <LI> nextPowerOf2 renamed to ceilPow2
     <LI> System::alignedMalloc, System::alignedFree
     <LI> Carbon, Crackman, Edenmill, Futurist, Interplanetary,
          Iomanoid, Starlight, Lesser, and Wild fonts by Ray Larabie.
          Like all of our fonts, they are free, but please consider a
          donation to him if you like them.  http://www.larabiefonts.com/
     <LI> MD2Model_Demo
     <LI> G3D::MD2Model
     <LI> FIX: Fixed a bug in Array shrinking that could cause memory corruption
     <LI> FIX: RenderDevice windows with an aspect ratio of less than 1 now allowed.
     <LI> FIX: TextInput now parses '#', '~', '~=', '&', '&&', '|', '||' correctly
     <LI> VARArea::reset() now waits for rendering calls using its vertex
          arrays to complete before wiping the memory.
     <LI> G3D::filenameBaseExt, G3D::filenameExt
     <LI> VARArea::finish()
     <LI> Milestone
	 <LI> TextInput::Options::signedNumbers
     <LI> RenderDevice now loads glFlushVertexArrayRangeNV
     <LI> Vector2int16
     <LI> RenderDevice::freeVARSize()
     <LI> Array now allocates 16-byte aligned pointers.
     <LI> Decreased the default camera movement rate by 50% for better resolution.
     <LI> RenderDevice enables GL_NORMALIZE by default
     <LI> Improved the performance of Array::append/Array::push/Array::next
	 <LI> Fix: [ 875219 ] Array::sort must use std::sort
     <LI> Array::next
     <LI> Array::reverse
     <LI> PCX file loading
     <LI> Test images
     <LI> Color3uint8 as uint8[] addressing
     <LI> Color4uint8 as uint8[] addressing
     <LI> Removed const from VAR::pointer
     <LI> shared_ptr::isNull
     <LI> alwaysAssertM
     <LI> Log::common, Log::getCommonLogFilename
     <LI> Switched from static to dynamic linking of zlib
     <LI> Upgraded to zlib 1.1.3
     <LI> On Win32 the lib list is automatically updated through pragmas
          (5.xx programs should revert to linking against default libraries)
     <LI> Increased default sky quality to 1.00
     <LI> G3D::CFontRef
     <LI> RenderDevice now loads all register combiner extensions (NVIDIA only)
     <LI> Sky::getEnvironmentMap
     <LI> Sky implementation now uses a cube map (when one is available)
     <LI> G3D::Sky constructor now takes a render device
     <LI> Rotated Sky box 90 degrees to match environment maps
     <LI> G3D::Sky now takes the environment filenames as "sky_*.jpg" instead of "sky_ft.jpg"
     <LI> Added default filename for Sky constructor
     <LI> Added caustics textures created with Kjell Andersson's generator http://www.lysator.liu.se/~kand/caustics/
     <LI> \#defined "for" under MSVC so that it obeys C99 scoping rules
     <LI> System::consoleKeyPressed
     <LI> System::consoleClearScreen
     <LI> System::consoleReadKey
     <LI> NetMessage::type()
     <LI> Changed the Conduit message protocol to include a message type.
          The API is backwards compatible to 5.01 even though the protocol is not.
     <LI> Removed optional argument maxSize from LightweightConduit::receive.
     <LI> NetAddress::serialize
     <LI> NetAddress::deserialize
     <LI> NetAddress == NetAddress
     <LI> hashCode(NetAddress)
     <LI> RenderDevice::init now prints ATI or NVIDIA driver version to the log under Windows
     <LI> readme.html library build instructions now have downloads for required libraries
     <LI> Library list has changed for Win32 (added version.lib)
     <LI> System::cpuArchitecture
     <LI> System::operatingSystem
     <LI> double-precision Plane::getEquation
     <LI> Vector2::lerp
     <LI> Platform specific \#defines G3D_WINDOWS, G3D_LINUX, G3D_OSX
     <LI> G3D::Array::contains
     <LI> G3D::Queue::contains
     <LI> G3D::ImageFormat
     <LI> G3D::Texture::DIM_CUBE_MAP
     <LI> G3D::Texture resizes non-power of two textures
     <LI> G3D::Texture constructors are completely changed from 5.01 (and hopefully easier to use)
     <LI> G3D::CImage now supports images with alpha
     <LI> Removed most of the width/height arguments from G3D::Camera methods
     <LI> BinaryInput::readBytes and BinaryOutput::writeBytes now take void* as an argument to avoid casting
     <LI> Plane::fromEquation
     <LI> Removed Plane::getNormal (use Plane::normal instead)
     <LI> Removed CDTriangle (use G3D::Triangle instead)
     <LI> Removed Font (use G3D::CFont instead)
     <LI> FIX: Camera::getClipPlanes now transforms infinite planes correctly.
     <LI> FIX: The last reference of an RGC pointer assigned to itself no
               longer tries to collect before re-assigning
   </UL>

<hr>
   <P>
   Changes in 5.01
   <UL>
     <LI> G3D::tesselateComplexPolygon
	 <LI> G3D::ConvexPolygon
	 <LI> G3D::ConvexPolyhedron
     <LI> G3D::iClamp, G3D::clamp
	 <LI> G3D::iWrap
	 <LI> G3D::iRandom, G3D::random
     <LI> G3D::getFiles
     <LI> G3D::getDirs
     <LI> G3D::VAR::pointer
     <LI> G3D::realWorldLocalTime
     <LI> G3D::Texture::TRANSPARENT_BORDER
     <LI> DECLARE_GLFORMATOF
     <LI> G3D::System::machineEndian
     <LI> G3D::VertexProgram, G3D::VertexProgramRef, G3D::RenderDevice::setVertexProgram
     <LI> G3D::PixelProgram, G3D::PixelProgramRef, G3D::RenderDevice::setPixelProgram
     <LI> G3D::GPUProgram, G3D::GPUProgramRef
     <LI> G3D::sizeOfGLFormat
     <LI> G3D::RenderDevice::setVertexAttrib
     <LI> G3D::Vector2*=Vector2, /= Vector2, * Vector2, / Vector2
     <LI> glFormatOf
     <LI> G3D::Color4uint8
     <LI> G3D::Color3uint8
     <LI> G3D::Vector3int16
     <LI> G3D::System::currentProgramFilename
     <LI> CImage::insertRedAsAlpha
     <LI> CImage::stripAlpha
     <LI> Texture::hasAlpha
     <LI> Added support for TGA with alpha channel
     <LI> Re-implemented Texture to support a broader range of formats and cleaner implementation.
     <LI> Fix: Improved Texture::LUMINANCE support
     <LI> Added == and != overloads for shared_ptr<Texture> so that "a != NULL" is now legal and does not require a cast to shared_ptr<Texture>.
     <LI> G3D::CFont is a typedef for G3D::Font to avoid name conflicts with X11 Font under Linux.  In future releases, the name Font will be deprecated.
     <LI> RenderDevice::setPointSize
	 <LI> Added a new teapot (teapot.ifs) that is closed, with a properly fitting top.  The classic teapot is now called "utah-teapot.ifs" (Sebastian Schuberth and Simon Winkelbach)
     <LI> RenderDevice::init now loads glPointParameterfvARB, glPointParameterfARB,
        glMultiDrawArraysEXT, and glMultiDrawElementsEXT functions.
     <LI> GLenumToString(4) now returns "GL_TRIANGLES" instead of "GL_LINE_BIT" (both are correct)
     <LI> Added TextInput::Options to optionally allow C++ comments to
          be treated as two slashes instead of a comment
     <LI> Added data/image/meter.jpg, a meter stick texture convenient for testing
     <LI> Added sansserif, news, and terminal fonts based on Bitstream's <A HREF="http://www.gnome.org/fonts/">free fonts</A>
     <LI> RenderDevice::numTextureUnits
     <LI> Added stars to night Sky
     <LI> Added classic GL dinosaur model as data/ifs/dinosaur.ifs
     <LI> Documented G3D::glGetProcAddress
     <LI> Fix: Texture now restored GL_ENABLE bits properly after creation
     <LI> Fix: Texture::sizeInMemory now accounts for MIP-map levels
     <LI> Fix: Fonts and skies now adjust their brightness for the screen gamma level
     <LI> Fix: Strange compilation bug was causing Sky to be black for some programs
     <LI> resolveFilename
     <LI> GLProgram_Demo to show how to use vertex programs in G3D
     <LI> Support for GL_ARB_vertex_program
     <LI> Modified ManualCameraController so that diagonal movement does not exceed
          maximum rate.
     <LI> Added support for non-GL_FLOAT vertex arrays to RenderDevice
     <LI> Added support for Wavefront OBJ files to IFSBuilder
     <LI> Removed duplicate copies of SDL.dll from the source tree
     <LI> Renamed G3D::CDTriangle to G3D::Triangle
     <LI> Added several G3D::Triangle methods
     <LI> Moved CollisionDetection::primaryAxis to Vector3::primaryAxis
     <LI> Fix: Texture::sizeInMemory now returns correct results for RGB8 textures.
     <LI> Changed texture constructors in ways that slightly break backwards compatibility
     <LI> Deprecated several arguments to the texture constructors.
   </UL>

<hr>
   Changes in 5.00
   <UL>
     <LI> Color3::operator*=(const Color3&)
     <LI> Color3::operator*(const Color3&)
     <LI> Eliminated duplicate GL headers [James O'Sullivan]
     <LI> Linux Makefiles [James O'Sullivan, Jordan Parker]
     <LI> RenderDevice::getProjectionMatrixParams
     <LI> RenderDevice::debugDrawCylinder
     <LI> Added an option to not copy input memory for BinaryInput
     <LI> Added data/ifs/sphere.ifs
     <LI> Added data/ifs/spikeball.ifs
     <LI> Added a new (imperfect) demo/tool that converts 3DS and MD2 to IFS.
     <LI> Added RenderDevice to the Font constructor
     <LI> Removed RenderDevice from Font::drawString
     <LI> Included glut32.lib, .dll, and .h (Version 3.7.6) in the distribution.
          The windows glut port is by Nate Robbins and is from
          http://www.xmission.com/~nate/glut.html.
          glut was originally written by Mark Kilgard.
     <LI> Modified OpenGL headers to work cross platform, with the latest NVIDIA extensions
     <LI> Changed library name from graphics3D.lib to G3D.lib, same for
          debug version.
     <LI> Changed directory structure and added readme.html to explain
          the new setup.
     <LI> Changed BinaryInput::readBytes to allow reading onto the stack
     <LI> Added Vector4::isFinite
     <LI> G3D::CDTriangle (for 35% faster collision detection)
     <LI> CollisionDetection::closestPointToRectangle
     <LI> CollisionDetection::movingSpherePassesThroughFixedBox
     <LI> CollisionDetection::movingSpherePassesThroughFixedSphere
     <LI> Changed CollisionDetection::movingXFixedTriangle arguments
     <LI> CollisionDetection::collisionTimeForMovingSphereFixedSphere
     <LI> Changed CollisionDetection::distanceToX methods to closestPointToX
     <LI> Vector3::NAN3
     <LI> Made Vector3::isUnit fuzzy
     <LI> Made Vector3::isZero fuzzy
     <LI> Fix: Texture(std::string, std::string) constructor now works for alpha-only textures.
     <LI> FIX: Array now calls copy constructor when resizing
     <LI> FIX: Triangle-sphere and rectangle-sphere collision detection
              returned an incorrect collision location; now fixed.
     <LI> FIX: changed VectorX::isFinite to call isFinite (used to give bad result for NaNs)
     <LI> FIX: Used the normalized edge to compute intersection in
            CollisionDetection::distanceToTrianglePerimeter
     <LI> FIX: Changed the order of corners returned from Box::getFaceCorners so the
	      face is ccw, facing out
     <LI> FIX: ManualCameraController::lookAt now faces along the -z axis.
     <LI> FIX: data/ifs/icosa.ifs model is now an icosahedron
     <LI> Made Set::begin() and Set::end() const
     <LI> Added ifdef _WIN32 all over for typedefing types from Windows to Linux and vice versa.
     <LI> G3D::isNaN, G3D::isFinite
     <LI> Added a single triangle triangle.ifs file
     <LI> G3D::LineSegment
     <LI> RenderDevice::debugDrawRay
     <LI> CoordinateFrame::toObjectSpace(Ray&)
     <LI> CoordinateFrame::toObjectSpace(Box&)
     <LI> CoordinateFrame::toObjectSpace(Sphere&)
     <LI> Changed CollisionDetection routines to return the surface normal of the
          surface at the collision location.
	 <LI> CollisionDetection::collisionTimeForMovingPointFixedCapsule
	 <LI> CollisionDetection::collisionTimeForMovingSphereFixedCapsule
     <LI> G3D::Capsule class
     <LI> Removed e-mail addresses from contributor list to protect them from spammers
     <LI> Linux port [Hari Khalsa & Chris Kern]
     <LI> Added serialize and deserialize methods, deserializing constructor to
	      Vector2, Vector3, Vector4, Color3, Color4, Matrix3, CoordinateFrame, Box,
		  Sphere, Plane, Ray, Line, Capsule, LineSegment
	 <LI> Moved parts of Plane.h into Plane.cpp
     <LI> BinaryInput::readBool8 and BinaryOutput::writeBool8
     <LI> G3D::System [based on Michael Herf, Rob Wyatt, and Benjamin
           Jurke's work]
     <LI> Networking infrastructure: G3D::NetworkDevice, G3D::NetAddress,
          G3D::ReliableConduit, G3D::LightweightConduit, G3D::NetListener
     <LI> G3D::Camera
     <LI> Vector2::toString
     <LI> G3D::createTempFile
     <LI> G3D::fileLength
     <LI> UserInput::setKeyMapping
     <LI> UserInput::keyCodeToString, UserInput::stringToKeyCode
     <LI> JPEG library uses createTempFile
     <LI> JPEG library will allocate up to 6MB before resorting to temp
          files-- faster and more reliable
     <LI> Moved SDL initialization to RenderDevice constructor from the init
          method so extension can be used earlier
     <LI> Support for up to 8 texture units, no longer crashes on machines
          that have more than 4 units
     <LI> Made Arrays allocate at least 32 bytes when resized to improve
          performance of small char stacks
     <LI> Added UserInput key codes for mouse wheel buttons
     <LI> UserInput::keyPressed, UserInput::pressedKeys()
     <LI> UserInput::GKey
     <LI> Renamed UserInput::poll() to UserInput::endEvents(), added
          UserInput::beginEvents()
     <LI> Moved custom UserInput key codes into an enum so they are
          compile-time constants
     <LI> Changed all <io.h> to <stdio.h> for cross-platform [Rob & Chris]
     <LI> Moved LITTLE_ENDIAN and BIG_ENDIAN constants to an enum and renamed
          them to G3D_LITTLE_ENDIAN and G3D_BIG_ENDIAN for cross-platform
          [Rob & Chris]
     <LI> Permanently fixed the precision of Real to be 32-bit float.
     <LI> RenderDevice now loads the NVIDIA VAR fence extensions.
     <LI> Renamed RenderDevice::begin to RenderDevice::beginPrimitive, same
     for end.
     <LI> Redesigned the vertex array system; see VAR and VARArea.
     <LI> Changed GLG3D demo to demonstrate the use of the new VAR and
        VARArea classes
     <LI> CoordinateFrame(Vector3) constructor.
     <LI> Improved the performance of zero-radius sphere [aka point]
          collision detection
   </UL>

<hr>
   <P>
    Changes in 4.01
   <UL>
     <LI> trimWhitespace()
     <LI> Pointwise multiplication and division for Vector3
     <LI> Array::sort now uses > operator by default; two alternative sort methods allow qsort style sorting
     <LI> Texture::copyFromScreen
     <LI> Texture::invertY
     <LI> BinaryInput/BinaryOutput compression (via zlib)
     <LI> Alpha-only G3D::Texture mode
     <LI> G3D::Font and fonts in data/font
     <LI> Array::fastRemove
     <LI> TextInput [Morgan & Aaron]
     <LI> Color4::CLEAR
     <LI> Table [] operator now returns a non-const reference
     <LI> RenderDevice::getFrameRate, RenderDevice::getTriangleRate, RenderDevice::getTriangleCount
     <LI> ManualCameraController::setMoveRate, ManualCameraController::setTurnRate
     <LI> SkyParameters default constructor
     <LI> Vector2, Vector3, Vector4 isZero(), isUnit(), isFinite()
     <LI> Vector4::length(), Vector4::squaredLength()
     <LI> isValidPointer now returns false for 0xFEEEFEEE
     <LI> RenderDevice checks for texture compression extensions
     <LI> Restructured the directories for the CPP sources (only affects people who build G3D)
     <LI> Included NVIDIA and SGI OpenGL headers in the distribution, changed install notes
     <LI> Fixed a bug that previously prevented textures from being garbage collected
     <LI> Fixed Line::distance returning values too small
     <LI> Fixed Plane(normal, point) constructor to compute point from normalized direction [Kevin]
     <LI> LED font by Matthew Welch daffy-duck@worldnet.att.net
     <LI> VenusRising font by Ray Larabie <A HREF="mailto:drowsy@cheerful.com">drowsy@cheerful.com</A>
     <LI> VideoFreak font by Jakob Fischer pizzadude@pizzadude.dk
   </UL>

<hr>
   <P>
   Changes in 4.00
   <UL>
     <LI> Moved texture combine modes from Textures onto RenderDevice texture units
     <LI> Documented RenderDevice::getHDC() (Windows only)
     <LI> Renamed RenderDevice::swapBuffers() to RenderDevice::endFrame(), added corresponding RenderDevice::beginFrame()
     <LI> Moved getNumJoySticks from RenderDevice to UserInput
     <LI> Added TEX_ADD combine mode
     <LI> Table::getKeys and Set::getMembers now have overloads that take an Array as input.
     <LI> BinaryOutput::getCArray
     <LI> RenderDevice::getObjectToWorldMatrix(), RenderDevice::getCameraToWorldMatrix()
     <LI> RenderDevice::debugDrawAxes(), RenderDevice::debugDrawBox(), RenderDevice::debugDrawSphere()
     <LI> Color3::Color3(const Vector3&) and Color4::Color4(const Vector4&)
     <LI> Moved hashCode(const Vector3&) and hashCode(const Vector4&) to the global namespace [Kevin]
     <LI> isValidPointer now returns false for 0xCCCCCCCC and 0xDEADBEEF
     <LI> Fix: RenderDevice::setPolygonOffset now affects polygons rendered in line and point mode
     <LI> Fix: Sun is now invisible after it goes below the horizon
     <LI> Fix: BinaryInput now supports endian-ness correctly in memory read mode
     <LI> Fix: Table.copyFrom and copy constructor now work
   </UL>

<hr>
   <P>
   Changes in 3.02
   <UL>
     <LI> Built libraries using "Multithreaded DLL" [Kevin & Darius]
     <LI> Added depth, color, and stencil bit depth preferences to G3D::RenderDevice
     <LI> G3D::Sky (plus sky directory in the data distribution)
     <LI> Sky cube data [Jauhn Dabz, jauhn@yahoo.com, http://nullpoint.fragland.net]
     <LI> G3D::UserInput
     <LI> G3D::ManualCameraController
     <LI> G3D::SkyParameters
     <LI> G3D::toSeconds, G3D::AMPM, G3D::SimTime, G3D::RealTime
     <LI> G3D::RenderDevice::project
     <LI> G3D::linearSpline
     <LI> G3D::Color3::fromARGB and G3D::Color4::fromARGB
     <LI> Added non-const G3D::Array::last() [Kevin]
     <LI> Modified G3D::RenderDevice::configureDirectionalLight to operate in world space
     <LI> Fix: Flipped the y-axis of G3D::RenderDevice::getDepthBufferValue so it matches the documentation.
     <LI> Removed brief descriptions from documentation
     <LI> Removed sqrt, sin, cos, etc. that conflict with standard library names
     <LI> Removed TWO_PI constant
     <LI> Removed G3D::Matrix3 virtual destructor
     <LI> Removed G3D::Quat virtual destructor [Kevin]
   </UL>

  <hr>
   Changes in 3.01
   <UL>
     <LI> Changed an assert() to debugAssert() in Queue.h
     <LI> G3D::Table doesn't grow the number of buckets under bad hash codes [Morgan & Darius]
     <LI> G3D::Table allocates only 10 initial buckets
     <LI> G3D::Table::debugGetLoad()
     <LI> G3D::CollisionDetection::collisionTimeForMovingPointFixedRectangle
     <LI> G3D::CollisionDetection::collisionTimeForMovingPointFixedBox
     <LI> G3D::Ray::intersectionTime, G3D::Ray::unit()
     <LI> G3D::Log [Morgan & Aaron]
     <LI> G3D::RenderDevice (OpenGL state abstraction.  VertexBuffer support is beta only)
     <LI> G3D::Texture (includes texture compression, image loading, and texture rectangle)
     <LI> Added a comment to the vector classes noting that they can't be sublcassed [Kevin Egan]
   </UL>
<hr>
   Changes in 3.00
   <UL>
     <LI> G3D::NEWLINE
     <LI> writeStringToFile
     <LI> Fixed empty stringJoin bug
     <LI> Fixed parseFilename with no path bug
     <LI> Vector3::INF3, Vector3::ZERO3
     <LI> G3D::PhysicsFrame (beta-- this interface is going to change in 4.00)
     <LI> G3D::Vector4
     <LI> G3D::Queue
     <LI> Default constructor for G3D::CImage
     <LI> G3D::isValidHeapPointer, G3D::isValidPointer
     <LI> G3D::Ray
     <LI> CImage copy constructor, CImage::load
     <LI> Removed \#pragma once for gcc compatibility
     <LI> Renamed several hashcode methods to hashCode
     <LI> Fixed fuzzy math to work with infinite numbers
     <LI> Fixed Table::remove(), Set::remove() bug [Darius Jazayeri]
     <LI> G3D::CoordinateFrame.toObjectSpace(Vector4), G3D::CoordinateFrame.toWorldSpace(Vector4)
     <LI> Added the data directory
     <LI> G3D::CollisionDetection
     <LI> G3D::Sphere::culledBy()
     <LI> Added the GLG3D library [Morgan McGuire & Seth Block]
     <LI> Changed SDL_GL_Demo to use GLG3D, rotate triangle, and use color blending
     <LI> Fixed debugPrintf to handle long strings on Win32
     <LI> Wrapped the MMX headers with \#ifdefs [Nate Miller]
     <LI> Moved OpenGL code out of CoordinateFrame.h/cpp
     <LI> Fixed BinaryInput readVector*, readColor* to read in correct order [Nate Miller]
     <LI> BinaryInput::readVector4, BinaryInput::readColor4, BinaryOutput::writeVector4, BinaryOutput::writeColor4
     <LI> IFS_Demo for loading IFS files, dealing with models in OpenGL [Nate Miller]
   </UL>

<hr>
   <P>
   Changes in 2.00
   <UL>
     <LI> Vector2 members renamed to x,y from s,t
     <LI> Added SDL_GL_Demo and Win32_Demo
     <LI> Removed Group
   </UL>

<hr>
   <P>
   Changes in 1.10
   <UL>
     <LI> CImage, color conversion routines [Morgan McGuire, John Chisholm, and Edward Resnick]
     <LI> Array dereference for BinaryInput
     <LI> BinaryInput from memory
     <LI> BinaryOutput to memory
     <LI> toUpper(std::string), toLower(std::string)
     <LI> Group::clear()
     <LI> inf, nan as global constants (double precision)
     <LI> Can iterate over const Tables
     <LI> Table::deleteValues()
     <LI> Fixed an off-by-one bug in BinaryInput::readString()
     <LI> beginsWith() and wordWrap() string utilities
     <LI> prompt dialogs have fixed width font [Kurt Miller]
     <LI> iMax(), iMin()
     <LI> Array::sort()
     <LI> stringCompare(), stringPtrCompare()
     <LI> readFileAsString()
     <LI> Fixed textPrompt() to wait for input
     <LI> BinaryInput.getFilename(), BinaryOutput.getFilename()
     <LI> ReferenceCount [Justin Miller]
     <LI> endsWith()
     <LI> stringSplit(), stringJoin()
     <LI> Renamed format.* to stringutils.*
     <LI> fileExists(), parseFilename(), createDirectory(), copyFile()
     <LI> highestBit() [Jukka Liimatta]
     <LI> flipRGBVertical()
     <LI> Changed all header guards to use G3D_ prefix
     <LI> ConvexPolyhedron
     <LI> Virtual destructors on almost all objects.
     <LI> RGBtoBGR()
     <LI> Color4
     <LI> Array::pop(bool shrinkArray=true)
     <LI> Vector2::isFinite, Vector2::fuzzyEq, Vector::fuzzyNe
   </UL>
   <P>

<hr>
   Changes in 1.09
   <UL>
     <LI> Removed pointer hash [Aaron Orenstein]
     <LI> Changed some includes from quotes to pointy brackets [Aaron Orenstein]
     <LI> Sphere::toString()
     <LI> Plane::toString()
     <LI> Added a change log
   </UL>

   */
