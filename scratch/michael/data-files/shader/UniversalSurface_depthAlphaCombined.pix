#version 330 // -*- c++ -*-
#include <compatibility.glsl>
/**
\file UniversalSurface_depthOnlyWithAlpha.pix
\author Michael Mara, http://www.illuminationcodified.com

For depth only passes with both parallax mapping and alpha components

\created 2012-10-06
\edited  2012-11-19
*/
#include <g3dmath.glsl>
#include <Texture/Texture.glsl>
#include <AlphaHint.glsl>

#expect USE_DEPTH_PEEL
#expect material_alphaHint
#expect HAS_VERTEX_COLOR
#expect NUM_TEXTURES

in Point2        texCoord;
uniform_Texture(sampler2D, material_LAMBERTIAN_);


uniform int         alphaHints[NUM_TEXTURES];
uniform sampler2D   lambertianTextures[NUM_TEXTURES];


#if defined(PARALLAXSTEPS)
#  if (PARALLAXSTEPS > 0)
/** Surface position in world space */
in vec3        wsPosition;

#   include <BumpMap/BumpMap.glsl>
// We know parallax steps >= 1, if we've gotten into this shader
#   if (PARALLAXSTEPS == 1)
#       define bumpMap bumpMapWelsh04
#   else // PARALLAXSTEPS > 1
#       define bumpMap bumpMapTatarchuk06
#   endif



in vec3        tan_Z;

/** Multiplier for bump map.  Typically on the range [0, 0.05]
This increases with texture scale and bump height. */
uniform float       material_bumpMapScale;

/** How high is the 0-level of the bump map? On the range [0, 1] */
uniform float       material_bumpMapBias;

/** xyz = normal, w = bump height */
uniform sampler2D   material_normalBumpMap;

/** Un-normalized (interpolated) tangent space eye vector */
in vec3        _tsE;




in vec3        tan_X, tan_Y;
#  endif
#endif

#if (USE_DEPTH_PEEL != 0)
#   include <depthPeel.glsl>
/** Need not be at the same resolution as the current depth buffer.
For samples to be written, they must be at greater gl_FragCoord.z values
than those in this buffer.*/
uniform sampler2D previousDepthBuffer;

/**
textureSize(previousDepthBuffer) / textureSize(currentDepthBuffer)
*/
uniform float2    currentToPreviousScale;

/** Minimum depth buffer value distance (on [0,1]) that new faces
must be beyond previousDepthBuffer to be written. */
uniform float     minZSeparation;

uniform float3    clipInfo;
#endif

flat in int materialID;

out Color4 result;

void main() {
    
#   if (USE_DEPTH_PEEL != 0)
    if (isDepthPeeled(previousDepthBuffer, currentToPreviousScale, minZSeparation, gl_FragCoord.xyz, clipInfo)) {
        discard;
    }
#   endif
    
    vec2 offsetTexCoord;
#   if defined(PARALLAXSTEPS) 
#     if (PARALLAXSTEPS > 0)
    vec3 wsN;
    vec3 tsN;
    float rawNormalLength = 1.0;
    float backside = (gl_FrontFacing == g3d_InvertY) ? 1.0 : -1.0;
    bumpMap(material_normalBumpMap, material_bumpMapScale, material_bumpMapBias, texCoord, tan_X, tan_Y, tan_Z, backside, normalize(_tsE), wsN, offsetTexCoord, tsN, rawNormalLength, PARALLAXSTEPS);
#     else
    offsetTexCoord = texCoord;
#     endif
#   else 
    offsetTexCoord = texCoord;
#   endif

    float alpha = texture(lambertianTextures[materialID], offsetTexCoord).a; //*material_LAMBERTIAN_readMultiplyFirst.a + material_LAMBERTIAN_readAddSecond.a;

#   if HAS_VERTEX_COLOR
    alpha *= vertexColor.a;
#   endif
    float coverage = computeCoverage(alphaHints[materialID], alpha);
    // Issue0001: Provide MSAA support here
    if (coverage < 1.0) {
        discard;
    }
    //discard;
    
    result.a = 1.0;
}


