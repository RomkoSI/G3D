#version 430 // -*- c++ -*-

//SVO_normalizeValues.glc

/**
  Requires WORK_GROUP_SIZE_X, WORK_GROUP_SIZE_Y
*/

#include <SVO/SVO.glsl>

#expect WORK_GROUP_SIZE_X
#expect WORK_GROUP_SIZE_Y

layout (local_size_x = WORK_GROUP_SIZE_X, local_size_y = WORK_GROUP_SIZE_Y, local_size_z = 1) in;


uniform int                          level;

/** Used for reading the total thread count from the fourth element */
layout(r32ui) uniform uimageBuffer   dispatchIndirectLevelBuffer;




void main() {
	//return;

    uint threadIndex = (gl_WorkGroupID.x + gl_WorkGroupID.y * gl_NumWorkGroups.x) * (WORK_GROUP_SIZE_X * WORK_GROUP_SIZE_Y) + gl_LocalInvocationID.x + gl_LocalInvocationID.y * WORK_GROUP_SIZE_X;

    uint numThreads = imageLoad(dispatchIndirectLevelBuffer, 3).r;
    if (threadIndex >= numThreads) { return; }

    uint nodeIndex = threadIndex + imageLoad(levelIndexBuffer, level - 1).r;

    // See if this node has children; if not, leave the pointer at NULL
    if ( nodeIndex != 0) 
	{

		ivec3 brickOffset=ivec3(0);
#if 0 //SVO_USE_BRICKS
		ivec3 brickCoords = svoGBufferCoordsFromBrickIdx(nodeIndex);

		for(brickOffset.z=0; brickOffset.z<SVO_BRICK_RES/2; brickOffset.z++)
		for(brickOffset.y=0; brickOffset.y<SVO_BRICK_RES/2; brickOffset.y++)
		for(brickOffset.x=0; brickOffset.x<SVO_BRICK_RES/2; brickOffset.x++)
#endif	
		{

			ivec3 gbufferCoords=svoGBufferCoordsFromNodeIdx(nodeIndex, ivec3(0));  //brickOffset
#   ifdef GBUFFER_CHANNEL_svo_WS_NORMAL
			float accumCounter = texelFetch(GBUFFER_TEX(svo, WS_NORMAL), GBUFFER_COORDS(svo, gbufferCoords), 0).a;
#   endif

			if(accumCounter>0.0f){
#   foreach(NAME, name) in (WS_NORMAL, normal), (CS_NORMAL, csNormal), (WS_FACE_NORMAL, faceNormal), (CS_FACE_NORMAL, csFaceNormal), (WS_POSITION, wsPosition), (CS_POSITION, csPosition), (LAMBERTIAN, lambertian), (GLOSSY, glossy), (TRANSMISSIVE, transmissive), (EMISSIVE, emissive), (CS_POSITION_CHANGE, csPosChange), (SS_POSITION_CHANGE, ssPosChange), (CS_Z, csZ), (DEPTH_AND_STENCIL, depthStencil), (TS_NORMAL, tsNormal), (SVO_POSITION, svoPos), (SVO_COVARIANCE_MAT1, cov1), (SVO_COVARIANCE_MAT2, cov2)
#       ifdef GBUFFER_CHANNEL_svo_$(NAME)

			{
				

				vec4 val=texelFetch(GBUFFER_TEX(svo, $(NAME)), GBUFFER_COORDS(svo, gbufferCoords), 0);
				val = val/accumCounter;

				imageStore(GBUFFER_IMAGE(svo, $(NAME)), GBUFFER_COORDS(svo, gbufferCoords), val);
			}
# endif
#endforeach
			}
		}

    }

}

