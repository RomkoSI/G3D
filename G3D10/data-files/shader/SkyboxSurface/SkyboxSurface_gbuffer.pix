#version 330 // -*- c++ -*-
#include <reconstructFromDepth.glsl>

#ifdef EMISSIVE
    uniform float alpha;
    in vec3  direction;

#   ifdef texture0_notNull
#       ifdef texture0_2DSpherical
            // Use a 2D spherical-coordinate map
            uniform sampler2D   texture0_buffer;
#       else
            uniform samplerCube texture0_buffer;
#       endif
        uniform vec4        texture0_readMultiplyFirst;
        uniform vec4        texture0_readAddSecond;
#   endif

#   ifdef texture1_notNull
#       ifdef texture1_2DSpherical
            // Use a 2D spherical-coordinate map
            uniform sampler2D   texture1_buffer;
#       else
            uniform samplerCube texture1_buffer;
#       endif
        uniform vec4        texture1_readMultiplyFirst;
        uniform vec4        texture1_readAddSecond;
#   endif
#endif

#ifdef SS_POSITION_CHANGE
    uniform mat4x3      CurrentToPreviousCameraMatrix;
#endif

#ifdef SS_EXPRESSIVE_MOTION
    uniform mat4x3      CurrentToExpressivePreviousCameraMatrix;
#endif

#if defined(SS_POSITION_CHANGE) || defined(SS_EXPRESSIVE_MOTION)
    uniform mat4        ProjectToScreenMatrix;
#endif

#if defined(SS_POSITION_CHANGE) || defined(SS_EXPRESSIVE_MOTION) || defined(CS_NORMAL) || defined(WS_NORMAL) || defined(CS_FACE_NORMAL) || defined(WS_FACE_NORMAL) || defined(CS_POSITION) || defined(WS_POSITION)
    uniform vec4        projInfo;
#endif

void main() {
    // When forced to provide a distance to the skybox, return this z value.
    const float FAR = -100000.0;

#   ifdef EMISSIVE
    {
        vec3 temp = vec3(0.0);
#       if defined(texture0_2DSpherical) || defined(texture1_2DSpherical)
            vec3 d = normalize(direction);
            // Vertical angle, 0 = north pole
            float theta = acos(d.y);
            // Horizontal angle, 0 = +x
            float phi   = atan(d.z, d.x);

            vec2 sphereCoord = vec2(phi / (2 * pi), theta / pi);
#       endif

#       ifdef texture0_notNull
            temp += (
#               ifdef texture0_2DSpherical
                    texture(texture0_buffer, sphereCoord).rgb 
#               else
                    texture(texture0_buffer, direction).rgb 
#               endif
                * texture0_readMultiplyFirst.rgb + texture0_readAddSecond.rgb) * (1.0 - alpha);
#       endif

#       ifdef texture1_notNull
            temp += (
#               ifdef texture0_2DSpherical
                    texture(texture1_buffer, sphereCoord).rgb 
#               else
                    texture(texture1_buffer, direction).rgb 
#               endif
                * texture1_readMultiplyFirst.rgb + texture1_readAddSecond.rgb) * alpha;
#       endif

        EMISSIVE.rgb = temp * EMISSIVE_writeMultiplyFirst.rgb + EMISSIVE_writeAddSecond.rgb;
    }
#   endif

#   if defined(SS_POSITION_CHANGE) || defined(SS_EXPRESSIVE_MOTION) ||defined(CS_NORMAL) || defined(WS_NORMAL) || defined(CS_FACE_NORMAL) || defined(WS_FACE_NORMAL) || defined(CS_POSITION) || defined(WS_POSITION)
        // Create a camera-space point on the plane z=-1 that projects
        // to this pixel
        vec3 csNormalizedPosition = reconstructCSPosition(gl_FragCoord.xy, -1.0, projInfo);

        // Move the point onto a sphere, while keeping it projecting to
        // the current pixel
        csNormalizedPosition = normalize(csNormalizedPosition);
#   endif

#   ifdef CS_NORMAL
        CS_NORMAL.xyz = -csNormalizedPosition * CS_NORMAL_writeMultiplyFirst.xyz + CS_NORMAL_writeAddSecond.xyz;
#   endif

#   ifdef TS_NORMAL
        TS_NORMAL.xyz = vec3(0, 0, 1) * TS_NORMAL_writeMultiplyFirst.xyz+ TS_NORMAL_writeAddSecond.xyz;
#   endif

#   ifdef CS_FACE_NORMAL
        CS_FACE_NORMAL.xyz = -csNormalizedPosition * CS_FACE_NORMAL_writeMultiplyFirst.xyz + CS_FACE_NORMAL_writeAddSecond.xyz;
#   endif

#   ifdef CS_Z
        CS_Z.x = (-FAR * csNormalizedPosition.z) * CS_Z_writeMultiplyFirst.x + CS_Z_writeAddSecond.x;
#   endif

#   ifdef CS_POSITION
        CS_POSITION.xyz = (-FAR * csNormalizedPosition) * CS_POSITION_writeMultiplyFirst.xyz + CS_POSITION_writeAddSecond.xyz;
#   endif

#   ifdef WS_POSITION
        WS_POSITION.xyz = (g3d_CameraToWorldMatrix * vec4(-FAR * csNormalizedPosition, 1.0)).xyz * WS_POSITION_writeMultiplyFirst.xyz + WS_POSITION_writeAddSecond.xyz;
#   endif

#   ifdef WS_NORMAL
        WS_NORMAL.xyz = -(mat3(g3d_CameraToWorldMatrix) * (-csNormalizedPosition)) * WS_NORMAL_writeMultiplyFirst.xyz + WS_NORMAL_writeAddSecond.xyz;
#   endif

#   ifdef WS_FACE_NORMAL
        WS_FACE_NORMAL.xyz = -(mat3(g3d_CameraToWorldMatrix) * (-csNormalizedPosition)) * WS_FACE_NORMAL_writeMultiplyFirst.xyz + WS_FACE_NORMAL_writeAddSecond.xyz;
#   endif

#   ifdef LAMBERTIAN
        LAMBERTIAN.rgb = LAMBERTIAN_writeAddSecond.rgb;
#   endif

#   ifdef GLOSSY
        GLOSSY.rgba = GLOSSY_writeAddSecond.rgba;
#   endif

#   ifdef TRANSMISSIVE
        TRANSMISSIVE.rgb = TRANSMISSIVE_writeAddSecond.rgb;
#   endif

#   if defined(SS_POSITION_CHANGE) || defined(CS_POSITION_CHANGE)
        // Take it back to the previous camera space, ignoring translation
        vec3 csPrev = mat3(CurrentToPreviousCameraMatrix) * csNormalizedPosition;
#   endif

#   if defined(SS_EXPRESSIVE_MOTION)
        // Take it back to the previous camera space, ignoring translation
        vec3 csExpressivePrev = mat3(CurrentToExpressivePreviousCameraMatrix) * csNormalizedPosition;
#   endif

#   ifdef CS_POSITION_CHANGE
        CS_POSITION_CHANGE.xyz = (csNormalizedPosition - csPrev) * FAR * CS_POSITION_CHANGE_writeMultiplyFirst.xyz + CS_POSITION_CHANGE_writeAddSecond.xyz;
#   endif

        
#   if defined(SS_EXPRESSIVE_MOTION) || defined(SS_POSITION_CHANGE)
        // gl_FragCoord.xy has already been rounded to a pixel center, so regenerate the true projected position.
        // This is needed to generate correct velocity vectors in the presence of Projection::pixelOffset
        vec4 accurateHomogeneousFragCoord = ProjectToScreenMatrix * vec4(csNormalizedPosition, 1.0);
#   endif

#   ifdef SS_POSITION_CHANGE
        if (csPrev.z >= 0.0) {
            // Projects behind the camera; write zero velocity
            SS_POSITION_CHANGE.xy = SS_POSITION_CHANGE_writeAddSecond.xy;
        } else {
            
            vec4 temp = ProjectToScreenMatrix * vec4(csPrev, 1.0);

            // We want the precision of division here and intentionally do not convert to multiplying by an inverse.
            // Expressing the two divisions as a single vector division operation seems to prevent the compiler from
            // computing them at different precisions, which gives non-zero velocity for static objects in some cases.
            vec4 ssPositions = vec4(temp.xy, accurateHomogeneousFragCoord.xy) / vec4(temp.ww, accurateHomogeneousFragCoord.ww);

            vec2 ssPositionChange = ssPositions.zw - ssPositions.xy;
            SS_POSITION_CHANGE.xy = (ssPositionChange) * SS_POSITION_CHANGE_writeMultiplyFirst.xy + SS_POSITION_CHANGE_writeAddSecond.xy;
        }
#   endif

#   ifdef SS_EXPRESSIVE_MOTION
        if (csExpressivePrev.z >= 0.0) {
            // Projects behind the camera; write zero velocity
            SS_EXPRESSIVE_MOTION.xy = SS_EXPRESSIVE_MOTION_writeAddSecond.xy;
        } else {
            
            vec4 temp = ProjectToScreenMatrix * vec4(csExpressivePrev, 1.0);

            // We want the precision of division here and intentionally do not convert to multiplying by an inverse.
            // Expressing the two divisions as a single vector division operation seems to prevent the compiler from
            // computing them at different precisions, which gives non-zero velocity for static objects in some cases.
            vec4 ssPositions = vec4(temp.xy, accurateHomogeneousFragCoord.xy) / vec4(temp.ww, accurateHomogeneousFragCoord.ww);

            vec2 ssPositionChange = ssPositions.zw - ssPositions.xy;
            SS_EXPRESSIVE_MOTION.xy = (ssPositionChange) * SS_EXPRESSIVE_MOTION_writeMultiplyFirst.xy + SS_EXPRESSIVE_MOTION_writeAddSecond.xy;
        }
#   endif
}
