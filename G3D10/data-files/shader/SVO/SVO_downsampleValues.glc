#version 430 // -*- c++ -*-

//SVO_downsampleValues.glc

/**
  Requires WORK_GROUP_SIZE_X, WORK_GROUP_SIZE_Y
*/

#include <SVO/SVO.glsl>

#expect WORK_GROUP_SIZE_X
#expect WORK_GROUP_SIZE_Y

layout (local_size_x = WORK_GROUP_SIZE_X, local_size_y = WORK_GROUP_SIZE_Y, local_size_z = 1) in;


uniform int                          level;

/** Used for reading the total thread count from the fourth element */
layout(r32ui) uniform uimageBuffer   dispatchIndirectLevelBuffer;

#ifdef SVO_USE_BRICKS
#undef SVO_USE_BRICKS
#endif
#define SVO_USE_BRICKS	0

//Standard
#if 1

void main() {
    uint threadIndex = (gl_WorkGroupID.x + gl_WorkGroupID.y * gl_NumWorkGroups.x) * (WORK_GROUP_SIZE_X * WORK_GROUP_SIZE_Y) + gl_LocalInvocationID.x + gl_LocalInvocationID.y * WORK_GROUP_SIZE_X;

    uint numThreads = imageLoad(dispatchIndirectLevelBuffer, 3).r;
    if (threadIndex >= numThreads) { return; }

    uint nodeIndex = threadIndex + imageLoad(levelIndexBuffer, level - 1).r;
	uint childIndex = imageLoad(childIndexBuffer, int(nodeIndex)).r;

    // See if this node has children; if not, leave the pointer at NULL
    if ( childIndex != 0) 
	{

		ivec3 brickOffset=ivec3(0);
#if SVO_USE_BRICKS
		ivec3 brickCoords = svoGBufferCoordsFromBrickIdx(childIndex);

		for(brickOffset.z=0; brickOffset.z<SVO_BRICK_RES/2; brickOffset.z++)
		for(brickOffset.y=0; brickOffset.y<SVO_BRICK_RES/2; brickOffset.y++)
		for(brickOffset.x=0; brickOffset.x<SVO_BRICK_RES/2; brickOffset.x++)
#endif	
		{

			
#   foreach(NAME, name) in(WS_NORMAL, normal), (CS_NORMAL, csNormal), (WS_FACE_NORMAL, faceNormal), (CS_FACE_NORMAL, csFaceNormal), (WS_POSITION, wsPosition), (CS_POSITION, csPosition), (LAMBERTIAN, lambertian), (GLOSSY, glossy), (TRANSMISSIVE, transmissive), (EMISSIVE, emissive), (CS_POSITION_CHANGE, csPosChange), (SS_POSITION_CHANGE, ssPosChange), (CS_Z, csZ), (DEPTH_AND_STENCIL, depthStencil), (TS_NORMAL, tsNormal), (SVO_POSITION, svoPos), (SVO_COVARIANCE_MAT1, cov1), (SVO_COVARIANCE_MAT2, cov2)
#       ifdef GBUFFER_CHANNEL_svo_$(NAME)

			{
				vec4 accVar = vec4(0.0f);

				float accCount=0.0f;

				// Accumulate children values
				ivec3 subOffset;
				for(subOffset.z=0; subOffset.z<2; subOffset.z++)
				for(subOffset.y=0; subOffset.y<2; subOffset.y++)
				for(subOffset.x=0; subOffset.x<2; subOffset.x++){

#if SVO_USE_BRICKS==0

					uint i = subOffset.x + subOffset.y*2 +subOffset.z*4;
					uint nodeIndex = childIndex+i;
					ivec3 gbufferCoords=svoGBufferCoordsFromNodeIdx(nodeIndex, ivec3(0));

#else
					ivec3 gbufferCoords = brickCoords + brickOffset*2 + subOffset;
#endif

					vec4 val=texelFetch(GBUFFER_TEX(svo, $(NAME)), GBUFFER_COORDS(svo, gbufferCoords), 0);

					//if(val.a>0.0f)
					{
						accVar += val;
						accCount += 1.0f;
					}

				}

				accVar = accVar/8.0f;
				
				//$(accVar) = $(accVar)/accCount;

				/*$(accVar) = $(accVar)/7.0f;
				if($(accVar).a>1.0f)
					$(accVar)/=$(accVar).a; */
				

				//accVal.a=0.01f;
				/*if($(accVar).a>0.0f)
					$(accVar).rgb/=$(accVar).a;  //Temp
				else
					$(accVar).rgb=vec3(0.0f);*/
				 
				ivec3 gbufferCoords=svoGBufferCoordsFromNodeIdx(nodeIndex, brickOffset);

				imageStore(GBUFFER_IMAGE(svo, $(NAME)), GBUFFER_COORDS(svo, gbufferCoords), accVar);
			}

# endif
#endforeach

		}

    }

}

#else  //Test dir alpha. (Works well for trees color !)

void main() {
    uint threadIndex = (gl_WorkGroupID.x + gl_WorkGroupID.y * gl_NumWorkGroups.x) * (WORK_GROUP_SIZE_X * WORK_GROUP_SIZE_Y) + gl_LocalInvocationID.x + gl_LocalInvocationID.y * WORK_GROUP_SIZE_X;

    uint numThreads = imageLoad(dispatchIndirectLevelBuffer, 3).r;
    if (threadIndex >= numThreads) { return; }

    uint nodeIndex = threadIndex + imageLoad(levelIndexBuffer, level - 1).r;
	uint childIndex = imageLoad(childIndexBuffer, int(nodeIndex)).r;

    // See if this node has children; if not, leave the pointer at NULL
    if ( childIndex != 0) 
	{

		ivec3 brickOffset=ivec3(0);
#if SVO_USE_BRICKS
		ivec3 brickCoords = svoGBufferCoordsFromBrickIdx(childIndex);

		for(brickOffset.z=0; brickOffset.z<SVO_BRICK_RES/2; brickOffset.z++)
		for(brickOffset.y=0; brickOffset.y<SVO_BRICK_RES/2; brickOffset.y++)
		for(brickOffset.x=0; brickOffset.x<SVO_BRICK_RES/2; brickOffset.x++)
#endif	
		{

			
	#   foreach (NAME, accVar) in (WS_NORMAL, accNormal), (SVO_COVARIANCE_MAT1, accCov1), (SVO_COVARIANCE_MAT2, accCov2)
	#       ifdef GBUFFER_CHANNEL_svo_$(NAME)

			{
				vec4 $(accVar) = vec4(0.0f);

				// Accumulate children values
				ivec3 subOffset;
				
				for(subOffset.y=0; subOffset.y<2; subOffset.y++)
				for(subOffset.x=0; subOffset.x<2; subOffset.x++){

					vec4 dirVal = vec4(0.0f);

					for(subOffset.z=0; subOffset.z<2; subOffset.z++){
	#if SVO_USE_BRICKS==0

						uint i = subOffset.x + subOffset.y*2 +subOffset.z*4;
						uint nodeIndex = childIndex+i;
						ivec3 gbufferCoords=svoGBufferCoordsFromNodeIdx(nodeIndex, ivec3(0));

	#else
						ivec3 gbufferCoords = brickCoords + brickOffset*2 + subOffset;
	#endif

						vec4 val=texelFetch(GBUFFER_TEX(svo, $(NAME)), GBUFFER_COORDS(svo, gbufferCoords), 0);


#if 0
						float aNew=(1.0f-pow(1.0f-dirVal.w, 4.0f));
						if(dirVal.a>0.0f){
							val.rgb /= val.a;
							val.a = aNew;
							val.rgb *= val.a;
						}
#endif


						dirVal += val*(1.0f-dirVal.w);
						//$(accVar) += val;
					}

#if 0  //OK
					float aNew=(1.0f-pow(1.0f-dirVal.w, 2.0f)); //0.5f
					if(dirVal.a>0.0f){
						dirVal.rgb /= dirVal.a;
						dirVal.a = aNew;
						dirVal.rgb *= dirVal.a;
					}
#endif

					$(accVar) += dirVal;
				}
				$(accVar) = $(accVar)/4.0f;


				

				//accVal.a=0.01f;
				/*if($(accVar).a>0.0f)
					$(accVar).rgb/=$(accVar).a;  //Temp
				else
					$(accVar).rgb=vec3(0.0f);*/
				 
				ivec3 gbufferCoords=svoGBufferCoordsFromNodeIdx(nodeIndex, brickOffset);

				imageStore(GBUFFER_IMAGE(svo, $(NAME)), GBUFFER_COORDS(svo, gbufferCoords), $(accVar));
			}

	#       endif
	#   endforeach

		}

    }

}
#endif
