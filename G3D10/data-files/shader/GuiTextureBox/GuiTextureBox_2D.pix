#version 330
/**
  \file GuiTextureBox_2D.pix
  \author Morgan McGuire, http://graphics.cs.williams.edu, Michael Mara
 */
#include <compatibility.glsl>
#include <Texture/Texture.glsl>
#if IS_GL_TEXTURE_RECTANGLE == 1
#extension GL_ARB_texture_rectangle : enable
    uniform_Texture(sampler2D, tex_);
#else
#   if IS_2D_ARRAY
#       expect LAYER
        uniform_Texture(sampler2DArray, tex_);
#   elif IS_3D
#       expect LAYER
        uniform_Texture(sampler3D, tex_);
#   else
        uniform_Texture(sampler2D, tex_);
#   endif
#endif
uniform float     adjustGamma;
uniform mat4      colorShift;
uniform float     bias;
uniform float     scale;
uniform bool      invertIntensity;
uniform float     mipLevel;

in vec2 g3d_TexCoord;

out vec4 result;

void main(void) {
#if DRAW_INVERTED == 1
    vec2 coords = vec2(g3d_TexCoord.x, 1 - g3d_TexCoord.y);
#else
    vec2 coords = g3d_TexCoord.xy;
#endif

#if IS_GL_TEXTURE_RECTANGLE == 1
    vec4 c = texture2DRect(tex_buffer, vec2(coords.xy * tex_size.xy - vec2(0.5) ));
#else
#   if IS_2D_ARRAY || IS_3D  
#       if IS_2D_ARRAY
            float zCoord = LAYER;
#       else
            float zCoord = (LAYER + 0.5)*tex_invSize.z; 
#       endif
        vec4 c = textureLod(tex_buffer, vec3(coords.xy, zCoord), mipLevel);
#   else
        vec4 c = textureLod(tex_buffer, coords.xy, mipLevel);
#   endif
    
#endif
    c = (c + bias) * scale;
    c = invertIntensity ? vec4(1.0 - c) : c;
    c = colorShift * c;
    c = max(c, vec4(0.0));
    result.rgb = pow(c.rgb, vec3(adjustGamma));
    result.a = 1.0;
}
