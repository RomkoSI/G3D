#version 430 // -*- c++ -*-
#extension GL_ARB_shader_atomic_counters : enable
#extension GL_ARB_shader_image_load_store : enable
#extension GL_ARB_gpu_shader5 : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_bindless_texture : enable

#include <compatibility.glsl>
#include <UniversalMaterial/UniversalMaterial.glsl>
#include <GBuffer/GBuffer2.glsl>



#expect USE_IMAGE_STORE "1 or 0"

/** 
  \file UniversalSurface_GBuffer.pix 
  \author Morgan McGuire, http://graphics.cs.williams.edu
    
  This shader expects a prefix (GBuffer::macros() or SVO::macros()) to be attached
  at runtime using Shader::setPremable.

  If USE_IMAGE_STORE is defined and set to a non-zero value, then the OpenGL image store
  API is used instead of framebuffer write.  In this case, you will probably want to
  disable framebuffer writes (color mask) using RenderDevice::setColorWrite(false).

  Requires BUFFER_WIDTH_MASK = width - 1 and BUFFER_WIDTH_SHFIT = log_2(width) to be
  passed, where width is a power of 2.
*/
#if __VERSION__ >= 130
#   define varying in
#endif

#expect USE_IMAGE_STORE "1 or 0"
#expect HAS_ALPHA "1 or 0"

#if (__VERSION__ < 420)// && ! defined(GL_ARB_separate_shader_objects)) 
#   define layout(ignore)
#endif

uniform_UniversalMaterial(material_);


/** Texture coordinate */
varying layout(location=0) vec2 texCoord;

varying layout(location=1) vec3 wsPosition;

DECLARE_GBUFFER(gbuffer)

//1.0f/volumeExtent
uniform float invResolution;


#if USE_IMAGE_STORE
#   ifndef GL_ARB_shader_image_load_store
#       error "Using the SVO shaders requires the GL_ARB_shader_image_load_store extension"
#   endif


#   if defined(GL_ARB_shader_atomic_counters) && 0
        // Image atomic backed by a PBO
        // Not currently implemented
        uniform atomic_uint                     fragmentCounter;
#   else
        // Fall back to image atomics, which do not require GL_ARB_shader_atomic_counters
        // but are not optimized for high numbers of collisions
        layout(r32ui) uniform  uimageBuffer     fragmentCounter_buffer;
#   endif


#else
    /** Do not read color attributes (except LAMBERTIAN, if an alpha test is required)
        outside of this rectangle.  Used to implement the trim band outside of which
        only depth is recorded. */
    uniform vec2            lowerCoord, upperCoord;
#endif

#if defined(CS_POSITION_CHANGE) || defined(SS_POSITION_CHANGE)
    varying layout(location=7) vec3 csPrevPosition;
#endif

#ifdef SS_POSITION_CHANGE
    // We reproject per-pixel so that csPrevPosition can be interpolated
    // linearly in the current frame's 3D; projecting the previous position
    // in the vertex shader would result in a previous homogeneous value
    // being linearly in the current time frame.
    uniform mat4 ProjectToScreenMatrix;
#endif

float backside = (gl_FrontFacing == g3d_InvertY) ?  1.0 : -1.0;

#ifdef HAS_NORMAL_BUMP_MAP
#   if (PARALLAXSTEPS > 0)
        /** Un-normalized (interpolated) tangent space eye vector */
        varying layout(location=6) vec3  _tsE;
#   endif    
    varying layout(location=4)   vec3    tan_X;
    varying layout(location=5)   vec3    tan_Y;

#include <BumpMap/BumpMap.glsl>
#   if (PARALLAXSTEPS == 0)
#       define bumpMap bumpMapBlinn78
#   elif (PARALLAXSTEPS <= 1)
#       define bumpMap bumpMapWelsh04
#   else // PARALLAXSETPS > 1
#       define bumpMap bumpMapTatarchuk06
#   endif
#endif

varying layout(location=2) vec3             tan_Z;
varying layout(location=10) vec3			tan_L;

/** Index of refraction / 24.0 */
uniform float            normalizedIndexOfRefraction;

#ifdef SVO_POSITION
    varying layout(location=8) vec3         svoPosition;
	flat varying layout(location=9) int		triangleAxis;


	in layout(location=10) vec3				svoNormal;

#endif

	void main() {



#   if defined(HAS_NORMAL_BUMP_MAP)
		float rawNormalLength = 1.0;
		vec3 wsN;
		vec2 offsetTexCoord;
		vec3 tsN;
#       if (PARALLAXSTEPS > 0)
		// Requires bump map constants
		bumpMap(material_normalBumpMap, material_bumpMapScale, material_bumpMapBias, texCoord, tan_X, tan_Y, tan_Z, backside, normalize(_tsE), wsN, offsetTexCoord, tsN, rawNormalLength, PARALLAXSTEPS);
#       else
		bumpMap(material_normalBumpMap, 0.0, 0.0, texCoord, tan_X, tan_Y, tan_Z, backside, vec3(0.0), wsN, offsetTexCoord, tsN, rawNormalLength, PARALLAXSTEPS);
#       endif
#   else
		// World space normal
		vec3 wsN = normalize(tan_Z.xyz);
		vec2 offsetTexCoord = texCoord;
		// No bump maps, normal always Z-axis of tangent space
		vec3 tsN = vec3(0.0, 0.0, 1.0);
#   endif

		//////////////////////// MATERIAL //////////////////////////////

	vec3 lambertianColor;
	float alpha;
	{
		vec4 temp = texture(material_LAMBERTIAN_buffer, offsetTexCoord) * material_LAMBERTIAN_readMultiplyFirst + material_LAMBERTIAN_readAddSecond;
#       if HAS_VERTEX_COLOR
			temp *= vertexColor;
#       endif

		lambertianColor = temp.rgb;
		alpha = temp.a;

		float intens = length(lambertianColor.rgb);
		//float intens = (lambertianColor.r+lambertianColor.g+lambertianColor.b)/3.0f;
		//float intens = (lambertianColor.r+lambertianColor.g+lambertianColor.b);
		
		//alpha = clamp( intens * 1.5f, 0.0f, 1.0f);

		///alpha = clamp( intens * 3.0f, 0.0f, 1.0f); //Hack !!
		//alpha = alpha*alpha;

		if(alpha<=0.01f /*|| (offsetTexCoord.y>=-0.01f && offsetTexCoord.y<0.02f)*/ ){  //alpha<=0.01f
			discard;
			return;
		}

	}

#   ifdef LAMBERTIAN
	GBUFFER_GLOBAL_VAR(gbuffer, LAMBERTIAN).rgb = lambertianColor;
#   endif


#   ifdef EMISSIVE
#       if defined(material_EMISSIVE_notNull) && material_EMISSIVE_notNull
	GBUFFER_GLOBAL_VAR(gbuffer, EMISSIVE).rgb = texture(material_EMISSIVE_buffer, offsetTexCoord).rgb * material_EMISSIVE_readMultiplyFirst.rgb + material_EMISSIVE_readAddSecond.rgb;  
#       else
	GBUFFER_GLOBAL_VAR(gbuffer, EMISSIVE).rgb = vec3(0);
#       endif
#   endif

#   ifdef TRANSMISSIVE
#       if defined(material_TRANSMISSIVE_notNull) && material_TRANSMISSIVE_notNull
	GBUFFER_GLOBAL_VAR(gbuffer, TRANSMISSIVE).rgb = texture(material_TRANSMISSIVE_buffer, offsetTexCoord).rgb * material_TRANSMISSIVE_readMultiplyFirst.rgb + material_TRANSMISSIVE_readAddSecond.rgb;  
	GBUFFER_GLOBAL_VAR(gbuffer, TRANSMISSIVE).a = material_etaTransmit;
#       else
	GBUFFER_GLOBAL_VAR(gbuffer, TRANSMISSIVE).rgba = vec4(0);
#       endif
#   endif


#   ifdef GLOSSY
	GBUFFER_GLOBAL_VAR(gbuffer, GLOSSY) = texture(material_GLOSSY_buffer, offsetTexCoord) * material_GLOSSY_readMultiplyFirst + material_GLOSSY_readAddSecond;

#       if defined(HAS_NORMAL_BUMP_MAP)
	// normal variance -> glossy coefficient to resolve aliasing
	if (GBUFFER_GLOBAL_VAR(gbuffer, GLOSSY) .a < 1.0) {
		GBUFFER_GLOBAL_VAR(gbuffer, GLOSSY) .a = packGlossyExponent(computeToksvigGlossyExponent(unpackGlossyExponent(GBUFFER_GLOBAL_VAR(gbuffer, GLOSSY) .a), rawNormalLength));
	}
#       endif
#   endif

    ///////////////////////// NORMALS //////////////////////////////
#   ifdef CS_NORMAL
        vec3 csN = (mat3(g3d_WorldToCameraMatrix) * wsN);
#   endif

#   if defined(WS_FACE_NORMAL) || defined(CS_FACE_NORMAL)
        vec3 wsFaceNormal = normalize(cross(dFdy(wsPosition), dFdx(wsPosition)));
#   endif

#   ifdef CS_FACE_NORMAL
        vec3 csFaceNormal = (g3d_WorldToCameraMatrix * vec4(wsFaceNormal, 0.0));
#   endif


//NEW for gbuffer declaration. Removed: WS_FACE_NORMAL (hack)
#   foreach (NAME, name) in (WS_NORMAL, wsN), (CS_NORMAL, csN), (TS_NORMAL, tsN), (CS_FACE_NORMAL, csFaceNormal), (SVO_POSITION, svoPosition)
#       ifdef GBUFFER_CHANNEL_gbuffer_$(NAME)
            GBUFFER_GLOBAL_VAR(gbuffer, $(NAME)).xyz = $(name).xyz;
#       endif
#   endforeach
	
	//Special case: Hack
#   ifdef GBUFFER_CHANNEL_gbuffer_WS_FACE_NORMAL
			GBUFFER_GLOBAL_VAR(gbuffer, WS_FACE_NORMAL).xy = wsFaceNormal.xy;
#   endif

    //////////////////////// POSITIONS /////////////////////////////
    // NVIDIA drivers miscompile this unless we write WS_POSITION after the normals

#   if defined(CS_POSITION) || defined(CS_POSITION_CHANGE) || defined(SS_POSITION_CHANGE) || defined(CS_Z)
        vec3 csPosition = g3d_WorldToCameraMatrix * vec4(wsPosition, 1.0);
#   endif

#   ifdef CS_POSITION_CHANGE
        vec3 csPositionChange = (csPosition - csPrevPosition);
#   endif

#   ifdef SS_POSITION_CHANGE
        vec2 ssPositionChange;
        {
            vec4 temp = ProjectToScreenMatrix * vec4(csPrevPosition, 1.0);
            vec2 ssPrevPosition = temp.xy / temp.w;

            // gl_FragCoord.xy has already been rounded to a pixel center, so regenerate the true projected position.
            // This is needed to generate correct velocity vectors in the presence of Projection::pixelOffset
            vec4 temp2 = ProjectToScreenMatrix * vec4(csPosition, 1.0);
            vec2 ssPosition = temp2.xy / temp2.w;
            ssPositionChange = (ssPosition - ssPrevPosition);
        }
#   endif


#   foreach (NAME, name, components) in (WS_POSITION, wsPosition, xyz), (CS_POSITION, csPosition, xyz), (CS_POSITION_CHANGE, csPositionChange, xyz), (SS_POSITION_CHANGE, ssPositionChange, xy)
#       ifdef GBUFFER_CHANNEL_gbuffer_$(NAME)
            GBUFFER_GLOBAL_VAR(gbuffer, $(NAME)).xyz = $(name);
#       endif
#   endforeach

#   ifdef CS_Z
        CS_Z.r = csPosition.z * CS_Z_writeScaleBias.x + CS_Z_writeScaleBias.y;
#   endif


	
	////Apply write scale biases////
#   foreach (NAME) in (WS_NORMAL), (CS_NORMAL), (WS_FACE_NORMAL), (CS_FACE_NORMAL), (WS_POSITION), (CS_POSITION), (LAMBERTIAN), (GLOSSY), (TRANSMISSIVE), (EMISSIVE), (CS_POSITION_CHANGE), (SS_POSITION_CHANGE), (CS_Z), (DEPTH_AND_STENCIL), (TS_NORMAL), (SVO_POSITION), (SVO_COVARIANCE_MAT1), (SVO_COVARIANCE_MAT2)
#       ifdef GBUFFER_CHANNEL_gbuffer_$(NAME)
            GBUFFER_GLOBAL_VAR(gbuffer, $(NAME)) = GBUFFER_GLOBAL_VAR(gbuffer, $(NAME)) * GBUFFER_WRITE_SCALEBIAS(gbuffer, $(NAME)).x + GBUFFER_WRITE_SCALEBIAS(gbuffer, $(NAME)).y;
#       endif
#   endforeach

	//Clamp SVO values
# ifdef GBUFFER_CHANNEL_gbuffer_SVO_POSITION
	GBUFFER_GLOBAL_VAR(gbuffer, SVO_POSITION).xyz = clamp(GBUFFER_GLOBAL_VAR(gbuffer, SVO_POSITION).xyz, vec3(0), vec3(1));
# endif


	vec3 vecAxis = (triangleAxis == 0) ? vec3(0.0f, 0.0f, 1.0f) : ((triangleAxis == 1) ? vec3(0.0f, 1.0f, 0.0f) : vec3(1.0f, 0.0f, 0.0f));

# ifdef GBUFFER_CHANNEL_gbuffer_WS_NORMAL
	GBUFFER_GLOBAL_VAR(gbuffer, WS_NORMAL).a = 1.0f;
# endif
# ifdef GBUFFER_CHANNEL_gbuffer_LAMBERTIAN
	GBUFFER_GLOBAL_VAR(gbuffer, LAMBERTIAN).a = alpha*alpha;
# endif


	//GBUFFER_GLOBAL_VAR(gbuffer, WS_NORMAL).xyzw = vec4(1.0f);


    if(	GBUFFER_GLOBAL_VAR(gbuffer, SVO_POSITION).x>0.0f && GBUFFER_GLOBAL_VAR(gbuffer, SVO_POSITION).x<1.0f &&
		GBUFFER_GLOBAL_VAR(gbuffer, SVO_POSITION).y>0.0f && GBUFFER_GLOBAL_VAR(gbuffer, SVO_POSITION).y<1.0f &&
		GBUFFER_GLOBAL_VAR(gbuffer, SVO_POSITION).z>0.0f && GBUFFER_GLOBAL_VAR(gbuffer, SVO_POSITION).z<1.0f ) 
	{

# if 0	//Standard path


		GBUFFER_GLOBAL_VAR(gbuffer, SVO_POSITION).xyz -= vecAxis * invResolution;

		for (int zoff = 0; zoff<3; zoff++){

			uint fragmentCount = uint(imageAtomicAdd(fragmentCounter_buffer, 0, uint(1)));
			int2 outCoord = int2(int(fragmentCount & uint(BUFFER_WIDTH_MASK)), int(fragmentCount >> uint(BUFFER_WIDTH_SHIFT)));

			GBUFFER_WRITE_GLOBAL_VARS(gbuffer, outCoord );

			
			GBUFFER_GLOBAL_VAR(gbuffer, SVO_POSITION).xyz += vecAxis * invResolution;

		}
# else

#  if 1

		vec3 centerSVOPos = GBUFFER_GLOBAL_VAR(gbuffer, SVO_POSITION).xyz;
		float centerDepth = dot(centerSVOPos, vecAxis);


#if 0
		float svoDepthAtCorners[4];

		svoDepthAtCorners[0] =  dot( interpolateAtOffset(svoPosition, vec2(-0.5f, -0.5f)), vecAxis);
		svoDepthAtCorners[1] =  dot( interpolateAtOffset(svoPosition, vec2(0.5f, -0.5f)), vecAxis);
		svoDepthAtCorners[2] =  dot( interpolateAtOffset(svoPosition, vec2(0.5f, 0.5f)), vecAxis);
		svoDepthAtCorners[3] =  dot( interpolateAtOffset(svoPosition, vec2(-0.5f, 0.5f)), vecAxis);

		float minDepth = min(svoDepthAtCorners[0], min(svoDepthAtCorners[1], min(svoDepthAtCorners[2], svoDepthAtCorners[3])));
		float maxDepth = max(svoDepthAtCorners[0], max(svoDepthAtCorners[1], max(svoDepthAtCorners[2], svoDepthAtCorners[3])));

#else

		vec2 eyeZDxDy= vec2(dFdx( centerDepth ), dFdy( centerDepth ))*0.5f;		// *0.5f;

		vec4 eyeZCorners=vec4( centerDepth-eyeZDxDy.x-eyeZDxDy.y, centerDepth +eyeZDxDy.x-eyeZDxDy.y, centerDepth -eyeZDxDy.x+eyeZDxDy.y, centerDepth +eyeZDxDy.x+eyeZDxDy.y) ;

		float minDepth = min(eyeZCorners.x, min(eyeZCorners.y, min(eyeZCorners.z, eyeZCorners.w))) ;
		float maxDepth = max(eyeZCorners.x, max(eyeZCorners.y, max(eyeZCorners.z, eyeZCorners.w))) ;

		
#endif
		
		const float volResF = 512.0f;

		minDepth = (floor(minDepth*volResF))/volResF;
		maxDepth = (ceil(maxDepth*volResF-0.5f))/volResF;
		//maxDepth = (floor(maxDepth*volResF))/volResF;

		minDepth -= centerDepth;
		maxDepth -= centerDepth;

		for (float zoff = minDepth; zoff<=maxDepth; zoff+=1.0f/volResF){
			uint fragmentCount = uint(imageAtomicAdd(fragmentCounter_buffer, 0, uint(1)));
			int2 outCoord = int2(int(fragmentCount & uint(BUFFER_WIDTH_MASK)), int(fragmentCount >> uint(BUFFER_WIDTH_SHIFT)));


			GBUFFER_GLOBAL_VAR(gbuffer, SVO_POSITION).xyz = centerSVOPos + (vecAxis * (zoff)*1.0f);

			GBUFFER_WRITE_GLOBAL_VARS(gbuffer, outCoord );
		}

#  else
		//Experimental path : conservative voxel generation in depth 

		//float curResF=float(curRes);
		//float eyeZ=(inPos.z+1.0f)*0.5f *curResF;
		float eyeZ= (2.0 * gl_FragCoord.z - gl_DepthRange.near - gl_DepthRange.far) / (gl_DepthRange.far - gl_DepthRange.near);

		vec2 eyeZDxDy= vec2(dFdx( eyeZ ), dFdy( eyeZ ))*0.5f;// *0.5f;

		vec4 eyeZCorners=vec4( eyeZ-eyeZDxDy.x-eyeZDxDy.y, eyeZ +eyeZDxDy.x-eyeZDxDy.y, eyeZ -eyeZDxDy.x+eyeZDxDy.y, eyeZ +eyeZDxDy.x+eyeZDxDy.y);
			
		vec2 eyeZMinMax;
		eyeZMinMax.x=min(min(min(eyeZCorners.x, eyeZCorners.y), eyeZCorners.z), eyeZCorners.w);
		eyeZMinMax.y=max(max(max(eyeZCorners.x, eyeZCorners.y), eyeZCorners.z), eyeZCorners.w);
		eyeZMinMax*=1.0f;

		vec2 voxZMinMax=vec2(eyeZMinMax);
		vec2 voxZOffset=(voxZMinMax-(eyeZ));
		float offsetOffset=1.0f/2048.0f;//abs(voxZMinMax.y-voxZMinMax.x)/0.050f;

		vec3 oriSVOPos = GBUFFER_GLOBAL_VAR(gbuffer, SVO_POSITION).xyz;

		//for(float offset=voxZMinMax.x; offset<=voxZMinMax.y; offset+=offsetOffset)
		for(int offset=-1; offset<=1; offset++)
		{

			vec3 voxCoordsLoc=oriSVOPos;
			if(triangleAxis==2){
				voxCoordsLoc.x += float(offset)*offsetOffset;
			}else if(triangleAxis==1){
				voxCoordsLoc.y += float(offset)*offsetOffset;
			}else{
				voxCoordsLoc.z += float(offset)*offsetOffset;
			}


			uint fragmentCount = uint(imageAtomicAdd(fragmentCounter_buffer, 0, 1U ));
			int2 outCoord = int2(int(fragmentCount & uint(BUFFER_WIDTH_MASK)), int(fragmentCount >> uint(BUFFER_WIDTH_SHIFT)));

			GBUFFER_GLOBAL_VAR(gbuffer, SVO_POSITION).xyz = voxCoordsLoc;

			GBUFFER_WRITE_GLOBAL_VARS(gbuffer, outCoord );

			//...

		}
#  endif
#endif

    }

}
/* end of SS_GBuffer.pix */
