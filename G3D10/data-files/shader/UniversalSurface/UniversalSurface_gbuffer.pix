#version 330 or 420 compatibility // -*- c++ -*-
/** 
  \file UniversalSurface_GBuffer.pix 
  \author Morgan McGuire, http://graphics.cs.williams.edu
    
  This shader expects a prefix (GBuffer::macros() or SVO::macros()) to be attached
  at runtime using Shader::setPremable.

  If USE_IMAGE_STORE is defined and set to a non-zero value, then the OpenGL image store
  API is used instead of framebuffer write.  In this case, you will probably want to
  disable framebuffer writes (color mask) using RenderDevice::setColorWrite(false).

  Requires BUFFER_WIDTH_MASK = width - 1 and BUFFER_WIDTH_SHIFT = log_2(width) to be
  passed, where width is a power of 2.
*/
#extension GL_ARB_shader_atomic_counters : enable
#extension GL_ARB_shader_image_load_store : enable
#extension GL_ARB_separate_shader_objects : enable

#include <compatibility.glsl>
#include <UniversalMaterial/UniversalMaterial.glsl>
#include <UniversalMaterial/UniversalMaterial_sample.glsl>
#include <AlphaHint.glsl>

#expect USE_IMAGE_STORE "1 or 0"
#expect USE_DEPTH_PEEL "1 or 0"
#expect HAS_ALPHA "1 or 0"
#expect NUM_LIGHTMAP_DIRECTIONS "0, 1, or 3"
#expect HAS_EMISSIVE "Boolean"
#expect HAS_TRANSMISSIVE "Boolean"
#expect ALPHA_HINT
#expect HAS_NORMAL_BUMP_MAP "Boolean"
#expect PARALLAXSTEPS "int"
//#expect GBUFFER_STORE "GBUFFER_STORE(gbufferName, coord, sampleID)"

#if (__VERSION__ < 420) 
#   define layout(ignore)
#endif

uniform UniversalMaterial2D material;

/** Texture coordinate */
in layout(location=0) vec2 texCoord;

in layout(location=1) vec3 wsPosition;

/** Do not read color attributes (except LAMBERTIAN, if an alpha test is required)
    outside of this rectangle.  Used to implement the trim band outside of which
    only depth is recorded. */
uniform vec2            lowerCoord, upperCoord;

#if defined(CS_POSITION_CHANGE) || defined(SS_POSITION_CHANGE)
    in layout(location=7) vec3 csPrevPosition;
#endif

#if defined(SS_EXPRESSIVE_MOTION)
    in layout(location=8) vec3 csExpressivePrevPosition;
#endif

#if defined(SS_POSITION_CHANGE) || defined(SS_EXPRESSIVE_MOTION)
    // We reproject per-pixel so that csPrevPosition can be interpolated
    // linearly in the current frame's 3D; projecting the previous position
    // in the vertex shader would result in a previous homogeneous value
    // being linearly in the current time frame.
    uniform mat4 ProjectToScreenMatrix;
#endif

float backside = (gl_FrontFacing == g3d_InvertY) ?  1.0 : -1.0;

#if HAS_NORMAL_BUMP_MAP
#   if (PARALLAXSTEPS > 0)
        /** Un-normalized (interpolated) tangent space eye vector */
        in layout(location=6) vec3     _tsE;
#   else
        const vec3 _tsE = vec3(0.0, 0.0, 0.0);
#   endif    
    in layout(location=4)   vec3       tan_X;
    in layout(location=5)   vec3       tan_Y;

#include <BumpMap/BumpMap.glsl>

#else
    const vec3 tan_X = vec3(0.0, 0.0, 0.0);
    const vec3 tan_Y = vec3(0.0, 0.0, 0.0);
    const vec3 _tsE = vec3(0.0, 0.0, 0.0);
#endif
    
in layout(location=2) vec3              tan_Z;

/** Index of refraction / 24.0 */
uniform float                           normalizedIndexOfRefraction;

#if HAS_VERTEX_COLOR
    in layout(location=10) vec4         vertexColor;
#else
    const vec4  vertexColor = vec4(0.0,0.0,0.0,0.0);
#endif

#ifdef SVO_POSITION
    in layout(location=8) vec3          svoPosition;
	flat in layout(location=9) int		triangleAxis;
#endif

#if (USE_DEPTH_PEEL != 0)
#   include <depthPeel.glsl>

    /** Need not be at the same resolution as the current depth buffer. 
        For samples to be written, they must be at greater gl_FragCoord.z values
        than those in this buffer.*/
    uniform sampler2D previousDepthBuffer;

    /**
     textureSize(previousDepthBuffer) / textureSize(currentDepthBuffer)
     */
    uniform float2    currentToPreviousScale;

    /** Minimum depth buffer value distance (on [0,1]) that new faces 
        must be beyond previousDepthBuffer to be written. */
    uniform float     minZSeparation;

    uniform float3    clipInfo;
#endif

void main() {
#   if (USE_DEPTH_PEEL != 0)
        if (isDepthPeeled(previousDepthBuffer, currentToPreviousScale, minZSeparation, gl_FragCoord.xyz, clipInfo)) {
            // We have to discard here to avoid writing to z, even though it causes us to lose early z tests on 2013-era hardware
            discard;
        }
#   endif

       // Check the color rect bounds
       if ((gl_FragCoord.x < lowerCoord.x) ||
           (gl_FragCoord.y < lowerCoord.y) ||
           (gl_FragCoord.x > upperCoord.x) ||
           (gl_FragCoord.y > upperCoord.y)) {
            // Outside of bounds, in the guard band. Perform a fast, non-parallax alpha test if required.

#           if HAS_ALPHA
                // Don't bother with parallax--we're in a guard band
                float alpha = texture(material.lambertian.sampler, texCoord).a * material.lambertian.readMultiplyFirst.a + material.lambertian.readAddSecond.a;
#               if HAS_VERTEX_COLOR
                    alpha *= vertexColor.a;
#               endif


                // Issue0001: Add support for MSAA here
                if (alpha < 1.0) {
                    discard;
                }
#           endif

            // Don't bother looking up attributes, just let the depth write straight through 
            return;
       }

       //////////////////////// MATERIAL //////////////////////////////

       bool discardIfFullCoverage = false;
       bool discardIfZeroCoverage = true;
       // No Lightmap support for deferred shading.
       vec2 lightMapCoord = vec2(0.0);

       UniversalMaterialSample materialSample = sampleUniversalMaterial2D(material, texCoord, lightMapCoord, tan_X, tan_Y, tan_Z, normalize(_tsE), backside, discardIfZeroCoverage, discardIfFullCoverage,
           vertexColor, ALPHA_HINT, PARALLAXSTEPS, bool(HAS_NORMAL_BUMP_MAP), bool(HAS_VERTEX_COLOR), bool(HAS_ALPHA), bool(HAS_TRANSMISSIVE), bool(HAS_EMISSIVE), NUM_LIGHTMAP_DIRECTIONS);

        vec3 wsN = materialSample.shadingNormal;
        vec3 tsN = materialSample.tsNormal;

        // Issue0001: Add MSAA support here (for coverage < 1.0 case)

    
#   ifdef LAMBERTIAN
        LAMBERTIAN.rgb = materialSample.lambertianReflectivity;
#   endif

#   ifdef EMISSIVE
        EMISSIVE.rgb = materialSample.emissive;
#   endif

#   ifdef TRANSMISSIVE
        TRANSMISSIVE = vec4(materialSample.transmissionCoefficient, materialSample.collimation);
#   endif

#   ifdef GLOSSY
        GLOSSY = vec4(materialSample.fresnelReflectionAtNormalIncidence, materialSample.smoothness);
/* TODO: take this into account here or later
#       if HAS_NORMAL_BUMP_MAP
            // normal variance -> glossy coefficient to resolve aliasing
            if (GLOSSY.a < 1.0) {
                GLOSSY.a = packGlossyExponent(computeToksvigGlossyExponent(unpackGlossyExponent(GLOSSY.a), rawNormalLength));
            }
#       endif
*/
#   endif

    ///////////////////////// NORMALS //////////////////////////////
#   ifdef CS_NORMAL
        vec3 csN = mat3(g3d_WorldToCameraMatrix) * wsN;
#   endif

#   if defined(WS_FACE_NORMAL) || defined(CS_FACE_NORMAL)
        vec3 wsFaceNormal = normalize(cross(dFdy(wsPosition), dFdx(wsPosition)));
#   endif

#   ifdef CS_FACE_NORMAL
        vec3 csFaceNormal = (g3d_WorldToCameraMatrix * vec4(wsFaceNormal, 0.0));
#   endif

#   foreach (NAME, name) in (WS_NORMAL, wsN), (CS_NORMAL, csN), (TS_NORMAL, tsN), (WS_FACE_NORMAL, wsFaceNormal), (CS_FACE_NORMAL, csFaceNormal), (SVO_POSITION, svoPosition)
#       ifdef $(NAME)
            $(NAME).xyz = $(name) * $(NAME)_writeMultiplyFirst.xyz + $(NAME)_writeAddSecond.xyz;
#       endif
#   endforeach

    //////////////////////// POSITIONS /////////////////////////////
    // NVIDIA drivers miscompile this unless we write WS_POSITION after the normals

#   if defined(CS_POSITION) || defined(CS_POSITION_CHANGE) || defined(SS_POSITION_CHANGE) || defined(SS_EXPRESSIVE_MOTION) || defined(CS_Z)
        vec3 csPosition = g3d_WorldToCameraMatrix * vec4(wsPosition, 1.0);
#   endif

#   ifdef CS_POSITION_CHANGE
        vec3 csPositionChange = csPosition - csPrevPosition;
#   endif

#   if defined(SS_POSITION_CHANGE) || defined(SS_EXPRESSIVE_MOTION)
        // gl_FragCoord.xy has already been rounded to a pixel center, so regenerate the true projected position.
        // This is needed to generate correct velocity vectors in the presence of Projection::pixelOffset
        vec4 accurateHomogeneousFragCoord = ProjectToScreenMatrix * vec4(csPosition, 1.0);
#   endif

#   ifdef SS_POSITION_CHANGE
        vec2 ssPositionChange;
        {
            if (csPrevPosition.z >= 0.0) {
                // Projects behind the camera; write zero velocity
                ssPositionChange = vec2(0.0);
            } else {
                vec4 temp = ProjectToScreenMatrix * vec4(csPrevPosition, 1.0);
                // We want the precision of division here and intentionally do not convert to multiplying by an inverse.
                // Expressing the two divisions as a single vector division operation seems to prevent the compiler from
                // computing them at different precisions, which gives non-zero velocity for static objects in some cases.
                // Note that this forces us to compute accurateHomogeneousFragCoord's projection twice, but we hope that
                // the optimizer will share that result without reducing precision.
                vec4 ssPositions = vec4(temp.xy, accurateHomogeneousFragCoord.xy) / vec4(temp.ww, accurateHomogeneousFragCoord.ww);

                ssPositionChange = ssPositions.zw - ssPositions.xy;
            }
        }
#   endif

#   ifdef SS_EXPRESSIVE_MOTION
        vec2 ssExpressiveMotion;
        {
            if (csExpressivePrevPosition.z >= 0.0) {
                // Projects behind the camera; write zero velocity
                ssExpressiveMotion = vec2(0.0);
            } else {
                vec4 temp = ProjectToScreenMatrix * vec4(csExpressivePrevPosition, 1.0);
                // We want the precision of division here and intentionally do not convert to multiplying by an inverse.
                // Expressing the two divisions as a single vector division operation seems to prevent the compiler from
                // computing them at different precisions, which gives non-zero velocity for static objects in some cases.
                // Note that this forces us to compute accurateHomogeneousFragCoord's projection twice, but we hope that
                // the optimizer will share that result without reducing precision.
                vec4 ssPositions = vec4(temp.xy, accurateHomogeneousFragCoord.xy) / vec4(vec2(temp.w), vec2(accurateHomogeneousFragCoord.w));

                ssExpressiveMotion = ssPositions.zw - ssPositions.xy;
            }
        }
#   endif


#   foreach (NAME, name, components) in (WS_POSITION, wsPosition, xyz), (CS_POSITION, csPosition, xyz), (CS_POSITION_CHANGE, csPositionChange, xyz), (SS_POSITION_CHANGE, ssPositionChange, xy), (SS_EXPRESSIVE_MOTION, ssExpressiveMotion, xy)
#       ifdef $(NAME)
            $(NAME).$(components) = $(name) * $(NAME)_writeMultiplyFirst.$(components) + $(NAME)_writeAddSecond.$(components);
#       endif
#   endforeach


#   ifdef CS_Z
        CS_Z.r = csPosition.z * CS_Z_writeMultiplyFirst.x + CS_Z_writeAddSecond.x;
#   endif

//    GBUFFER_STORE(gbufferName, coord, sampleID);
}
