#version 410 or 420// -*- c++ -*-

/**
  \file UniversalSurface/UniversalSurface_render.pix
  \author Morgan McGuire, http://graphics.cs.williams.edu

  \created 2009-12-18
  \edited  2016-09-09

  Copyright 2001-2016, Morgan McGuire
 */
#ifdef GL_ARB_texture_query_lod
#extension GL_ARB_texture_query_lod : enable    // For textureQueryLod
#endif

#expect ALPHA_HINT              "AlphaFilter (int) value"
#expect HAS_EMISSIVE            "Boolean"
#expect INFER_AMBIENT_OCCLUSION_AT_TRANSPARENT_PIXELS "Boolean"
#expect HAS_TRANSMISSIVE        "Boolean"
#expect UNBLENDED_PASS          "Boolean triggering discard for non-unit coverage"
#expect HAS_VERTEX_COLOR        "Boolean"
#expect HAS_NORMAL_BUMP_MAP     "Boolean"
#expect PARALLAXSTEPS           "int"
#expect NUM_LIGHTMAP_DIRECTIONS "0, 1, or 3"

#include <compatibility.glsl>
#include <g3dmath.glsl>
#include <LightingEnvironment/LightingEnvironment_uniforms.glsl>
#include <UniversalMaterial/UniversalMaterial.glsl>
#include <AlphaFilter.glsl>
#include <UniversalMaterial/UniversalMaterial_sample.glsl>
#include <reconstructFromDepth.glsl>

///////////////////////////////////////////////////
// Arguments for screen-space refraction

/** Image of the background plane */
uniform sampler2D   background;
uniform float2      backgroundMinCoord, backgroundMaxCoord;

/** Camera space z position of the background plane; Negative number */
uniform float       backgroundZ;

/** The depth buffer for the current framebuffer. It is not safe to read from
    this if the current pass is also writing to the depth buffer */
uniform sampler2D   depthBuffer;

/** For the current camera. Only has a defined value when rendering
    a partial coverage surface in a blended pass. */
uniform vec3        clipInfo;

uniform float       etaRatio;

uniform vec2        backSizeMeters;
///////////////////////////////////////////////////

uniform UniversalMaterial2D material;

float backside = (gl_FrontFacing == g3d_InvertY) ? 1.0 : -1.0;

uniform sampler2D   ambientOcclusion_buffer;
uniform vec3        ambientOcclusion_size;
uniform ivec2       ambientOcclusion_offset;

#if NUM_LIGHTMAP_DIRECTIONS > 0
    varying vec2 lightMapCoord;
#else
    vec2 lightMapCoord = vec2(0, 0);
#endif

/** Surface position in world space */
in Point3           wsPosition;

/** Surface position in camera space */
in Point3			csPosition;

in vec2             texCoord;
in vec3             tan_Z;

#if HAS_NORMAL_BUMP_MAP
#   if (PARALLAXSTEPS > 0)
        /** Un-normalized (interpolated) tangent space eye vector */
        in vec3     _tsE;
#   else
        const vec3 _tsE = vec3(0, 0, 0);
#   endif    
    in vec3         tan_X, tan_Y;
#else
    const vec3 _tsE  = vec3(0, 0, 0);
    const vec3 tan_X = vec3(0, 0, 0);
    const vec3 tan_Y = vec3(0, 0, 0);
#endif

// This must appear after UniversalMaterial and after the definition of tan_Z and backside because they use macros
#include <Light/Light.glsl>
    
Radiance3 computeRefraction
   (sampler2D       background,
    Point2          backgroundMinCoord, 
    Point2          backgroundMaxCoord, 
    float           backZ, 
    Vector3         csN,
    Point3          csPos, 
    float           etaRatio) {

    // Incoming ray direction from eye, pointing away from csPos
    Vector3 csw_i = normalize(-csPosition);

    // Refracted ray direction, pointing away from wsPos
    Vector3 csw_o = refract(-csw_i, csN, etaRatio); 

    bool totalInternalRefraction = (dot(csw_o, csw_o) < 0.01);
    if (totalInternalRefraction) {
        // No transmitted light
        return Radiance3(0.0);
    } else {
        // Take to the reference frame of the background (i.e., offset) 
        Vector3 d = csw_o;

        // Take to the reference frame of the background, where it is the plane z = 0
        Point3 P = csPos;
        P.z -= backZ;

        // Find the xy intersection with the plane z = 0
        Point2 hit = (P.xy - d.xy * P.z / d.z);

        // Hit is now scaled in meters from the center of the screen; adjust scale and offset based 
        // on the actual size of the background
        Point2 backCoord = (hit / backSizeMeters) + Vector2(0.5);

        if (! g3d_InvertY) {
            backCoord.y = 1.0 - backCoord.y;
        }
        
        // Issue0002: lerp to environment map as we approach the boundaries of the guard band
        return texture(background, clamp(backCoord, backgroundMinCoord, backgroundMaxCoord)).rgb;
    }
}

#if HAS_VERTEX_COLOR
    in vec4 vertexColor;
#else
    const Color4 vertexColor = Color4(0,0,0,0);
#endif
    

#ifdef DECLARE_writePixel
    DECLARE_writePixel
#else
    out float4 _result; void writePixel(Radiance3 premultipliedReflectionAndEmission, float coverage, Color3 transmissionCoefficient, float collimation, float etaRatio, Point3 csPosition, Vector3 csNormal) { _result = vec4(premultipliedReflectionAndEmission, coverage); }
#endif
  

/** Used for inferred AO. Returns weighted AO, weight based on depth locality */
float2 sampleNeighborAO(vec2 offset, float myZ, vec3 clipInfo) {
    ivec2 coord = ivec2(gl_FragCoord.xy + offset);

    // Read the depth at the offset coordinate
    float neighborDepth = texelFetch(depthBuffer, coord, 0).r;
    float neighborZ = reconstructCSZ(neighborDepth, clipInfo);

    // Read the AO at the offset coordinate
    float AO = texelFetch(ambientOcclusion_buffer, clamp(coord + ambientOcclusion_offset, ivec2(0), ivec2(ambientOcclusion_size.xy - vec2(1, 1))), 0).r;

    float weight = 0.01 / (0.01 + abs(neighborZ - myZ));

    return float2(AO * weight, weight);
}


void main() {    
    vec3 wsEyePos = g3d_CameraToWorldMatrix[3].xyz;

    // Eye vector
    vec3 wsE = normalize(wsEyePos - wsPosition);
    // or... (tangentToWorld * vec4(tsE, 0.0)).xyz;
    const bool discardIfFullCoverage = (UNBLENDED_PASS == 0);
    const bool discardIfZeroCoverage = true;
    UniversalMaterialSample materialSample = sampleUniversalMaterial2D(material, wsPosition, texCoord, lightMapCoord, tan_X, tan_Y, tan_Z, normalize(_tsE), backside, discardIfZeroCoverage, discardIfFullCoverage,
        vertexColor, ALPHA_HINT, PARALLAXSTEPS, bool(HAS_NORMAL_BUMP_MAP), bool(HAS_VERTEX_COLOR), bool(HAS_ALPHA), bool(HAS_TRANSMISSIVE), bool(HAS_EMISSIVE), NUM_LIGHTMAP_DIRECTIONS);
    vec3 E_ambient = vec3(0.0);

#   if UNBLENDED_PASS && HAS_TRANSMISSIVE && ! defined(REFRACTION)
        if (materialSample.transmissionCoefficient.r + materialSample.transmissionCoefficient.g + materialSample.transmissionCoefficient.b != 0) {
            // This pixel needs blending. Remove it from this unblended pass.
            discard;
        }
#   endif

#   if NUM_LIGHTMAP_DIRECTIONS == 0
        E_ambient += computeLambertianEnvironmentMapLighting(materialSample.shadingNormal);
#   elif NUM_LIGHTMAP_DIRECTIONS == 2
#       error Illegal number of lightMap directions
#   else
        E_ambient += materialSample.lightMapRadiance;
#   endif

    const vec3 BLACK = vec3(0.0, 0.0, 0.0);
    Color3 E_glossy = BLACK, E_glossyAmbient = BLACK;
                
    float glossyExponent = 1, glossyCoefficient = 0;
    // We separate out the normal used for glossy reflection from the one used for shading in general
    // to allow subclasses to easily compute anisotropic highlights
    Color3 glossyColor;
        
    Color3 F = Color3(0);
    Color3 lambertianCoefficient;
    {        
        float cos_o = dot(materialSample.glossyShadingNormal, wsE);
        F = schlickFresnel(materialSample.fresnelReflectionAtNormalIncidence, max(0.0, cos_o), materialSample.smoothness);

        // Modulate the lambertian color by the Fresnel factor; this
        // ensures energy conservation at glancing angles under
        // Fresnel effects.
        lambertianCoefficient = (1.0 - F) * materialSample.lambertianReflectivity * invPi;

        glossyExponent = smoothnessToBlinnPhongExponent(materialSample.smoothness);

        // Energy-normalized coefficient needed for applying the BRDF glossy lobe.
        // F alone is the wavelength-varying magnitude of reflection integrated over the hemisphere.
        //
        // G = F * (s_X + 8) / (8 pi)
        glossyColor = F * ((glossyExponent + 8.0) / (8.0 * pi));

        // Mirror reflection vector
        vec3 w_mi = normalize(materialSample.glossyShadingNormal * (2.0 * cos_o) - wsE);

        // Take out the normalization factor from the exponent, since that is a normalization
        // of the cosine lobe which does not appear for environment lighting
        E_glossyAmbient += computeGlossyEnvironmentMapLighting(w_mi, (materialSample.smoothness == 1.0), glossyExponent, false) / ((glossyExponent + 8.0) / (8.0 * pi));
    }
       
    Color3 E_lambertian = Color3(0.0);
    // The last argument just has to be any shader to make the code compile
    computeDirectLighting(materialSample.shadingNormal, materialSample.glossyShadingNormal, wsE, tan_Z, backside, wsPosition, glossyExponent, E_lambertian, E_glossy, material.lambertian.sampler);
    
    // Emission
    Radiance3 L_o = materialSample.emissive;

    Color3 transmissionCoefficient = materialSample.transmissionCoefficient * (Color3(1.0) - F) * (Color3(1.0) - lambertianCoefficient);

    // This csNormal computation compiles away if not using refraction
    Vector3 csNormal = normalize(mat3(g3d_WorldToCameraMatrix) * materialSample.shadingNormal);
#   if UNBLENDED_PASS && defined(REFRACTION)
    if (transmissionCoefficient.r + transmissionCoefficient.g + transmissionCoefficient.b > 0){
        // Refraction is handled as an "opaque" pass in the sense that it writes to the depth buffer
        // and paints the refraction onto the object's surface

        Radiance3 L_refracted = computeRefraction(background, backgroundMinCoord, backgroundMaxCoord, backgroundZ, csNormal, csPosition, material.etaRatio);
        L_o += L_refracted * transmissionCoefficient;
        // We're painting the background color directly onto the surface for refraction, so there is no additional
        // transmitted light (N.B. there may be partial coverage, however, which will be factored in by the blending)
        transmissionCoefficient = Color3(0.0);
    }
#   endif

    float AO = 1.0;
#   if defined(ambientOcclusion_notNull)
#       if UNBLENDED_PASS
            // There is no blending...normal situation
            AO = texelFetch(ambientOcclusion_buffer, min(ivec2(gl_FragCoord.xy) + ambientOcclusion_offset, ivec2(ambientOcclusion_size.xy - vec2(1, 1))), 0).r;
#       elif INFER_AMBIENT_OCCLUSION_AT_TRANSPARENT_PIXELS && ! HAS_TRANSMISSIVE
            {
                // Steal local AO for partial coverage. This is wrong in many cases, but should be fairly
                // temporally coherent and keeps the edges of alpha cutouts from appearing too bright.
                
                // Compute the gradient of alpha; that is the direction to march to blend AO. 
                vec2 gradient = vec2(dFdx(materialSample.coverage), dFdy(materialSample.coverage));
                float L = length(gradient);

                float2 sum = float2(0);
                if (L < 1e-4) {
                    // Sample densely in a small neighborhood, since the gradient was negligible.
                    // This is primarily used right near the alpha = 1 portion of the surface.
                    const int R = 3;
                    const float stride = 2;

                    for (int dy = -R; dy <= R; ++dy) {
                        // Offset alternating rows (in the 3x3 case, the 1st and last)
                        // To reduce sampling artifacts from a regular grid
                        float dxShift = ((abs(dy) & 1) - 0.5);
                        for (int dx = -R; dx <= R; ++dx) {
                            sum += sampleNeighborAO(vec2(dx + dxShift, dy) * stride, csPosition.z, clipInfo);
                        }
                    }
                } else {
                    // Step in the gradient direction
                    vec2 dir = gradient * (1.0 / L);
                    const int R = 12;
                    const int stride = 3;
                    for (float t = 0; t < R; ++t) {
                        sum += sampleNeighborAO(dir * (t * stride), csPosition.z, clipInfo);
                    }
                }
                AO = clamp(sum.x / max(0.01, sum.y), 0.0, 1.0);
            }
#       endif

        // AO scale and bias
        AO = 0.95 * AO + 0.05;
#   endif

    // How much ambient occlusion to apply to direct illumination (sort of approximates area lights,
    // more importantly: NPR term that adds local contrast)
    const float aoInfluenceOnDirectIllumination = 0.65;
    float directAO = lerp(1.0, AO, aoInfluenceOnDirectIllumination);
    
    // Outgoing light
    L_o += (E_lambertian * directAO + E_ambient       * AO) * lambertianCoefficient +
           (E_glossy     * directAO + E_glossyAmbient * AO) * glossyColor;

    writePixel(L_o * materialSample.coverage, materialSample.coverage, transmissionCoefficient, materialSample.collimation,
#       ifdef REFRACTION
            material.etaRatio,
#       else
            1.0,
#       endif
        csPosition, csNormal);

}
