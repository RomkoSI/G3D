#version 330// -*- c++ -*-

#include <compatibility.glsl>
#include <g3dmath.glsl>
#include <reconstructFromDepth.glsl>
#include <UniversalMaterial/UniversalMaterial.glsl>
#include <UniversalMaterial/UniversalMaterial_sample.glsl>

#expect ALPHA_HINT "int"

uniform UniversalMaterial2D material;

const float SOFT_PARTICLE_FADE_DISTANCE = 0.6;

uniform sampler2D depthBuffer;
uniform float3    clipInfo;

#include "ParticleSurface_helpers.glsl"
in RenderGeometryOutputs geoOutputs;

uniform float backgroundZ;
uniform float backSizeMeters;

#ifdef DECLARE_writePixel
    DECLARE_writePixel
#else
    out Color4 _result; void writePixel(Radiance3 premultipliedReflectionAndEmission, float coverage, Color3 transmissionCoefficient, float collimation, float etaRatio, Point3 csPosition, Vector3 csNormal) { _result = vec4(premultipliedReflectionAndEmission, coverage); }
#endif

float random(Point3 p) {
    return frac(sin(p.x * 1e2 + p.y) * 1e5 + sin(p.y * 1e3 + p.z * 1e2) * 1e3);
}

void main() {

    float depth = texelFetch(depthBuffer, int2(gl_FragCoord.xy), 0).r;
    float opaqueCSZ = reconstructCSZ(depth, clipInfo);

    Point2 offsetTexCoord = geoOutputs.texCoord.xy;
    Color3 lambertianColor;
    float coverage = 1.0;
    {
        vec4 temp = sampleTexture(material.lambertian, offsetTexCoord);

        lambertianColor = temp.rgb * invPi;
        coverage = temp.a;
    }

    // Fade out by the missing precision in an 8-bit value, moving towards zero. TODO: more efficient hash
    float rnd = random(geoOutputs.csPosition) / 256.0;

    // Screen door effect, but less temporal flicker:
    // float rnd = random(gl_FragCoord.xyy) / 256.0;
    coverage = clamp(coverage * geoOutputs.color.a * 257.0 / 256.0 - rnd, 0.0, 1.0);

    // Switch to premultiplied alpha
    Color4 finalColor = Color4(lambertianColor * geoOutputs.color.rgb * coverage, coverage); 

    // Soft particle fade (must apply to color as well as alpha because everything is premultiplied)
    finalColor *= min(abs(opaqueCSZ - geoOutputs.csPosition.z) * (1.0 / SOFT_PARTICLE_FADE_DISTANCE), 1.0);
    
    Vector3 csNormal = Vector3(0, 0, 1);

    Color3 transmissionColor = Color3(0.0);
    float collimation = 1.0;
    
    if (material.transmissive.notNull) {
        vec4 tmp = sampleTexture(material.transmissive, offsetTexCoord);
        // G3D BRDF rules: glossy overrides lambertian overrides reflectance along each channel.
        // We use F instead of glossyColor because glossyColor incorporates the BRDF normalizing
        // constant for the individual lobes.
        transmissionColor = tmp.rgb * (Color3(1.0)) * (Color3(1.0) - lambertianColor);
        collimation = tmp.a; 
    }

    if (material.emissive.notNull) {
        vec4 emissive = sampleTexture(material.emissive, offsetTexCoord);
        finalColor.rgb += emissive.rgb * emissive.a;
    }

    writePixel(finalColor.rgb, finalColor.a, transmissionColor, collimation,
#       ifdef REFRACTION
            material.etaRatio,
#       else
            1.0,
#       endif
        geoOutputs.csPosition, csNormal);
}
    
