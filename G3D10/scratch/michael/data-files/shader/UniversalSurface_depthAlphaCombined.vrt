#version 330  
#extension GL_ARB_shader_draw_parameters : enable
// -*- c++ -*-
/**
     \file UniversalSurface_depthOnly.vrt
     \author Michael Mara, http://www.illuminationcodified.com
     \created 2012-10-06
     \edited  2014-07-04
 */
#include <g3dmath.glsl>
#include <UniversalSurface/UniversalSurface_vertexHelpers.glsl>

#expect HAS_ALPHA
#expect HAS_BONES

in vec4 g3d_Vertex;

#if HAS_ALPHA != 0
    in Point2 g3d_TexCoord0;

#   if (HAS_BONES == 0)
        out vec2 texCoord;
#   endif
#endif

#if defined(PARALLAXSTEPS) 
#  if (PARALLAXSTEPS > 0)

    in Vector3 g3d_Normal;
    in vec4 g3d_PackedTangent;

    /** Vector to the eye in tangent space (needed for parallax) */
    out Vector3 _tsE;

    /** Tangent space to world space.
    Note that this will be linearly interpolated across the polygon. */
    out Vector3 tan_X, tan_Y;

    out Vector3 tan_Z; 
    
    out Point3 wsPosition;
#  endif
#endif

#if (HAS_BONES > 0)
    in vec4             g3d_BoneWeights;
    in ivec4            g3d_BoneIndices;
    uniform sampler2D   boneMatrixTexture;
#   include <UniversalSurface/UniversalSurface_vertex.glsl>
#endif

    flat out int materialID;
    

void main() {
    vec4 vertex = g3d_Vertex;
    vec3 normal = vec3(0, 1, 0);
    vec4 packedTangent = vec4(0);
    materialID = gl_DrawIDARB;
#   if defined(PARALLAXSTEPS)
#     if (PARALLAXSTEPS > 0)
        normal = g3d_Normal.xyz;
        packedTangent = g3d_PackedTangent;
#     endif
#   endif

    vec2 tex0, tex1;
#   if (HAS_ALPHA != 0)
        tex0      = g3d_TexCoord0;
#   endif
    UniversalSurface_customOSVertexTransformation(vertex, normal, packedTangent, tex0, tex1);

#   if (HAS_BONES > 0)
#       if defined(PARALLAXSTEPS)
#         if PARALLAXSTEPS > 0
                UniversalSurface_boneTransform(g3d_BoneWeights, g3d_BoneIndices, boneMatrixTexture, vertex, normal, packedTangent);
#         else
                mat4 boneMatrix = UniversalSurface_getFullBoneTransform(g3d_BoneWeights, g3d_BoneIndices, boneMatrixTexture);
                vertex = boneMatrix * vertex;
#         endif
#       else
	            mat4 boneMatrix = UniversalSurface_getFullBoneTransform(g3d_BoneWeights, g3d_BoneIndices, boneMatrixTexture);
                vertex = boneMatrix * vertex;	   
#       endif
#   endif

#   if (HAS_ALPHA != 0)
#       if defined(PARALLAXSTEPS) 
#         if (PARALLAXSTEPS > 0)
            wsPosition = (g3d_ObjectToWorldMatrix * vertex).xyz;

            tan_Z = g3d_ObjectToWorldNormalMatrix * normal;
    
            tan_X = (g3d_ObjectToWorldMatrix * vec4(packedTangent.xyz, 0)).xyz;

            // T and N are guaranteed perpendicular, so B is normalized.  Its facing 
	        // direction is stored in the texcoord w component.
	        tan_Y = cross(tan_Z, tan_X) * packedTangent.w;

            // Compute the tangent space eye vector (ATI does not support the transpose operator)
            mat3 worldToTangent = mat3(tan_X.x, tan_Y.x, tan_Z.x,
                                       tan_X.y, tan_Y.y, tan_Z.y,
                                       tan_X.z, tan_Y.z, tan_Z.z);

            vec3 wsEyePos = g3d_CameraToWorldMatrix[3].xyz;
            _tsE          = worldToTangent * (wsEyePos - wsPosition);
#         endif
#       endif

        texCoord      = tex0;
#   endif

    gl_Position   = vertex * g3d_ObjectToScreenMatrixTranspose;
}
