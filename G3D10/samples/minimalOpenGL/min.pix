#version 410 // -*- c++ -*-

const float PI = 3.1415927;

in Varying {
    vec3            normal;
    vec2            texCoord;
    vec3            position;
} interpolated;


layout(shared, row_major) uniform Uniform {
    mat3x3      objectToWorldNormalMatrix;
    mat4x4      objectToWorldMatrix;
    mat4x4      modelViewProjectionMatrix;
    vec3        light;
    vec3        cameraPosition;
} object;

uniform sampler2D   colorTexture;

out vec4            pixelColor;


void main () {
    vec3 normal          = normalize(interpolated.normal);

    // Simple normalized Blinn-Phong BRDF
    vec3 lambertianReflectance = texture(colorTexture, interpolated.texCoord).rgb * 0.8;

    float glossyExponent = 100.0;
    vec3 glossyReflectance = vec3(0.2 * (glossyExponent + 8.0) / 8.0);

    vec3 view            = normalize(object.cameraPosition - interpolated.position);
    vec3 halfVector      = normalize(object.light + view);

    vec3 lightRadiance   = vec3(0.8, 0.75, 0.7) * 4.0;
    vec3 ambientRadiance = vec3(0.2, 0.25, 0.35) * 3.0;
    float cosTheta = max(0.0, dot(normal, object.light));

    // Approximately gamma correct
    pixelColor.rgb = sqrt(((lambertianReflectance + glossyReflectance * pow(max(0.0, dot(normal, halfVector)), glossyExponent)) * cosTheta * lightRadiance + 
                           lambertianReflectance * ambientRadiance) / PI);
    pixelColor.a = 1.0;
}

