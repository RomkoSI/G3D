
/* -*- c++ -*- */
{ 

    /* Each entity has a name and is an instance of a model.  The instantiation syntax accepts
        two (optional) arguments: a position spline (which can be a single position), and a
        pose spline (which can be a single pose). */
    entities = { 
        building = VisibleEntity { 
            canChange = false; 
            model = "sponzaModel"; 
            visible = true; 
        }; 

        statue = VisibleEntity { 
            canChange = false; 
            model = "statueModel"; 
            frame = CFrame::fromXYZYPRDegrees(-14, 2.9, 3.0, -90, 0, 0); 
            visible = true; 
        };

        skybox = Skybox { 
            texture = "cubemap/noonclouds/noonclouds_*.png"; 
        }; 
        
        sun = Light { 
            attenuation = ( 0, 0, 1 ); 
            bulbPower = Power3(4e+007 ); 
            castsShadows = true; 
            enabled = true; 
            frame = CFrame::fromXYZYPRDegrees(-5.5767, 207.755, -37.952, -180, -73.5466, 90 ); 
            nearPlaneZLimit = -170; 
            producesDirectIllumination = true; 
            producesIndirectIllumination = true; 
            shadowMapSize = Vector2int16(2048, 2048 ); 
            spotHalfAngleDegrees = 5; 
            spotSquare = true; 
            type = "SPOT"; 
        }; 


        dynamicBlueOrb = VisibleEntity { 
            castsShadows = false; 
            model = "blueOrbModel"; 
            track = PFrameSpline { 
                control = ( 
                    CFrame::fromXYZYPRDegrees(10.2399, 1.68949, -2.45834, 116.679, 0.0548282 ), 
                    CFrame::fromXYZYPRDegrees(6.40264, 3.07359, 0.259886, 134.442, 28.7027 ), 
                    CFrame::fromXYZYPRDegrees(3.59201, 5.66381, 1.624, 153.349, 5.78441 ), 
                    CFrame::fromXYZYPRDegrees(-0.803997, 5.75501, 3.98568, 92.0428, 0.627796 ), 
                    CFrame::fromXYZYPRDegrees(-7.35383, 5.69478, 4.06013, 2.08804, -2.23712 ), 
                    CFrame::fromXYZYPRDegrees(-11.1407, 5.53176, 1.59912, -19.6843, -3.95587 ), 
                    CFrame::fromXYZYPRDegrees(-11.0455, 5.34818, -4.05481, -90.1586, -0.518121 ), 
                    CFrame::fromXYZYPRDegrees(-4.34075, 5.42604, -4.3737, -86.7209, -0.518121 ), 
                    CFrame::fromXYZYPRDegrees(0.31051, 5.51211, -3.7668, -141.725, 2.34667 ), 
                    CFrame::fromXYZYPRDegrees(5.2423, 3.1526, 0.0721042, -93.0234, -30.3119 ) ); 
                
                extrapolationMode = "CYCLIC"; 
                finalInterval = 1; 
                interpolationMode = "CUBIC"; 
                time = ( 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ); 
            }; 
            
            visible = false; 
        }; 
        
        dynamicBlueOrbLight = Light { 
            enabled = false; 
            bulbPower = Power3(0, 400, 800 ); 
            castsShadows = false; 
            track = combine(Matrix4::identity(), entity("dynamicBlueOrb") ); 
            type = "OMNI"; 
        }; 

        dynamicSun = Light { 
            attenuation = ( 0, 0, 1 ); 
            bulbPower = Power3(2e+007 ); 
            castsShadows = true; 
            enabled = false; 
            frame = CFrame::fromXYZYPRDegrees(-5.5767, 207.755, -37.952, -180, -73.5466, 90 ); 

            track = 
                  with({
                        target = Point3(0,0,0);
                        spline = PFrameSpline { 
                            control = (  
                                CFrame::fromXYZYPRDegrees(-5.5767, 207.755, -57.952 ), 
                                CFrame::fromXYZYPRDegrees(-5.5767, 227.755, 0.0 ), 
                                CFrame::fromXYZYPRDegrees(-5.5767, 207.755, 57.952, 0 ),
                                CFrame::fromXYZYPRDegrees(-5.5767, 207.755, 57.952, 0),
                                CFrame::fromXYZYPRDegrees(-5.5767, 227.755, 0.0 ), 
                                CFrame::fromXYZYPRDegrees(-5.5767, 207.755, -57.952 )
                                ); 

                            extrapolationMode = "CYCLIC"; 
                            finalInterval = -2; 
                            interpolationMode = "CUBIC"; 
                            time = ( 0, 2, 4, 6, 8, 10 ); 
                        };                        
                       },

                       lookAt(spline, target, Vector3(1,0,0) )
                   );
                
            nearPlaneZLimit = -170; 
            producesDirectIllumination = true; 
            producesIndirectIllumination = true; 
            shadowMapSize = Vector2int16(4096, 4096 ); 
            spotHalfAngleDegrees = 6; 
            spotSquare = true; 
            type = "SPOT"; 
        }; 
        

        staticAOCamera = 
        Camera { 
            depthOfFieldSettings = DepthOfFieldSettings { 
                enabled = false; 
                farBlurRadiusFraction = 0.005; 
                farBlurryPlaneZ = -55; 
                farSharpPlaneZ = -11; 
                focusPlaneZ = -10; 
                lensRadius = 0.01; 
                model = "ARTIST"; 
                nearBlurRadiusFraction = 0.00; 
                nearBlurryPlaneZ = -0.1; 
                nearSharpPlaneZ = -1; 
            }; 
            
            filmSettings = FilmSettings { 
                antialiasingEnabled = true; 
                antialiasingFilterRadius = 0; 
                antialiasingHighQuality = true; 
                bloomRadiusFraction = 0.009; 
                bloomStrength = 0.2; 
                debugZoom = 1; 
                gamma = 2.2; 
                sensitivity = 1.0; 
                toneCurve = Spline { 
                    control =  ( 0, 0.0787234, 0.306383, 0.75532, 0.829787 ); 
                    extrapolationMode = "LINEAR"; 
                    finalInterval = -1; 
                    interpolationMode = "CUBIC"; 
                    time =  ( 0, 0.169565, 0.339131, 0.752174, 1 ); 
                }; 
                
                vignetteBottomStrength = 0.05; 
                vignetteSizeFraction = 0.17; 
                vignetteTopStrength = 0.5; 
            }; 

            


            
            frame = CFrame::fromXYZYPRDegrees(-20.4f,  13.3f,   3.9f,   0.0f,  -9.1f,   0.0f); 
            motionBlurSettings = MotionBlurSettings { 
                cameraMotionInfluence = 1; 
                enabled = true; 
                exposureFraction = 0.25; 
                maxBlurDiameterFraction = 0.1; 
                numSamples = 15; 
            }; 
            
            projection = Projection { 
                farPlaneZ = -150; 
                fovDegrees = 77.5; 
                fovDirection = "VERTICAL"; 
                nearPlaneZ = -0.1; 
                pixelOffset = Vector2(0, 0 ); 
            }; 
            
            visualizationScale = 1; 
        }; 

        statuteStrafeCamera = 
        Camera { 
            depthOfFieldSettings = DepthOfFieldSettings { 
                enabled = false; 
                farBlurRadiusFraction = 0.005; 
                farBlurryPlaneZ = -55; 
                farSharpPlaneZ = -11; 
                focusPlaneZ = -10; 
                lensRadius = 0.01; 
                model = "ARTIST"; 
                nearBlurRadiusFraction = 0.00; 
                nearBlurryPlaneZ = -0.1; 
                nearSharpPlaneZ = -1; 
            }; 
            
            filmSettings = FilmSettings { 
                antialiasingEnabled = true; 
                antialiasingFilterRadius = 0; 
                antialiasingHighQuality = true; 
                bloomRadiusFraction = 0.009; 
                bloomStrength = 0.2; 
                debugZoom = 1; 
                gamma = 2.2; 
                sensitivity = 1.0; 
                toneCurve = Spline { 
                    control =  ( 0, 0.0787234, 0.306383, 0.75532, 0.829787 ); 
                    extrapolationMode = "LINEAR"; 
                    finalInterval = -1; 
                    interpolationMode = "CUBIC"; 
                    time =  ( 0, 0.169565, 0.339131, 0.752174, 1 ); 
                }; 
                
                vignetteBottomStrength = 0.05; 
                vignetteSizeFraction = 0.17; 
                vignetteTopStrength = 0.5; 
            }; 

            track = PFrameSpline { 
                control = ( 
                    
                    
                    CFrame::fromXYZYPRDegrees(-22.9f,   3.4f,  -9.8f, -143.6f,  -8.0f,   0.0f), 
                    CFrame::fromXYZYPRDegrees(-23.4f,   3.4f,   2.8f, -66.3f,  -2.8f,   0.0f),
                    CFrame::fromXYZYPRDegrees(-21.9f,   3.4f,   6.8f, -40.6f,  -6.2f,   0.0f)
                    ); 
                
                extrapolationMode = "CYCLIC"; 
                finalInterval = -1; 
                interpolationMode = "CUBIC"; 
                time = ( 0, 4, 6.3 ); 
            }; 


            
            frame = CFrame::fromXYZYPRDegrees(-23.4f,   3.4f,   2.8f, -66.3f,  -2.8f,   0.0f); 
            motionBlurSettings = MotionBlurSettings { 
                cameraMotionInfluence = 1; 
                enabled = true; 
                exposureFraction = 0.25; 
                maxBlurDiameterFraction = 0.1; 
                numSamples = 15; 
            }; 
            
            projection = Projection { 
                farPlaneZ = -150; 
                fovDegrees = 77.5; 
                fovDirection = "VERTICAL"; 
                nearPlaneZ = -0.1; 
                pixelOffset = Vector2(0, 0 ); 
            }; 
            
            visualizationScale = 1; 
        }; 

        pillarStrafeCamera = 
        Camera { 
            depthOfFieldSettings = DepthOfFieldSettings { 
                enabled = false; 
                farBlurRadiusFraction = 0.005; 
                farBlurryPlaneZ = -55; 
                farSharpPlaneZ = -11; 
                focusPlaneZ = -10; 
                lensRadius = 0.01; 
                model = "ARTIST"; 
                nearBlurRadiusFraction = 0.00; 
                nearBlurryPlaneZ = -0.1; 
                nearSharpPlaneZ = -1; 
            }; 
            
            filmSettings = FilmSettings { 
                antialiasingEnabled = true; 
                antialiasingFilterRadius = 0; 
                antialiasingHighQuality = true; 
                bloomRadiusFraction = 0.009; 
                bloomStrength = 0.2; 
                debugZoom = 1; 
                gamma = 2.2; 
                sensitivity = 1.0; 
                toneCurve = Spline { 
                    control =  ( 0, 0.0787234, 0.306383, 0.75532, 0.829787 ); 
                    extrapolationMode = "LINEAR"; 
                    finalInterval = -1; 
                    interpolationMode = "CUBIC"; 
                    time =  ( 0, 0.169565, 0.339131, 0.752174, 1 ); 
                }; 
                
                vignetteBottomStrength = 0.05; 
                vignetteSizeFraction = 0.17; 
                vignetteTopStrength = 0.5; 
            }; 

            track = PFrameSpline { 
                control = ( 
                    CFrame::fromXYZYPRDegrees(-20.2f,  11.65f,   1.2f,   4.2f,  -2.8f,   0.0f), 
                    CFrame::fromXYZYPRDegrees( 10.2f,  11.65f,  -1.0f,   4.2f,  -2.8f,   0.0f)
                    ); 
                
                extrapolationMode = "CYCLIC"; 
                finalInterval = -1; 
                interpolationMode = "CUBIC"; 
                time = ( 0, 10 ); 
            }; 


            
            frame = CFrame::fromXYZYPRDegrees(-23.4f,   3.4f,   2.8f, -66.3f,  -2.8f,   0.0f); 
            motionBlurSettings = MotionBlurSettings { 
                cameraMotionInfluence = 1; 
                enabled = true; 
                exposureFraction = 0.25; 
                maxBlurDiameterFraction = 0.1; 
                numSamples = 15; 
            }; 
            
            projection = Projection { 
                farPlaneZ = -150; 
                fovDegrees = 77.5; 
                fovDirection = "VERTICAL"; 
                nearPlaneZ = -0.1; 
                pixelOffset = Vector2(0, 0 ); 
            }; 
            
            visualizationScale = 1; 
        }; 

        staticStatueCamera = 
        Camera { 
            depthOfFieldSettings = DepthOfFieldSettings { 
                enabled = false; 
                farBlurRadiusFraction = 0.005; 
                farBlurryPlaneZ = -55; 
                farSharpPlaneZ = -11; 
                focusPlaneZ = -10; 
                lensRadius = 0.01; 
                model = "ARTIST"; 
                nearBlurRadiusFraction = 0.00; 
                nearBlurryPlaneZ = -0.1; 
                nearSharpPlaneZ = -1; 
            }; 
            
            filmSettings = FilmSettings { 
                antialiasingEnabled = true; 
                antialiasingFilterRadius = 0; 
                antialiasingHighQuality = true; 
                bloomRadiusFraction = 0.009; 
                bloomStrength = 0.2; 
                debugZoom = 1; 
                gamma = 2.2; 
                sensitivity = 1.0; 
                toneCurve = Spline { 
                    control =  ( 0, 0.0787234, 0.306383, 0.75532, 0.829787 ); 
                    extrapolationMode = "LINEAR"; 
                    finalInterval = -1; 
                    interpolationMode = "CUBIC"; 
                    time =  ( 0, 0.169565, 0.339131, 0.752174, 1 ); 
                }; 
                
                vignetteBottomStrength = 0.05; 
                vignetteSizeFraction = 0.17; 
                vignetteTopStrength = 0.5; 
            }; 
            
            frame = CFrame::fromXYZYPRDegrees(-23.8f,   3.4f,   1.2f, -91.5f,   1.8f,   0.0f); 
            motionBlurSettings = MotionBlurSettings { 
                cameraMotionInfluence = 1; 
                enabled = true; 
                exposureFraction =  0.25; 
                maxBlurDiameterFraction = 0.1; 
                numSamples = 15; 
            }; 
            
            projection = Projection { 
                farPlaneZ = -150; 
                fovDegrees = 77.5; 
                fovDirection = "VERTICAL"; 
                nearPlaneZ = -0.1; 
                pixelOffset = Vector2(0, 0 ); 
            }; 
            
            visualizationScale = 1; 
        };      
        
    }; 
    
    
    lightingEnvironment = LightingEnvironment { 
        ambientOcclusionSettings = AmbientOcclusionSettings { 
            bias = 0.042; 
            blurRadius = 2; 
            blurStepSize = 1; 
            depthPeelSeparationHint = 0.001; 
            edgeSharpness = 1; 
            enabled = true; 
            intensity = 1.2; 
            monotonicallyDecreasingBilateralWeights = false; 
            numSamples = 23; 
            radius = 1.0; 
            useDepthPeelBuffer = true; 
            useNormalBuffer = true; 
            useNormalsInBlur = true; 
        }; 
        
        
        environmentMap = Texture::Specification { 
            filename = "cube-*.png";  
            encoding = SRGB8; /*Texture::Encoding {
                
                readMultiplyFirst = 1.0;
            }; */
        }; 
        
        
    }; 
    

    models = { 
        sponzaModel = ArticulatedModel::Specification { 
            filename = "model/crytek_sponza/sponza.zip/sponza.obj"; 
            /* Switch the curtains to purple */
            preprocess = ( 
                setMaterial("sponza_284/fabric_a", UniversalMaterial::Specification { 
                        lambertian = "scene/sponza_curtain_purple.png"; 
                    } ); 
                setMaterial("sponza_321/fabric_c", UniversalMaterial::Specification { 
                        lambertian = "scene/sponza_curtain_purple.png"; 
                    } ); 
                setMaterial("sponza_283/fabric_d", UniversalMaterial::Specification { 
                        lambertian = "scene/sponza_curtain_purple.png"; 
                    } ); 
                setMaterial("sponza_282/fabric_e", UniversalMaterial::Specification { 
                        lambertian = "scene/sponza_curtain_purple.png"; 
                    } ); 
                setMaterial("sponza_322/fabric_f", UniversalMaterial::Specification { 
                        lambertian = "scene/sponza_curtain_purple.png"; 
                    } ); 
                setMaterial("sponza_320/fabric_g", UniversalMaterial::Specification { 
                        lambertian = "scene/sponza_curtain_purple.png"; 
                    } ) ); 
            
            scale = 
            /* stripMaterials = true; */
            0.02; 
            
        }; 

        statueModel = ArticulatedModel::Specification { 
            filename = "ifs/lucy.ply";
            scale = 0.005;
			preprocess = { 
                setMaterial(all(), UniversalMaterial::Specification {
						lambertian = Color3(0.95); 
						glossy = Color4(0.02,0.02,0.02,0.2);
                   } ) }; 
        };

        blueOrbModel = ArticulatedModel::Specification { 
            filename = "ifs/icosa.ifs"; 
            preprocess = { 
                setMaterial(all(), UniversalMaterial::Specification {
						lambertian = Color3(0); 
                        emissive = Power3(0, 8, 16 ); 
                    } ) }; 
            
            scale = 0.25; 
        }; 
        
    }; 
    
    name = "Sponza (Statue)"; 
    
    
    deepGBufferRadiositySettings = DeepGBufferRadiositySettings {  
        numSamples = 46;
        radius = 7.4;
        numBounces = 1; 
        saturatedBoost = 2; 
        unsaturatedBoost = 1; 
        useMipMaps = true; 

        blurRadius = 5;
        blurStepSize = 1;
        edgeSharpness = 1.0;
        monotonicallyDecreasingBilateralWeights = true;
        useDepthPeelBuffer = true;
        depthPeelSeparationHint = 1.6;

        temporallyVarySamples = true; 
        propagationDamping = 0.1;
        temporalFilterSettings = TemporalFilter::Settings {
            alpha = 0.92;
        };
        useTapNormal = true;
        
    }; 

    maxPerformanceDeepGBufferRadiosityPresets = DeepGBufferRadiositySettings {  
        numSamples = 19;
        radius = 7.4;
        numBounces = 1; 
        saturatedBoost = 2; 
        unsaturatedBoost = 1; 
        useMipMaps = true; 

        blurRadius = 4;
        blurStepSize = 2;
        edgeSharpness = 1.0;
        monotonicallyDecreasingBilateralWeights = true;
        useDepthPeelBuffer = true;
        depthPeelSeparationHint = 1.6;

        temporallyVarySamples = true; 
        propagationDamping = 0.1;
        temporalFilterSettings = TemporalFilter::Settings {
            alpha = 0.931;
        };

        useTapNormal = false;
        useHalfPrecisionColors = true;
        useOct16 = true;
        minMipLevel = 3;
        computeGuardBandFraction = 0.1;
    };

    BALANCEDDeepGBufferRadiosityPresets = DeepGBufferRadiositySettings {  
        numSamples = 14;
        minMipLevel = 2;
        radius = 7.4;
        numBounces = 1; 
        saturatedBoost = 2; 
        unsaturatedBoost = 1; 
        useMipMaps = true; 

        blurRadius = 5;
        blurStepSize = 1;
        edgeSharpness = 1.0;
        monotonicallyDecreasingBilateralWeights = true;
        useDepthPeelBuffer = true;
        depthPeelSeparationHint = 1.6;

        temporallyVarySamples = true; 
        propagationDamping = 0.1;
        temporalFilterSettings = TemporalFilter::Settings {
            alpha = 0.92;
        };

        useTapNormal = true;
        useHalfPrecisionColors = true;
        useOct16 = true;
        computeGuardBandFraction = 0.5;
    };

    maxQualityDeepGBufferRadiosityPresets = DeepGBufferRadiositySettings {  
        numSamples = 30;
        radius = 7.4;
        numBounces = 1; 
        saturatedBoost = 2; 
        unsaturatedBoost = 1; 
        useMipMaps = true; 

        blurRadius = 6;
        blurStepSize = 1;
        edgeSharpness = 1.0;
        monotonicallyDecreasingBilateralWeights = true;
        useDepthPeelBuffer = true;
        depthPeelSeparationHint = 1.6;

        temporallyVarySamples = true; 
        propagationDamping = 0.1;
        temporalFilterSettings = TemporalFilter::Settings {
            alpha = 0.931;
        };

        useTapNormal = true;
        useHalfPrecisionColors = true;
        useOct16 = true;
        minMipLevel = 1;
        computeGuardBandFraction = 0.8;
    };
    
}